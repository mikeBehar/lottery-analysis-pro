diff --git a/js/ml.js b/js/ml.js
index def456..ghi789 100644
--- a/js/ml.js
+++ b/js/ml.js
@@ -120,6 +120,28 @@ class LotteryML {
     return frequency;
   }
 
+  /**
+   * Enhanced frequency analysis with temporal weighting
+   * @param {Array} draws - Historical draw data
+   * @param {number} decayRate - Temporal decay rate
+   * @returns {Object} Temporal-weighted prediction
+   */
+  async predictWithTemporalFrequency(draws, decayRate = 0.1) {
+    const weightedDraws = applyTemporalWeighting(draws, decayRate);
+    const temporalFrequency = calculateTemporalFrequency(weightedDraws);
+    
+    const predictedNumbers = temporalFrequency
+      .map((weightedCount, number) => ({ number, weightedCount }))
+      .filter(item => item.number >= 1 && item.number <= 69)
+      .sort((a, b) => b.weightedCount - a.weightedCount)
+      .slice(0, 10)
+      .map(item => item.number);
+    
+    return {
+      numbers: predictedNumbers,
+      confidence: Math.min(0.82, 0.65 + (weightedDraws.length > 100 ? 0.17 : 0)),
+      model: 'temporal_frequency'
+    };
+  }
+
   /**
    * Get prediction based on frequency analysis
    * @param {Array} frequencyMap - Frequency counts
@@ -141,7 +163,7 @@ class LotteryML {
   async predictNextNumbers(draws) {
     try {
       if (this.model && this.status === "trained") {
-        return await this.predictWithLSTM(draws);
+        return await this.predictWithLSTM(applyTemporalWeighting(draws, 0.1));
       } else {
         return await this.predictWithFrequency(draws);
       }
