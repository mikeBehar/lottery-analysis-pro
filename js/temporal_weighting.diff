diff --git a/js/utils.js b/js/utils.js
index abc123..def456 100644
--- a/js/utils.js
+++ b/js/utils.js
@@ -85,4 +85,46 @@ function getGridPositionScore(num) {
   // Return grid score with bounds checking
   return GRID[row]?.[col] ?? DEFAULT_GRID_SCORE;
 }
+
+// =============== TEMPORAL WEIGHTING =============== //
+/**
+ * Applies exponential time decay to draws (recent draws weighted higher)
+ * @param {Array} draws - Array of draw objects with date property
+ * @param {number} decayRate - Decay rate (0-1), higher = faster decay
+ * @returns {Array} Draws with temporal weights added
+ * @version 1.0.0 | Created: 2025-08-20
+ */
+function applyTemporalWeighting(draws, decayRate = 0.1) {
+  if (!draws.length) return draws;
+  
+  const mostRecentDate = new Date(Math.max(...draws.map(d => d.date.getTime())));
+  const maxAgeDays = (mostRecentDate - new Date(Math.min(...draws.map(d => d.date.getTime())))) / (1000 * 60 * 60 * 24);
+  
+  return draws.map(draw => {
+    const ageDays = (mostRecentDate - draw.date) / (1000 * 60 * 60 * 24);
+    const normalizedAge = ageDays / maxAgeDays;
+    const weight = Math.exp(-decayRate * normalizedAge * 10); // Exponential decay
+    
+    return {
+      ...draw,
+      temporalWeight: weight,
+      weightedNumbers: draw.numbers.map(num => ({
+        number: num,
+        weight: weight
+      }))
+    };
+  });
+}
+
+/**
+ * Calculates frequency with temporal weighting
+ * @param {Array} weightedDraws - Draws with temporal weights
+ * @returns {Array} Frequency map with temporal weighting
+ */
+function calculateTemporalFrequency(weightedDraws) {
+  const frequency = new Array(70).fill(0);
+  weightedDraws.forEach(draw => {
+    draw.weightedNumbers.forEach(weightedNum => {
+      if (weightedNum.number >= 1 && weightedNum.number <= 69) {
+        frequency[weightedNum.number] += weightedNum.weight;
+      }
+    });
+  });
+  return frequency;
+}
diff --git a/js/ml.js b/js/ml.js
index def456..ghi789 100644
--- a/js/ml.js
+++ b/js/ml.js
@@ -120,6 +120,28 @@ class LotteryML {
     return frequency;
   }
 
+  /**
+   * Enhanced frequency analysis with temporal weighting
+   * @param {Array} draws - Historical draw data
+   * @param {number} decayRate - Temporal decay rate
+   * @returns {Object} Temporal-weighted prediction
+   */
+  async predictWithTemporalFrequency(draws, decayRate = 0.1) {
+    const weightedDraws = applyTemporalWeighting(draws, decayRate);
+    const temporalFrequency = calculateTemporalFrequency(weightedDraws);
+    
+    const predictedNumbers = temporalFrequency
+      .map((weightedCount, number) => ({ number, weightedCount }))
+      .filter(item => item.number >= 1 && item.number <= 69)
+      .sort((a, b) => b.weightedCount - a.weightedCount)
+      .slice(0, 10)
+      .map(item => item.number);
+    
+    return {
+      numbers: predictedNumbers,
+      confidence: Math.min(0.82, 0.65 + (weightedDraws.length > 100 ? 0.17 : 0)),
+      model: 'temporal_frequency'
+    };
+  }
+
   /**
    * Get prediction based on frequency analysis
    * @param {Array} frequencyMap - Frequency counts
@@ -141,7 +163,7 @@ class LotteryML {
   async predictNextNumbers(draws) {
     try {
       if (this.model && this.status === "trained") {
-        return await this.predictWithLSTM(draws);
+        return await this.predictWithLSTM(applyTemporalWeighting(draws, 0.1));
       } else {
         return await this.predictWithFrequency(draws);
       }
diff --git a/js/app.js b/js/app.js
index ghi789..jkl012 100644
--- a/js/app.js
+++ b/js/app.js
@@ -10,7 +10,14 @@
       prime: 0.3,
       digitalRoot: 0.2,
       mod5: 0.2,
-      gridPosition: 0.3
+      gridPosition: 0.3
+    },
+    temporalDecayRates: {
+      none: 0.0,
+      low: 0.05,
+      medium: 0.1,
+      high: 0.2,
+      very_high: 0.3
     }
   };
 
@@ -21,7 +28,9 @@
     currentStrategy: null,
     currentMethod: 'combined',
     analysisHistory: [],
-    isAnalyzing: false
+    isAnalyzing: false,
+    temporalDecay: 'medium',
+    decayRate: CONFIG.temporalDecayRates.medium
   };
 
   // ==================== DOM ELEMENTS ==================== //
@@ -33,7 +42,8 @@
     recommendations: document.getElementById('recommendations'),
     formulaBuilder: document.getElementById('formula-builder'),
     saveStrategy: document.getElementById('save-strategy'),
-    methodSelector: document.createElement('select')
+    methodSelector: document.createElement('select'),
+    temporalDecaySelector: document.createElement('select')
   };
 
   // ==================== INITIALIZATION ==================== //
@@ -55,6 +65,18 @@
       energyPanel.insertBefore(label, energyPanel.firstChild);
       energyPanel.insertBefore(elements.methodSelector, energyPanel.firstChild);
     }
+
+    // Create temporal decay selector
+    elements.temporalDecaySelector.id = 'temporal-decay';
+    Object.entries(CONFIG.temporalDecayRates).forEach(([key, value]) => {
+      const option = document.createElement('option');
+      option.value = key;
+      option.textContent = key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' ');
+      option.selected = key === 'medium';
+      elements.temporalDecaySelector.appendChild(option);
+    });
+    const temporalLabel = document.createElement('label');
+    temporalLabel.textContent = 'Time Weighting: ';
   }
 
   // ==================== CORE FUNCTIONS ==================== //
@@ -65,6 +87,12 @@
 
     elements.uploadInput.addEventListener('change', handleFileUpload);
     elements.analyzeBtn.addEventListener('click', runAnalysis);
+    
+    elements.temporalDecaySelector.addEventListener('change', (e) => {
+      state.temporalDecay = e.target.value;
+      state.decayRate = CONFIG.temporalDecayRates[e.target.value];
+      console.log(`Temporal decay set to: ${state.temporalDecay} (rate: ${state.decayRate})`);
+    });
   }
 
   async function handleFileUpload(event) {
diff --git a/styles/main.css b/styles/main.css
index jkl012..mno345 100644
--- a/styles/main.css
+++ b/styles/main.css
@@ -123,3 +123,15 @@
   color: var(--text-muted);
   padding: 2rem;
 }
+
+/* Temporal Controls */
+.temporal-controls {
+  margin: 0.5rem 0;
+  padding: 0.5rem;
+  background: rgba(255, 255, 255, 0.05);
+  border-radius: 6px;
+}
+
+#temporal-decay {
+  margin-left: 0.5rem;
+}
diff --git a/js/app.js b/js/app.js
index ghi789..jkl012 100644
--- a/js/app.js
+++ b/js/app.js
@@ -66,17 +66,26 @@
       energyPanel.insertBefore(elements.methodSelector, energyPanel.firstChild);
     }
 
-    // Create temporal decay selector
+    // Create and add temporal decay selector to control panel
     elements.temporalDecaySelector.id = 'temporal-decay';
+    elements.temporalDecaySelector.className = 'temporal-selector';
+    
     Object.entries(CONFIG.temporalDecayRates).forEach(([key, value]) => {
       const option = document.createElement('option');
       option.value = key;
       option.textContent = key.charAt(0).toUpperCase() + key.slice(1).replace('_', ' ');
-      option.selected = key === 'medium';
+      if (key === 'medium') option.selected = true;
       elements.temporalDecaySelector.appendChild(option);
     });
+    
     const temporalLabel = document.createElement('label');
+    temporalLabel.htmlFor = 'temporal-decay';
     temporalLabel.textContent = 'Time Weighting: ';
+    temporalLabel.className = 'temporal-label';
+    
+    // Add to control panel
+    const controlPanel = document.querySelector('.control-panel');
+    controlPanel.appendChild(temporalLabel);
+    controlPanel.appendChild(elements.temporalDecaySelector);
   }
 
   // ==================== CORE FUNCTIONS ==================== //
@@ -121,6 +130,12 @@
     elements.analyzeBtn.addEventListener('click', runAnalysis);
     
     elements.temporalDecaySelector.addEventListener('change', (e) => {
+      if (!CONFIG.temporalDecayRates[e.target.value]) {
+        console.warn('Invalid temporal decay value:', e.target.value);
+        e.target.value = 'medium';
+        return;
+      }
+      
       state.temporalDecay = e.target.value;
       state.decayRate = CONFIG.temporalDecayRates[e.target.value];
       console.log(`Temporal decay set to: ${state.temporalDecay} (rate: ${state.decayRate})`);
diff --git a/styles/main.css b/styles/main.css
index jkl012..mno345 100644
--- a/styles/main.css
+++ b/styles/main.css
@@ -125,13 +125,25 @@
 }
 
 /* Temporal Controls */
-.temporal-controls {
-  margin: 0.5rem 0;
-  padding: 0.5rem;
-  background: rgba(255, 255, 255, 0.05);
-  border-radius: 6px;
+.temporal-label {
+  margin: 0 0.5rem 0 1rem;
+  font-weight: bold;
+  color: var(--text-light);
 }
 
-#temporal-decay {
-  margin-left: 0.5rem;
+.temporal-selector {
+  padding: 0.5rem;
+  border-radius: 6px;
+  border: 1px solid var(--primary);
+  background: var(--darker-bg);
+  color: var(--text-light);
+  font-size: 0.9rem;
+  margin-right: 1rem;
+}
+
+.temporal-selector:focus {
+  outline: none;
+  border-color: var(--accent);
+  box-shadow: 0 0 0 2px rgba(255, 77, 141, 0.2);
 }
