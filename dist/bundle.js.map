{
  "version": 3,
  "sources": ["../js/confidence-predictor.js", "../js/utils.js", "../js/notifications.js", "../js/state.js", "../js/ui.js", "../js/analysis.js", "../js/enhanced-recommendations.js", "../js/worker-wrapper.js", "../js/optimization-ui.js", "../js/confidence-ui.js", "../js/accuracy-tester.js", "../js/ml.js", "../js/optimization-engine.js", "../js/accuracy-ui.js", "../js/strategy-builder.js", "../js/server-manager.js", "../js/enhanced-accuracy-tester.js", "../js/performance-ui.js", "../js/progress-status.js", "../js/app.js"],
  "sourcesContent": ["/**\r\n * POSITION-BASED CONFIDENCE INTERVAL PREDICTOR\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Provides sophisticated statistical analysis for position-specific\r\n * lottery predictions with confidence intervals and uncertainty quantification\r\n */\r\n\r\n/**\r\n * Statistical utilities for confidence interval calculations\r\n */\r\nclass StatisticalUtils {\r\n  \r\n  static mean(values) {\r\n    return values.reduce((sum, val) => sum + val, 0) / values.length;\r\n  }\r\n  \r\n  static median(values) {\r\n    const sorted = [...values].sort((a, b) => a - b);\r\n    const mid = Math.floor(sorted.length / 2);\r\n    return sorted.length % 2 === 0 \r\n      ? (sorted[mid - 1] + sorted[mid]) / 2 \r\n      : sorted[mid];\r\n  }\r\n  \r\n  static standardDeviation(values) {\r\n    const avg = this.mean(values);\r\n    const squaredDiffs = values.map(val => Math.pow(val - avg, 2));\r\n    const variance = this.mean(squaredDiffs);\r\n    return Math.sqrt(variance);\r\n  }\r\n  \r\n  static weightedMean(values, weights) {\r\n    const weightedSum = values.reduce((sum, val, i) => sum + val * weights[i], 0);\r\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\r\n    return weightedSum / totalWeight;\r\n  }\r\n  \r\n  static weightedVariance(values, weights, weightedMean) {\r\n    const weightedSquaredDiffs = values.reduce((sum, val, i) => \r\n      sum + weights[i] * Math.pow(val - weightedMean, 2), 0\r\n    );\r\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\r\n    return weightedSquaredDiffs / totalWeight;\r\n  }\r\n  \r\n  static getZScore(confidenceLevel) {\r\n    const zScores = {\r\n      0.90: 1.645,\r\n      0.95: 1.96,\r\n      0.99: 2.576\r\n    };\r\n    return zScores[confidenceLevel] || 1.96;\r\n  }\r\n  \r\n  static resample(data) {\r\n    const sample = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      const randomIndex = Math.floor(Math.random() * data.length);\r\n      sample.push(data[randomIndex]);\r\n    }\r\n    return sample;\r\n  }\r\n}\r\n\r\n/**\r\n * Advanced confidence interval analysis methods\r\n */\r\nclass AdvancedConfidenceAnalysis {\r\n  \r\n  /**\r\n   * Bootstrap confidence intervals - more robust than normal approximation\r\n   */\r\n  bootstrapConfidenceInterval(positionData, confidenceLevel = 0.95, iterations = 1000) {\r\n    const bootstrapMeans = [];\r\n    \r\n    for (let i = 0; i < iterations; i++) {\r\n      const sample = StatisticalUtils.resample(positionData);\r\n      bootstrapMeans.push(StatisticalUtils.mean(sample));\r\n    }\r\n    \r\n    bootstrapMeans.sort((a, b) => a - b);\r\n    const alpha = 1 - confidenceLevel;\r\n    const lowerIndex = Math.floor(alpha / 2 * iterations);\r\n    const upperIndex = Math.floor((1 - alpha / 2) * iterations);\r\n    \r\n    return {\r\n      lower: Math.round(bootstrapMeans[lowerIndex]),\r\n      upper: Math.round(bootstrapMeans[upperIndex]),\r\n      method: 'bootstrap',\r\n      iterations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Time-weighted confidence intervals - recent data weighted more heavily\r\n   */\r\n  timeWeightedConfidence(positionData, confidenceLevel = 0.95, decayRate = 0.95) {\r\n    const weights = positionData.map((_, index) => \r\n      Math.pow(decayRate, positionData.length - index - 1)\r\n    );\r\n    \r\n    const weightedMean = StatisticalUtils.weightedMean(positionData, weights);\r\n    const weightedVariance = StatisticalUtils.weightedVariance(positionData, weights, weightedMean);\r\n    const effectiveSampleSize = Math.pow(weights.reduce((a, b) => a + b), 2) / \r\n                                weights.reduce((a, b) => a + b * b);\r\n    \r\n    const standardError = Math.sqrt(weightedVariance / effectiveSampleSize);\r\n    const zScore = StatisticalUtils.getZScore(confidenceLevel);\r\n    const marginOfError = zScore * standardError;\r\n    \r\n    return {\r\n      prediction: Math.round(weightedMean),\r\n      lower: Math.round(weightedMean - marginOfError),\r\n      upper: Math.round(weightedMean + marginOfError),\r\n      method: 'time-weighted',\r\n      effectiveSampleSize: Math.round(effectiveSampleSize)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Normal approximation confidence interval\r\n   */\r\n  normalConfidenceInterval(positionData, confidenceLevel = 0.95) {\r\n    const mean = StatisticalUtils.mean(positionData);\r\n    const std = StatisticalUtils.standardDeviation(positionData);\r\n    const n = positionData.length;\r\n    const zScore = StatisticalUtils.getZScore(confidenceLevel);\r\n    const marginOfError = zScore * (std / Math.sqrt(n));\r\n    \r\n    return {\r\n      prediction: Math.round(mean),\r\n      lower: Math.round(mean - marginOfError),\r\n      upper: Math.round(mean + marginOfError),\r\n      method: 'normal',\r\n      sampleSize: n\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Position-specific lottery number predictor with confidence intervals\r\n */\r\nclass PositionBasedPredictor {\r\n  constructor(historicalData) {\r\n    this.data = historicalData.filter(draw => \r\n      draw.whiteBalls && draw.whiteBalls.length === 5 && draw.powerball\r\n    );\r\n    this.positionStats = this.calculatePositionStatistics();\r\n    this.advancedStats = new AdvancedConfidenceAnalysis();\r\n  }\r\n\r\n  /**\r\n   * Calculate statistical properties for each ball position\r\n   */\r\n  calculatePositionStatistics() {\r\n    const positions = {\r\n      ball1: [], ball2: [], ball3: [], ball4: [], ball5: [], powerball: []\r\n    };\r\n\r\n    // Extract position-specific data\r\n    this.data.forEach(draw => {\r\n      const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n      positions.ball1.push(sorted[0]);  // Lowest number\r\n      positions.ball2.push(sorted[1]);  // Second lowest  \r\n      positions.ball3.push(sorted[2]);  // Middle\r\n      positions.ball4.push(sorted[3]);  // Second highest\r\n      positions.ball5.push(sorted[4]);  // Highest number\r\n      positions.powerball.push(draw.powerball);\r\n    });\r\n\r\n    // Calculate comprehensive statistics for each position\r\n    return Object.entries(positions).reduce((stats, [pos, values]) => {\r\n      stats[pos] = {\r\n        mean: StatisticalUtils.mean(values),\r\n        median: StatisticalUtils.median(values),\r\n        std: StatisticalUtils.standardDeviation(values),\r\n        min: Math.min(...values),\r\n        max: Math.max(...values),\r\n        sampleSize: values.length,\r\n        distribution: this.buildDistribution(values),\r\n        recent: values.slice(-20) // Last 20 draws for trend analysis\r\n      };\r\n      return stats;\r\n    }, {});\r\n  }\r\n\r\n  /**\r\n   * Build frequency distribution for a position\r\n   */\r\n  buildDistribution(values) {\r\n    const distribution = {};\r\n    values.forEach(val => {\r\n      distribution[val] = (distribution[val] || 0) + 1;\r\n    });\r\n    return distribution;\r\n  }\r\n\r\n  /**\r\n   * Get historical data for a specific position\r\n   */\r\n  getPositionData(position) {\r\n    const positionIndex = {\r\n      'ball1': 0, 'ball2': 1, 'ball3': 2, 'ball4': 3, 'ball5': 4\r\n    };\r\n\r\n    if (position === 'powerball') {\r\n      return this.data.map(draw => draw.powerball);\r\n    } else {\r\n      return this.data.map(draw => {\r\n        const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n        return sorted[positionIndex[position]];\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate predictions with confidence intervals for all positions\r\n   */\r\n  async generatePredictionWithConfidenceIntervals(options = {}) {\r\n    const {\r\n      confidenceLevel = 0.95,\r\n      method = 'bootstrap', // 'normal', 'bootstrap', 'time-weighted'\r\n      includeCorrelations = true\r\n    } = options;\r\n\r\n    const positions = ['ball1', 'ball2', 'ball3', 'ball4', 'ball5', 'powerball'];\r\n    const predictions = [];\r\n\r\n    for (const position of positions) {\r\n      const positionData = this.getPositionData(position);\r\n      const stats = this.positionStats[position];\r\n      \r\n      let confidenceResult;\r\n      switch (method) {\r\n        case 'bootstrap':\r\n          confidenceResult = this.advancedStats.bootstrapConfidenceInterval(positionData, confidenceLevel);\r\n          break;\r\n        case 'time-weighted':\r\n          confidenceResult = this.advancedStats.timeWeightedConfidence(positionData, confidenceLevel);\r\n          break;\r\n        case 'normal':\r\n        default:\r\n          confidenceResult = this.advancedStats.normalConfidenceInterval(positionData, confidenceLevel);\r\n      }\r\n\r\n      // Apply position-specific constraints\r\n      const maxValue = position === 'powerball' ? 26 : 69;\r\n      const minValue = 1;\r\n      \r\n      const prediction = confidenceResult.prediction || Math.round(stats.mean);\r\n      const lower = Math.max(minValue, confidenceResult.lower);\r\n      const upper = Math.min(maxValue, confidenceResult.upper);\r\n\r\n      predictions.push({\r\n        position,\r\n        prediction,\r\n        confidenceInterval: {\r\n          lower,\r\n          upper,\r\n          method,\r\n          confidenceLevel,\r\n          display: this.formatConfidenceDisplay(prediction, lower, upper)\r\n        },\r\n        statistics: {\r\n          mean: Math.round(stats.mean * 100) / 100,\r\n          median: stats.median,\r\n          std: Math.round(stats.std * 100) / 100,\r\n          sampleSize: stats.sampleSize\r\n        }\r\n      });\r\n    }\r\n\r\n    // Adjust for position correlations if requested\r\n    if (includeCorrelations) {\r\n      return this.adjustForPositionConstraints(predictions);\r\n    }\r\n\r\n    return predictions;\r\n  }\r\n\r\n  /**\r\n   * Format confidence interval display\r\n   */\r\n  formatConfidenceDisplay(prediction, lower, upper) {\r\n    const lowerDiff = prediction - lower;\r\n    const upperDiff = upper - prediction;\r\n    \r\n    return {\r\n      range: `${prediction} {-${lowerDiff}, +${upperDiff}}`,\r\n      interval: `[${lower}, ${upper}]`,\r\n      symmetric: lowerDiff === upperDiff,\r\n      precision: lowerDiff !== upperDiff ? `{-${lowerDiff}, +${upperDiff}}` : `\u00B1${lowerDiff}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adjust predictions to ensure they follow position constraints\r\n   * (e.g., ball1 < ball2 < ball3 < ball4 < ball5)\r\n   */\r\n  adjustForPositionConstraints(predictions) {\r\n    const whiteBallPredictions = predictions.slice(0, 5); // First 5 are white balls\r\n    const powerballPrediction = predictions[5];\r\n\r\n    // Sort white ball predictions by their values to maintain order\r\n    whiteBallPredictions.sort((a, b) => a.prediction - b.prediction);\r\n    \r\n    // Ensure minimum gaps between positions\r\n    const minGap = 2;\r\n    for (let i = 1; i < whiteBallPredictions.length; i++) {\r\n      if (whiteBallPredictions[i].prediction - whiteBallPredictions[i-1].prediction < minGap) {\r\n        whiteBallPredictions[i].prediction = whiteBallPredictions[i-1].prediction + minGap;\r\n        \r\n        // Adjust confidence intervals accordingly\r\n        const adjustment = whiteBallPredictions[i].prediction - \r\n          (whiteBallPredictions[i].confidenceInterval.lower + whiteBallPredictions[i].confidenceInterval.upper) / 2;\r\n        \r\n        whiteBallPredictions[i].confidenceInterval.lower += adjustment;\r\n        whiteBallPredictions[i].confidenceInterval.upper += adjustment;\r\n        \r\n        // Re-format display\r\n        whiteBallPredictions[i].confidenceInterval.display = this.formatConfidenceDisplay(\r\n          whiteBallPredictions[i].prediction,\r\n          whiteBallPredictions[i].confidenceInterval.lower,\r\n          whiteBallPredictions[i].confidenceInterval.upper\r\n        );\r\n        \r\n        whiteBallPredictions[i].constraintAdjusted = true;\r\n      }\r\n    }\r\n\r\n    return [...whiteBallPredictions, powerballPrediction];\r\n  }\r\n\r\n  /**\r\n   * Get summary statistics for the prediction system\r\n   */\r\n  getSystemStats() {\r\n    return {\r\n      totalDraws: this.data.length,\r\n      positionStats: Object.entries(this.positionStats).reduce((summary, [pos, stats]) => {\r\n        summary[pos] = {\r\n          mean: Math.round(stats.mean * 100) / 100,\r\n          range: `${stats.min}-${stats.max}`,\r\n          std: Math.round(stats.std * 100) / 100\r\n        };\r\n        return summary;\r\n      }, {}),\r\n      dataQuality: this.assessDataQuality()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Assess the quality and sufficiency of historical data\r\n   */\r\n  assessDataQuality() {\r\n    const minRecommendedDraws = 100;\r\n    const quality = {\r\n      sufficient: this.data.length >= minRecommendedDraws,\r\n      drawCount: this.data.length,\r\n      recommendation: this.data.length >= minRecommendedDraws \r\n        ? 'Sufficient data for reliable confidence intervals'\r\n        : `Consider collecting more data. Current: ${this.data.length}, Recommended: ${minRecommendedDraws}+`\r\n    };\r\n\r\n    return quality;\r\n  }\r\n}\r\n\r\n// Export for use in other modules\r\nexport { \r\n  PositionBasedPredictor, \r\n  AdvancedConfidenceAnalysis, \r\n  StatisticalUtils \r\n};\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.PositionBasedPredictor = PositionBasedPredictor;\r\n  window.AdvancedConfidenceAnalysis = AdvancedConfidenceAnalysis;\r\n  window.StatisticalUtils = StatisticalUtils;\r\n}", "/**\n * LOTTERY ANALYSIS UTILITIES\n * Version: 2.4.2 | Updated: 2025-08-21 02:45 PM EST\n * Changes:\n * - Added temporal weighting analysis\n * - Added number pairing/grouping analysis\n * - Enhanced gap analysis with statistical expectations\n * - Maintained all existing energy calculation functions\n */\n\n// =============== ENERGY CALCULATION =============== //\n/**\n * Calculates energy signature for lottery numbers\n * @param {number[]} numbers - Array of numbers (1-69)\n * @param {Object} weights - The energy weights from CONFIG.\n * @returns {Object[]} Energy data for each number\n * @version 1.1.0 | Updated: 2024-08-21\n */\nfunction calculateEnergy(numbers, weights) {\n  const defaultWeights = {\n    prime: 0.3,\n    digitalRoot: 0.2,\n    mod5: 0.2,\n    gridPosition: 0.3\n  };\n  const effectiveWeights = weights || defaultWeights;\n  \n  return numbers.map(num => {\n    const energyComponents = {\n      isPrime: isPrime(num) ? 1 : 0,\n      digitalRoot: getDigitalRoot(num),\n      mod5: (num % 5) * 0.2,\n      gridScore: getGridPositionScore(num)\n    };\n\n    const energy = (energyComponents.isPrime * effectiveWeights.prime) +\n                   (energyComponents.digitalRoot * effectiveWeights.digitalRoot) +\n                   (energyComponents.mod5 * effectiveWeights.mod5) +\n                   (energyComponents.gridScore * effectiveWeights.gridPosition);\n\n    return {\n      number: num,\n      ...energyComponents,\n      energy: energy\n    };\n  });\n}\n\n/**\n * Displays energy calculation results in a container\n * @param {Object[]} energyData - Array of energy data objects\n * @param {HTMLElement} container - DOM element to display results in\n * @version 1.0.0 | Created: 2023-11-16\n */\nfunction displayEnergyResults(energyData, container) {\n  if (!energyData || energyData.length === 0) {\n    container.innerHTML = '<p>No energy data available</p>';\n    return;\n  }\n\n  // Deduplicate by number\n  const uniqueByNumber = {};\n  energyData.forEach(item => { uniqueByNumber[item.number] = item; });\n  const deduped = Object.values(uniqueByNumber);\n  const sorted = [...deduped].sort((a, b) => b.energy - a.energy);\n  const topNumbers = sorted.slice(0, 15);\n  console.log('[Energy Panel] Top numbers (deduped):', topNumbers.map(n => n.number));\n  container.innerHTML = topNumbers.map(num => `\n    <div class=\"number-card\" data-energy=\"${num.energy.toFixed(2)}\">\n      <div class=\"number\">${num.number}</div>\n      <div class=\"energy-score\">${num.energy.toFixed(2)}</div>\n      <div class=\"energy-breakdown\">\n        Prime: ${num.isPrime ? '\u2713' : '\u2717'} | \n        Root: ${num.digitalRoot} | \n        Mod5: ${(num.mod5 / 0.2).toFixed(0)} | \n        Grid: ${num.gridScore.toFixed(1)}\n      </div>\n    </div>\n  `).join('');\n}\n\n// =============== TEMPORAL ANALYSIS =============== //\n/**\n * Applies exponential time decay to an array of draws\n * Recent draws are weighted more heavily than older ones\n * @param {Array} draws - Array of draw objects\n * @param {number} decayRate - Decay factor (e.g., 0.9 = 10% decay per draw)\n * @returns {Array} Draws with an added `weight` property\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction applyTemporalDecay(draws, decayRate = 0.99) {\n  if (!draws.length) return [];\n  \n  const weightedDraws = draws.map((draw, index) => {\n    // Most recent draw gets weight = 1, previous gets decayRate, then decayRate^2, etc.\n    const weight = Math.pow(decayRate, draws.length - index - 1);\n    return { ...draw, weight };\n  });\n  \n  return weightedDraws;\n}\n\n// =============== NUMBER RELATIONSHIP ANALYSIS =============== //\n/**\n * Analyzes and identifies number pairs that frequently appear together\n * @param {Array} draws - Array of draw objects\n * @param {number} minFrequency - Minimum co-occurrences to consider\n * @returns {Object} Map of number pairs and their frequency count\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction findNumberPairs(draws, minFrequency = 5) {\n  const pairCounts = {};\n  \n  draws.forEach(draw => {\n    const whiteBalls = (draw.whiteBalls || []).slice().sort((a, b) => a - b);\n    // Create all possible pairs in the draw\n    for (let i = 0; i < whiteBalls.length; i++) {\n      for (let j = i + 1; j < whiteBalls.length; j++) {\n        const pairKey = `${whiteBalls[i]}-${whiteBalls[j]}`;\n        pairCounts[pairKey] = (pairCounts[pairKey] || 0) + 1;\n      }\n    }\n  });\n  \n  // Filter and sort pairs\n  const frequentPairs = Object.entries(pairCounts)\n    .filter(([_, count]) => count >= minFrequency)\n    .sort((a, b) => b[1] - a[1])\n    .reduce((obj, [key, count]) => {\n      obj[key] = count;\n      return obj;\n    }, {});\n  \n  return frequentPairs;\n}\n\n// =============== GAP ANALYSIS =============== //\n/**\n * Calculates the expected and actual gaps for each number\n * Identifies truly overdue numbers based on statistical expectation\n * @param {Array} draws - Array of draw objects\n * @returns {Object} Gap analysis for numbers 1-69.\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction calculateGapAnalysis(draws) {\n  const gapData = {};\n  \n  // Initialize numbers 1-69\n  for (let i = 1; i <= 69; i++) {\n    gapData[i] = {\n      number: i,\n      frequency: 0,\n      lastSeen: null,\n      gaps: [],\n      expectedGap: 0,\n      currentGap: 0,\n      isOverdue: false\n    };\n  }\n  \n  // First pass: calculate frequencies and gaps\n  draws.forEach((draw, drawIndex) => {\n    (draw.whiteBalls || []).forEach(num => {\n      if (num >= 1 && num <= 69) {\n        if (gapData[num].lastSeen !== null) {\n          const gap = drawIndex - gapData[num].lastSeen;\n          gapData[num].gaps.push(gap);\n        }\n        gapData[num].lastSeen = drawIndex;\n        gapData[num].frequency++;\n      }\n    });\n  });\n  \n  // Second pass: calculate expected gap and overdue status\n  Object.values(gapData).forEach(data => {\n    if (data.gaps.length > 0) {\n      data.expectedGap = data.gaps.reduce((sum, gap) => sum + gap, 0) / data.gaps.length;\n      data.currentGap = draws.length - data.lastSeen;\n      data.isOverdue = data.currentGap > data.expectedGap * 1.5; // 50% beyond expected\n    }\n  });\n  \n  return gapData;\n}\n\n// =============== SUPPORTING FUNCTIONS =============== //\n/** \n * Checks if a number is prime \n * @version 1.0.0 | Created: 2023-11-15\n */\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  \n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\n/** \n * Calculates digital root (recursive digit sum) \n * @version 1.0.0 | Created: 2023-11-15\n */\nfunction getDigitalRoot(num) {\n  return num - 9 * Math.floor((num - 1) / 9);\n}\n\n/** \n * Scores spatial position on a 5x14 grid \n * @version 1.0.4 | Updated: 2024-08-20 07:30 PM EST\n */\nfunction getGridPositionScore(num) {\n  const GRID = [\n    [0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9],\n    [0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7],\n    [0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5],\n    [0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7],\n    [0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9]\n  ];\n  \n  if (num < 1 || num > 70) return 0.5;\n  const row = Math.floor((num - 1) / 14);\n  const col = (num - 1) % 14;\n  return GRID[row]?.[col] ?? 0.5;\n}\n\n// =============== EXPORTS =============== //\n// Note: If using ES6 modules, add export statements\nexport {\n  calculateEnergy, displayEnergyResults,\n  applyTemporalDecay, findNumberPairs, calculateGapAnalysis,\n  isPrime, getDigitalRoot, getGridPositionScore,\n  applyTemporalWeighting, calculateTemporalFrequency\n};\n\n// =============== TEMPORAL WEIGHTING =============== //\n/**\n * Applies exponential time decay to draws (recent draws weighted higher)\n * @param {Array} draws - Array of draw objects with date property\n * @param {number} decayRate - Decay rate (0-1), higher = faster decay\n * @returns {Array} Draws with temporal weights added\n * @version 1.0.0 | Created: 2024-08-20\n */\nfunction applyTemporalWeighting(draws, decayRate = 0.1) {\n  const validDraws = draws.filter(d => d.date && typeof d.date.getTime === 'function');\n  if (!validDraws.length) return [];\n  \n  const mostRecentDate = new Date(Math.max(...validDraws.map(d => d.date.getTime())));\n  const maxAgeDays = (mostRecentDate - new Date(Math.min(...validDraws.map(d => d.date.getTime())))) / (1000 * 60 * 60 * 24);\n  \n  return validDraws.map(draw => {\n    const ageDays = (mostRecentDate - draw.date) / (1000 * 60 * 60 * 24);\n    const normalizedAge = ageDays / maxAgeDays;\n    const weight = Math.exp(-decayRate * normalizedAge * 10); // Exponential decay\n    return {\n      ...draw,\n      temporalWeight: weight,\n      weightedNumbers: (draw.whiteBalls || []).map(num => ({\n        number: num,\n        weight: weight\n      }))\n    };\n  });\n}\n\n/**\n * Calculates frequency with temporal weighting\n * @param {Array} weightedDraws - Draws with temporal weights\n * @returns {Array} Frequency map with temporal weighting\n */\nfunction calculateTemporalFrequency(weightedDraws) {\n  const frequency = new Array(70).fill(0);\n  weightedDraws.forEach(draw => {\n    draw.weightedNumbers.forEach(weightedNum => {\n      if (weightedNum.number >= 1 && weightedNum.number <= 69) {\n        frequency[weightedNum.number] += weightedNum.weight;\n      }\n    });\n  });\n  return frequency;\n}\n\n// Make temporal functions available globally\nif (typeof window !== 'undefined') {\n  window.applyTemporalWeighting = applyTemporalWeighting;\n  window.calculateTemporalFrequency = calculateTemporalFrequency;\n}", "/**\r\n * Non-blocking notification system to replace alert()\r\n * Creates toast-style notifications with auto-dismiss\r\n */\r\n\r\nlet notificationContainer = null;\r\n\r\n/**\r\n * Initialize notification container\r\n */\r\nfunction initNotifications() {\r\n  if (!notificationContainer) {\r\n    notificationContainer = document.createElement('div');\r\n    notificationContainer.id = 'notification-container';\r\n    notificationContainer.className = 'notification-container';\r\n    document.body.appendChild(notificationContainer);\r\n  }\r\n}\r\n\r\n/**\r\n * Show notification with auto-dismiss\r\n * @param {string} title - Notification title\r\n * @param {string} message - Notification message\r\n * @param {string} type - Notification type: 'error', 'success', 'warning', 'info'\r\n * @param {number} duration - Auto-dismiss duration in ms (0 = no auto-dismiss)\r\n */\r\nexport function showNotification(title, message, type = 'info', duration = 5000) {\r\n  initNotifications();\r\n\r\n  const notification = document.createElement('div');\r\n  notification.className = `notification notification-${type}`;\r\n  \r\n  notification.innerHTML = `\r\n    <div class=\"notification-content\">\r\n      <div class=\"notification-title\">${escapeHtml(title)}</div>\r\n      <div class=\"notification-message\">${escapeHtml(message)}</div>\r\n    </div>\r\n    <button class=\"notification-close\" aria-label=\"Close notification\">&times;</button>\r\n  `;\r\n\r\n  // Add close functionality\r\n  const closeBtn = notification.querySelector('.notification-close');\r\n  closeBtn.addEventListener('click', () => {\r\n    removeNotification(notification);\r\n  });\r\n\r\n  // Add to container with slide-in animation\r\n  notificationContainer.appendChild(notification);\r\n  setTimeout(() => notification.classList.add('notification-show'), 10);\r\n\r\n  // Auto-dismiss if duration > 0\r\n  if (duration > 0) {\r\n    setTimeout(() => {\r\n      removeNotification(notification);\r\n    }, duration);\r\n  }\r\n\r\n  return notification;\r\n}\r\n\r\n/**\r\n * Remove notification with slide-out animation\r\n */\r\nfunction removeNotification(notification) {\r\n  notification.classList.add('notification-hide');\r\n  setTimeout(() => {\r\n    if (notification.parentNode) {\r\n      notification.parentNode.removeChild(notification);\r\n    }\r\n  }, 300);\r\n}\r\n\r\n/**\r\n * Show error notification\r\n */\r\nexport function showError(title, message) {\r\n  return showNotification(title, message, 'error', 8000);\r\n}\r\n\r\n/**\r\n * Show success notification\r\n */\r\nexport function showSuccess(title, message) {\r\n  return showNotification(title, message, 'success', 4000);\r\n}\r\n\r\n/**\r\n * Show warning notification\r\n */\r\nexport function showWarning(title, message) {\r\n  return showNotification(title, message, 'warning', 6000);\r\n}\r\n\r\n/**\r\n * Show info notification\r\n */\r\nexport function showInfo(title, message) {\r\n  return showNotification(title, message, 'info', 5000);\r\n}\r\n\r\n/**\r\n * Clear all notifications\r\n */\r\nexport function clearAllNotifications() {\r\n  if (notificationContainer) {\r\n    const notifications = notificationContainer.querySelectorAll('.notification');\r\n    notifications.forEach(removeNotification);\r\n  }\r\n}\r\n\r\n/**\r\n * Escape HTML to prevent XSS\r\n */\r\nfunction escapeHtml(text) {\r\n  const div = document.createElement('div');\r\n  div.textContent = text;\r\n  return div.innerHTML;\r\n}\r\n\r\n// Auto-initialize when module loads\r\nif (typeof document !== 'undefined') {\r\n  document.addEventListener('DOMContentLoaded', initNotifications);\r\n}", "// js/state.js\r\n// Simple pub/sub (event emitter) for app state management\r\n// Usage: import state from './state.js';\r\n\r\nclass PubSub {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  subscribe(event, handler) {\r\n    if (!this.events[event]) {\r\n      this.events[event] = [];\r\n    }\r\n    this.events[event].push(handler);\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event].filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  publish(event, data) {\r\n    if (!this.events[event]) return;\r\n    this.events[event].forEach(handler => handler(data));\r\n  }\r\n\r\n  clear(event) {\r\n    if (event) {\r\n      delete this.events[event];\r\n    } else {\r\n      this.events = {};\r\n    }\r\n  }\r\n}\r\n\r\nconst state = new PubSub();\r\nexport default state;\r\n", "import { displayEnergyResults as displayEnergyResultsFromUtils } from './utils.js';\nimport { showError, showSuccess, showInfo } from './notifications.js';\nimport state from './state.js';\n\nexport function displayEnergyResults(energyData, container) {\n  displayEnergyResultsFromUtils(energyData, container);\n}\n\n// Listen for drawsUpdated event (future: update UI, enable analysis, show draw count, etc.)\nstate.subscribe('drawsUpdated', (draws) => {\n  // Example: log or update UI with draw count\n  console.log(`[PubSub] Draws updated: ${draws.length} draws loaded.`);\n  // You can add UI updates here as needed\n});\n// Centralized DOM elements object\nexport const elements = (() => {\n  const panelsContainer = document.querySelector('.panels') || document.body;\n  const makePanel = (id, className) => {\n    let el = document.getElementById(id);\n    if (!el) {\n      el = document.createElement('div');\n      el.id = id;\n      el.className = className;\n      panelsContainer.appendChild(el);\n    }\n    return el;\n  };\n  return {\n    methodSelector: document.createElement('select'),\n    temporalDecaySelector: document.createElement('select'),\n    analyzeBtn: document.getElementById('analyzeBtn'),\n    uploadInput: document.getElementById('csvUpload'),\n    progressIndicator: document.createElement('div'),\n    backtestResults: document.createElement('div'),\n    recommendations: document.getElementById('recommendations'),\n    energyResults: document.getElementById('energy-results') || makePanel('energy-results', 'energy-panel'),\n    mlResults: document.getElementById('ml-results') || makePanel('ml-results', 'ml-panel'),\n    // Analytics panels\n    hotColdPanel: makePanel('hot-cold-panel', 'analytics-panel'),\n    overduePanel: makePanel('overdue-panel', 'analytics-panel'),\n    frequencyPanel: makePanel('frequency-panel', 'analytics-panel'),\n    pairsPanel: makePanel('pairs-panel', 'analytics-panel'),\n    gapsPanel: makePanel('gaps-panel', 'analytics-panel'),\n    // ...existing code...\n  };\n})();\n\n// --- Analytics event subscriptions ---\nstate.subscribe('analytics:hotCold', (hotCold) => displayHotCold(hotCold, elements.hotColdPanel));\nstate.subscribe('analytics:overdue', (overdue) => displayOverdue(overdue, elements.overduePanel));\nstate.subscribe('analytics:frequency', (frequency) => displayFrequency(frequency, elements.frequencyPanel));\nstate.subscribe('analytics:pairs', (pairs) => displayPairs(pairs, elements.pairsPanel));\nstate.subscribe('analytics:gaps', (gaps) => displayGaps(gaps, elements.gapsPanel));\n\n// --- Analytics display functions ---\nexport function displayHotCold(hotCold, container) {\n  container.innerHTML = `\n    <h3>\uD83D\uDD25 Hot & Cold Numbers</h3>\n    <div><strong>Hot:</strong> ${hotCold.hot.map(n => `<span class=\"number hot\">${n}</span>`).join(' ')}</div>\n    <div><strong>Cold:</strong> ${hotCold.cold.map(n => `<span class=\"number cold\">${n}</span>`).join(' ')}</div>\n  `;\n}\n\nexport function displayOverdue(overdue, container) {\n  container.innerHTML = `\n    <h3>\u23F3 Overdue Numbers</h3>\n    <div>${overdue.map(n => `<span class=\"number overdue\">${n}</span>`).join(' ')}</div>\n  `;\n}\n\nexport function displayFrequency(frequency, container) {\n  container.innerHTML = `\n    <h3>\uD83D\uDCCA Number Frequency</h3>\n    <div class=\"frequency-grid\">\n      ${frequency.whiteBalls.map((count, idx) => `<span class=\"number freq\">${idx + 1}: ${count}</span>`).join(' ')}\n    </div>\n  `;\n}\n\nexport function displayPairs(pairs, container) {\n  // Show top 10 pairs\n  const sorted = Object.entries(pairs).sort((a, b) => b[1] - a[1]).slice(0, 10);\n  container.innerHTML = `\n    <h3>\uD83D\uDD17 Common Number Pairs</h3>\n    <ul>${sorted.map(([pair, count]) => `<li>${pair}: ${count}</li>`).join('')}</ul>\n  `;\n}\n\nexport function displayGaps(gaps, container) {\n  // Show all gaps sorted by frequency\n  const sorted = Object.entries(gaps).sort((a, b) => b[1] - a[1]);\n  container.innerHTML = `\n    <h3>\uD83D\uDCCF Gap Analysis</h3>\n    <ul>${sorted.map(([gap, count]) => `<li>Gap ${gap}: ${count} times</li>`).join('')}</ul>\n  `;\n}\n\n/**\n * Initialize UI elements and dynamic DOM structure.\n * @param {object} CONFIG - App config object (for method options)\n * @param {object} state - App state object (for current method)\n */\nexport function initUIElements(CONFIG, state) {\n  // Create and add Powerball results container if not present\n  if (!elements.powerballResults) {\n    elements.powerballResults = document.getElementById('powerball-results');\n    if (!elements.powerballResults) {\n      elements.powerballResults = document.createElement('div');\n      elements.powerballResults.id = 'powerball-results';\n      elements.powerballResults.className = 'powerball-panel';\n      // Insert after recommendations if present, else at end of body\n      if (elements.recommendations?.parentNode) {\n        elements.recommendations.parentNode.insertBefore(elements.powerballResults, elements.recommendations.nextSibling);\n      } else {\n        document.body.appendChild(elements.powerballResults);\n      }\n    }\n  }\n  elements.methodSelector.id = 'method-selector';\n  CONFIG.analysisMethods.forEach(method => {\n    const option = document.createElement('option');\n    option.value = method;\n    option.textContent = method.charAt(0).toUpperCase() + method.slice(1);\n    elements.methodSelector.appendChild(option);\n  });\n  elements.methodSelector.value = state.currentMethod;\n  // ...add more UI initialization as needed...\n}\n\n// Subscribe to pub/sub events for analysis workflow\nstate.subscribe('progress', (msg) => showProgress(msg));\nstate.subscribe('hideProgress', () => hideProgress());\nstate.subscribe('analyzeBtnState', (enabled) => setAnalyzeBtnState(enabled));\nstate.subscribe('error', ({ title, message }) => showErrorOld(title, message));\nstate.subscribe('energyResults', (energyData) => displayEnergyResults(energyData, elements.energyResults));\nstate.subscribe('mlResults', (mlPrediction) => displayMLResults(mlPrediction, elements.mlResults, elements));\nstate.subscribe('recommendations', (recommendations) => displayRecommendations(recommendations, elements));\n\nexport function displayMLResults(mlPrediction, container, elements) {\n  if (typeof DEBUG !== 'undefined' && DEBUG) console.log('displayMLResults called', mlPrediction, container);\n  console.log('[Debug] displayMLResults: mlPrediction =', mlPrediction);\n  console.log('[Debug] displayMLResults: container =', container);\n  // Show white balls and powerball separately\n  const whiteBalls = (mlPrediction.whiteBalls || []).map(num => num.toString().padStart(2, '0')).join(' ');\n  const powerball = mlPrediction.powerball ? mlPrediction.powerball.toString().padStart(2, '0') : '';\n  container.innerHTML = `\n    <div class=\"ml-prediction\">\n      <div class=\"confidence\">Confidence: ${(mlPrediction.confidence * 100).toFixed(1)}%</div>\n      <div class=\"ml-numbers\"><strong>White Balls:</strong> ${whiteBalls}</div>\n      <div class=\"ml-numbers\"><strong>Powerball:</strong> <span class=\"powerball-number\">${powerball}</span></div>\n      <div class=\"model-info\">Model: ${mlPrediction.model}</div>\n      ${mlPrediction.warning ? `<div class=\"warning\">${mlPrediction.warning}</div>` : ''}\n    </div>\n  `;\n  // Also show in dedicated powerball section if present\n  elements?.powerballResults && (elements.powerballResults.innerHTML = `\n    <div class=\"powerball-section\">\n      <h3>\uD83D\uDD34 Powerball Prediction</h3>\n      <div class=\"powerball-prediction\">\n        <span class=\"powerball-number\">${powerball}</span>\n      </div>\n      <div class=\"confidence\">Confidence: ${(mlPrediction.confidence * 100).toFixed(1)}%</div>\n      <div class=\"model-info\">Model: ${mlPrediction.model}</div>\n    </div>\n  `);\n}\n\nexport function displayRecommendations(recommendations, elements) {\n  if (typeof DEBUG !== 'undefined' && DEBUG) console.log('displayRecommendations called', recommendations);\n  console.log('[Debug] displayRecommendations: recommendations =', recommendations);\n  console.log('[Debug] displayRecommendations: elements.recommendations =', elements.recommendations);\n  if (!elements.recommendations) return;\n  // Show white ball recommendations\n  elements.recommendations.innerHTML = `\n    <div class=\"recommendation-section\">\n      <h3>\uD83C\uDFAF High Confidence White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.highConfidence.map(num => \n          `<span class=\"number high-confidence\">${num}</span>`\n        ).join(' ')}\n        ${recommendations.highConfidence.length === 0 ? \n          '<span class=\"no-data\">No strong matches found</span>' : ''}\n      </div>\n    </div>\n    <div class=\"recommendation-section\">\n      <h3>\u26A1 Energy-Based White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.energyBased.map(num => \n          `<span class=\"number energy-based\">${num}</span>`\n        ).join(' ')}\n      </div>\n    </div>\n    <div class=\"recommendation-section\">\n      <h3>\uD83E\uDD16 ML-Based White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.mlBased.map(num => \n          `<span class=\"number ml-based\">${num}</span>`\n        ).join(' ')}\n      </div>\n    </div>\n    <div class=\"recommendation-summary\">\n      <p>${recommendations.summary}</p>\n    </div>\n  `;\n  // Show Powerball recommendation in dedicated section if present\n  if (elements.powerballResults && recommendations.powerball) {\n    elements.powerballResults.innerHTML += `\n      <div class=\"powerball-recommendation-section\">\n        <h3>\uD83D\uDD34 Powerball Recommendation</h3>\n        <div class=\"powerball-recommendation\">\n          <span class=\"powerball-number\">${recommendations.powerball}</span>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport function displayBacktestResults(results, elements) {\n  if (!results.available) {\n    elements.backtestResults.innerHTML = `<p class=\"no-backtest\">${results.message}</p>`;\n    return;\n  }\n\n  const metrics = results.performanceMetrics;\n  elements.backtestResults.innerHTML = `\n    <div class=\"backtest-header\">\n      <h3>\uD83D\uDCCA Backtesting Results (${results.totalTests} tests)</h3>\n      <p>Method: ${results.method.toUpperCase()} | Draws Tested: ${results.totalDrawsTested} | Time: ${results.analysisTime || 'N/A'} seconds</p>\n    </div>\n    \n    <div class=\"metrics-grid\">\n      <div class=\"metric-card\">\n        <h4>Hit Rate</h4>\n        <div class=\"metric-value\">${(metrics.hitRate * 100).toFixed(1)}%</div>\n        <p>Percentage of tests with \u22653 correct numbers</p>\n      </div>\n      \n      <div class=\"metric-card\">\n        <h4>Precision</h4>\n        <div class=\"metric-value\">${(metrics.precision * 100).toFixed(1)}%</div>\n        <p>Accuracy of individual number predictions</p>\n      </div>\n      <div class=\"metric-card\">\n        <h4>ROI</h4>\n        <div class=\"metric-value ${metrics.roi >= 0 ? 'positive' : 'negative'}\">${metrics.roi >= 0 ? '+' : ''}${metrics.roi.toFixed(1)}%</div>\n        <p>Simulated return on investment</p>\n      </div>\n      \n      <div class=\"metric-card\">\n        <h4>Hit Distribution</h4>\n        <div class=\"hit-distribution\">\n          ${Object.entries(metrics.hitDistribution).map(([hitCount, count]) => `\n            <div class=\"hit-item\">\n              <span class=\"hit-count\">${hitCount} numbers:</span>\n              <span class=\"hit-value\">${count} hits</span>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"financial-summary\">\n      <h4>Financial Simulation</h4>\n      <p>Total Spent: $${metrics.totalSpent} | Total Won: $${metrics.totalWon}</p>\n      <p>Net: $${(metrics.totalWon - metrics.totalSpent).toFixed(2)}</p>\n    </div>\n  `;\n}\n\n/**\n * Query and initialize all main UI elements.\n * @returns {object} elements\n */\n\nexport function setAnalyzeBtnState(enabled) {\n  const btn = document.getElementById('analyzeBtn');\n  if (btn) {\n    btn.disabled = !enabled;\n    btn.classList.toggle('ready', enabled);\n  }\n}\n\nexport function showProgress(message) {\n  const indicator = document.getElementById('progress-indicator');\n  if (indicator) {\n    indicator.style.display = 'block';\n    indicator.innerHTML = `\n      <div class=\"progress-content\">\n        <div class=\"spinner\"></div>\n        <p>${message}</p>\n      </div>\n    `;\n  }\n  setAnalyzeBtnState(false);\n  showCancelButton();\n  updateProgress(message);\n}\n\nexport function updateProgress(message, percent) {\n  const progressText = document.getElementById('progress-text');\n  if (progressText) {\n    progressText.textContent = percent !== undefined ? `${message} (${percent}%)` : message;\n  }\n  const indicator = document.getElementById('progress-indicator');\n  if (indicator && message) {\n    const p = indicator.querySelector('p');\n    if (p) p.textContent = percent !== undefined ? `${message} (${percent}%)` : message;\n  }\n}\n\nexport function hideProgress() {\n  const indicator = document.getElementById('progress-indicator');\n  const cancelBtn = document.getElementById('cancel-btn');\n  const progressText = document.getElementById('progress-text');\n  const analyzeBtn = document.getElementById('analyze-btn');\n  if (indicator) indicator.style.display = 'none';\n  if (cancelBtn) cancelBtn.style.display = 'none';\n  if (progressText) progressText.textContent = '';\n  if (analyzeBtn) analyzeBtn.disabled = false;\n}\n\nexport function showCancelButton() {\n  const cancelBtn = document.getElementById('cancel-btn');\n  if (cancelBtn) cancelBtn.style.display = 'inline-block';\n}\n\nexport function hideCancelButton() {\n  const cancelBtn = document.getElementById('cancel-btn');\n  if (cancelBtn) cancelBtn.style.display = 'none';\n}\n\nexport function showErrorOld(title, error) {\n  let msg = '';\n  if (error && typeof error.message === 'string') {\n    msg = error.message;\n  } else if (typeof error === 'string') {\n    msg = error;\n  } else if (error) {\n    msg = JSON.stringify(error);\n  } else {\n    msg = 'Unknown error';\n  }\n  console.error(`${title}:`, error);\n  showError(title, msg);\n}\n", "/**\r\n * Identify the most overdue numbers (not drawn for the longest time).\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69)\r\n * @param {number} topN - Number of overdue numbers to return (default 5)\r\n * @returns {Array} Array of most overdue numbers\r\n */\r\nexport function getOverdueNumbers(draws, maxNumber = 69) {\r\n  // Track the last seen index for each number\r\n  const lastSeen = Array(maxNumber).fill(-1);\r\n  for (let i = draws.length - 1; i >= 0; i--) {\r\n    const draw = draws[i];\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber && lastSeen[n - 1] === -1) {\r\n          lastSeen[n - 1] = i;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // Numbers with -1 have never been drawn (most overdue)\r\n  const numbered = lastSeen.map((idx, n) => ({ number: n + 1, lastSeen: idx }));\r\n  // Sort by lastSeen ascending (-1 first, then oldest)\r\n  return numbered.slice().sort((a, b) => a.lastSeen - b.lastSeen).map(x => x.number);\r\n}\r\n/**\r\n * Identify hot and cold numbers from draws.\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69)\r\n * @param {number} recentCount - Only consider the most recent N draws (optional)\r\n * @param {number} topN - Number of hot/cold numbers to return (default 5)\r\n * @returns {Object} { hot: [numbers], cold: [numbers] }\r\n */\r\nexport function getHotAndColdNumbers(draws, maxNumber = 69, recentCount = null, topN = 5) {\r\n  const useDraws = recentCount ? draws.slice(-recentCount) : draws;\r\n  const freq = Array(maxNumber).fill(0);\r\n  useDraws.forEach((draw, i) => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber) freq[n - 1]++;\r\n      });\r\n    } else {\r\n      // Debug: log if whiteBalls is missing or not an array\r\n      console.warn(`[getHotAndColdNumbers] Draw at index ${i} missing or invalid whiteBalls:`, draw.whiteBalls);\r\n    }\r\n  });\r\n  // Debug: log frequency array and draws\r\n  console.log('[getHotAndColdNumbers] Frequency array:', freq);\r\n  console.log('[getHotAndColdNumbers] Input draws sample:', useDraws.slice(0, 3));\r\n  // Pair each number with its frequency\r\n  const numbered = freq.map((count, idx) => ({ number: idx + 1, count }));\r\n  // Hot: topN with highest frequency (excluding zeros)\r\n  const hot = numbered\r\n    .filter(x => x.count > 0)\r\n    .sort((a, b) => b.count - a.count)\r\n    .slice(0, topN)\r\n    .map(x => x.number);\r\n  // Cold: topN with lowest frequency, always including zeros first\r\n  const cold = numbered\r\n    .sort((a, b) => a.count - b.count || a.number - b.number)\r\n    .slice(0, topN)\r\n    .map(x => x.number);\r\n  console.log('[getHotAndColdNumbers] Hot:', hot, 'Cold:', cold);\r\n  return { hot, cold };\r\n}\r\n// js/analysis.js\r\n// Core machine learning and statistical analysis logic for lottery analysis\r\n\r\n/**\r\n * Calculate frequency of each number in the draws.\r\n * @param {Array} draws - Array of draw objects with whiteBalls and powerball.\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69 for Powerball)\r\n * @returns {Object} Frequency table for whiteBalls and powerball\r\n */\r\nexport function calculateFrequency(draws, maxNumber = 69) {\r\n  const freq = { whiteBalls: Array(maxNumber).fill(0), powerball: {} };\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber) freq.whiteBalls[n - 1]++;\r\n      });\r\n    }\r\n    if (draw.powerball) {\r\n      freq.powerball[draw.powerball] = (freq.powerball[draw.powerball] || 0) + 1;\r\n    }\r\n  });\r\n  return freq;\r\n}\r\n\r\n/**\r\n * Find most common number pairs (basic pattern mining)\r\n * @param {Array} draws - Array of draw objects\r\n * @returns {Object} Pair frequency table\r\n */\r\nexport function findCommonPairs(draws) {\r\n  const pairCounts = {};\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n      for (let i = 0; i < sorted.length; i++) {\r\n        for (let j = i + 1; j < sorted.length; j++) {\r\n          const key = `${sorted[i]}-${sorted[j]}`;\r\n          pairCounts[key] = (pairCounts[key] || 0) + 1;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return pairCounts;\r\n}\r\n\r\n\r\n/**\r\n * Analyze gaps between consecutive numbers in each draw.\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @returns {Object} Gap frequency table\r\n */\r\nexport function gapAnalysis(draws) {\r\n  const gapCounts = {};\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n      for (let i = 1; i < sorted.length; i++) {\r\n        const gap = sorted[i] - sorted[i - 1];\r\n        gapCounts[gap] = (gapCounts[gap] || 0) + 1;\r\n      }\r\n    }\r\n  });\r\n  return gapCounts;\r\n}\r\n", "/**\r\n * ENHANCED RECOMMENDATIONS ENGINE\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Improved recommendation system with multiple confidence levels and methodologies\r\n */\r\n\r\nimport { getHotAndColdNumbers, getOverdueNumbers } from './analysis.js';\r\n\r\nexport function generateEnhancedRecommendations(energyData, mlPrediction, positionPredictions = null, historicalDraws = []) {\r\n  try {\r\n    const recommendations = {\r\n      highConfidence: [],\r\n      mediumConfidence: [],\r\n      alternativeSelections: [],\r\n      positionBased: [],\r\n      insights: [],\r\n      summary: '',\r\n      confidenceScores: {}\r\n    };\r\n\r\n    // 1. Multi-Method Consensus Approach\r\n    const consensusNumbers = findConsensusNumbers(energyData, mlPrediction, positionPredictions, historicalDraws);\r\n    \r\n    // 2. Confidence Scoring System\r\n    const scoredNumbers = calculateConfidenceScores(energyData, mlPrediction, positionPredictions, historicalDraws);\r\n    \r\n    // 3. Position-Aware Recommendations\r\n    if (positionPredictions) {\r\n      recommendations.positionBased = positionPredictions.map(pred => ({\r\n        position: pred.position,\r\n        number: pred.prediction,\r\n        confidence: pred.confidenceInterval,\r\n        likelihood: calculatePositionLikelihood(pred, historicalDraws)\r\n      }));\r\n    }\r\n\r\n    // 4. Tiered Confidence Levels\r\n    recommendations.highConfidence = scoredNumbers\r\n      .filter(num => num.score >= 0.8)\r\n      .slice(0, 8)\r\n      .map(num => num.number);\r\n\r\n    recommendations.mediumConfidence = scoredNumbers\r\n      .filter(num => num.score >= 0.6 && num.score < 0.8)\r\n      .slice(0, 10)\r\n      .map(num => num.number);\r\n\r\n    // 5. Alternative Selection Strategies\r\n    recommendations.alternativeSelections = generateAlternativeSelections(energyData, mlPrediction, historicalDraws);\r\n\r\n    // 6. Generate Insights\r\n    recommendations.insights = generateRecommendationInsights(energyData, mlPrediction, positionPredictions, historicalDraws);\r\n\r\n    // 7. Enhanced Summary\r\n    recommendations.summary = generateEnhancedSummary(recommendations, historicalDraws.length);\r\n\r\n    return recommendations;\r\n\r\n  } catch (error) {\r\n    console.error('Error generating enhanced recommendations:', error);\r\n    throw new Error(`Failed to generate enhanced recommendations: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Find numbers that appear across multiple prediction methods\r\n */\r\nfunction findConsensusNumbers(energyData, mlPrediction, positionPredictions, historicalDraws) {\r\n  const methodResults = {};\r\n  \r\n  // Energy method top numbers\r\n  const energyNumbers = energyData\r\n    .sort((a, b) => b.energy - a.energy)\r\n    .slice(0, 10)\r\n    .map(item => item.number);\r\n  \r\n  // ML prediction numbers\r\n  const mlNumbers = mlPrediction.whiteBalls || [];\r\n  \r\n  // Position-based numbers\r\n  const positionNumbers = positionPredictions ? \r\n    positionPredictions.map(pred => pred.prediction) : [];\r\n  \r\n  // Frequency analysis\r\n  const { hot } = getHotAndColdNumbers(historicalDraws);\r\n  const hotNumbers = hot.slice(0, 10);\r\n  \r\n  // Count occurrences across methods\r\n  const numberCounts = {};\r\n  [...energyNumbers, ...mlNumbers, ...positionNumbers, ...hotNumbers].forEach(num => {\r\n    numberCounts[num] = (numberCounts[num] || 0) + 1;\r\n  });\r\n  \r\n  // Return numbers that appear in multiple methods\r\n  return Object.entries(numberCounts)\r\n    .filter(([num, count]) => count >= 2)\r\n    .map(([num, count]) => ({ number: parseInt(num), consensus: count }))\r\n    .sort((a, b) => b.consensus - a.consensus);\r\n}\r\n\r\n/**\r\n * Calculate comprehensive confidence scores for each number\r\n */\r\nfunction calculateConfidenceScores(energyData, mlPrediction, positionPredictions, historicalDraws) {\r\n  const scores = {};\r\n  const allNumbers = new Set();\r\n\r\n  // Collect all candidate numbers\r\n  energyData.forEach(item => allNumbers.add(item.number));\r\n  (mlPrediction.whiteBalls || []).forEach(num => allNumbers.add(num));\r\n  if (positionPredictions) {\r\n    positionPredictions.forEach(pred => allNumbers.add(pred.prediction));\r\n  }\r\n\r\n  // Calculate scores for each number\r\n  Array.from(allNumbers).forEach(number => {\r\n    let score = 0;\r\n    let factors = {};\r\n\r\n    // Energy score (0-0.3)\r\n    const energyItem = energyData.find(item => item.number === number);\r\n    if (energyItem) {\r\n      const energyScore = Math.min(energyItem.energy / 2, 0.3); // Normalize energy\r\n      score += energyScore;\r\n      factors.energy = energyScore;\r\n    }\r\n\r\n    // ML confidence (0-0.3)\r\n    const mlNumbers = mlPrediction.whiteBalls || [];\r\n    const mlIndex = mlNumbers.indexOf(number);\r\n    if (mlIndex >= 0) {\r\n      const mlScore = 0.3 * (1 - mlIndex / 5); // Higher score for earlier positions\r\n      score += mlScore;\r\n      factors.ml = mlScore;\r\n    }\r\n\r\n    // Position likelihood (0-0.2)\r\n    if (positionPredictions) {\r\n      const positionPred = positionPredictions.find(pred => pred.prediction === number);\r\n      if (positionPred) {\r\n        const positionScore = 0.2; // Base score for position prediction\r\n        score += positionScore;\r\n        factors.position = positionScore;\r\n      }\r\n    }\r\n\r\n    // Frequency analysis (0-0.2)\r\n    const { hot } = getHotAndColdNumbers(historicalDraws);\r\n    const hotIndex = hot.indexOf(number);\r\n    if (hotIndex >= 0) {\r\n      const freqScore = 0.2 * (1 - hotIndex / 10);\r\n      score += freqScore;\r\n      factors.frequency = freqScore;\r\n    }\r\n\r\n    scores[number] = { number, score, factors };\r\n  });\r\n\r\n  return Object.values(scores).sort((a, b) => b.score - a.score);\r\n}\r\n\r\n/**\r\n * Calculate likelihood for position-based predictions\r\n */\r\nfunction calculatePositionLikelihood(prediction, historicalDraws) {\r\n  if (!historicalDraws.length) return 0.5;\r\n\r\n  const position = prediction.position;\r\n  const predictedNumber = prediction.prediction;\r\n  \r\n  // Get historical data for this position\r\n  const positionData = historicalDraws.map(draw => {\r\n    const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n    const positionIndex = { ball1: 0, ball2: 1, ball3: 2, ball4: 3, ball5: 4 };\r\n    return position === 'powerball' ? draw.powerball : sorted[positionIndex[position]];\r\n  });\r\n\r\n  // Calculate how often numbers in this range appear in this position\r\n  const numberRange = getPositionRange(predictedNumber);\r\n  const rangeOccurrences = positionData.filter(num => \r\n    num >= numberRange.min && num <= numberRange.max\r\n  ).length;\r\n\r\n  return rangeOccurrences / historicalDraws.length;\r\n}\r\n\r\n/**\r\n * Get typical range for a number based on its value\r\n */\r\nfunction getPositionRange(number) {\r\n  if (number <= 15) return { min: 1, max: 20, position: 'ball1' };\r\n  if (number <= 30) return { min: 10, max: 35, position: 'ball2' };\r\n  if (number <= 45) return { min: 20, max: 50, position: 'ball3' };\r\n  if (number <= 60) return { min: 30, max: 65, position: 'ball4' };\r\n  return { min: 40, max: 69, position: 'ball5' };\r\n}\r\n\r\n/**\r\n * Generate alternative selection strategies\r\n */\r\nfunction generateAlternativeSelections(energyData, mlPrediction, historicalDraws) {\r\n  const alternatives = [];\r\n\r\n  // 1. Balanced Range Strategy\r\n  alternatives.push({\r\n    name: 'Balanced Range Selection',\r\n    numbers: generateBalancedRangeNumbers(historicalDraws),\r\n    description: 'Numbers spread across low, medium, and high ranges'\r\n  });\r\n\r\n  // 2. Hot & Cold Mix Strategy  \r\n  const { hot, cold } = getHotAndColdNumbers(historicalDraws);\r\n  alternatives.push({\r\n    name: 'Hot & Cold Mix',\r\n    numbers: [...hot.slice(0, 3), ...cold.slice(0, 2)],\r\n    description: '3 hot numbers + 2 cold numbers for balance'\r\n  });\r\n\r\n  // 3. Overdue Numbers Strategy\r\n  const overdueNumbers = getOverdueNumbers(historicalDraws);\r\n  alternatives.push({\r\n    name: 'Overdue Numbers',\r\n    numbers: overdueNumbers.slice(0, 5),\r\n    description: 'Numbers that haven\\'t appeared recently'\r\n  });\r\n\r\n  // 4. Pattern-Based Strategy\r\n  alternatives.push({\r\n    name: 'Pattern Avoidance',\r\n    numbers: generatePatternAvoidanceNumbers(historicalDraws),\r\n    description: 'Avoids common patterns like consecutive numbers'\r\n  });\r\n\r\n  return alternatives;\r\n}\r\n\r\n/**\r\n * Generate numbers with balanced range distribution\r\n */\r\nfunction generateBalancedRangeNumbers(historicalDraws) {\r\n  const ranges = [\r\n    { min: 1, max: 14, count: 1 },    // Low\r\n    { min: 15, max: 28, count: 1 },   // Low-Mid  \r\n    { min: 29, max: 42, count: 1 },   // Mid\r\n    { min: 43, max: 56, count: 1 },   // Mid-High\r\n    { min: 57, max: 69, count: 1 }    // High\r\n  ];\r\n\r\n  const numbers = [];\r\n  const { hot } = getHotAndColdNumbers(historicalDraws);\r\n\r\n  ranges.forEach(range => {\r\n    // Find hot numbers in this range\r\n    const rangeHotNumbers = hot.filter(num => num >= range.min && num <= range.max);\r\n    if (rangeHotNumbers.length > 0) {\r\n      numbers.push(rangeHotNumbers[0]);\r\n    } else {\r\n      // Pick a random number from range if no hot numbers\r\n      numbers.push(Math.floor(Math.random() * (range.max - range.min + 1)) + range.min);\r\n    }\r\n  });\r\n\r\n  return numbers;\r\n}\r\n\r\n/**\r\n * Generate numbers avoiding common patterns\r\n */\r\nfunction generatePatternAvoidanceNumbers(historicalDraws) {\r\n  const { hot } = getHotAndColdNumbers(historicalDraws);\r\n  const numbers = [];\r\n  \r\n  // Avoid consecutive numbers, multiples of 5, etc.\r\n  hot.forEach(num => {\r\n    if (numbers.length >= 5) return;\r\n    \r\n    const hasConsecutive = numbers.some(existing => Math.abs(existing - num) === 1);\r\n    const isMultipleOf5 = num % 5 === 0;\r\n    const isInSameDecade = numbers.some(existing => Math.floor(existing / 10) === Math.floor(num / 10));\r\n    \r\n    if (!hasConsecutive && !(isMultipleOf5 && numbers.filter(n => n % 5 === 0).length >= 1) && !isInSameDecade) {\r\n      numbers.push(num);\r\n    }\r\n  });\r\n\r\n  // Fill remaining slots if needed\r\n  while (numbers.length < 5) {\r\n    const candidate = Math.floor(Math.random() * 69) + 1;\r\n    if (!numbers.includes(candidate)) {\r\n      numbers.push(candidate);\r\n    }\r\n  }\r\n\r\n  return numbers.sort((a, b) => a - b);\r\n}\r\n\r\n/**\r\n * Generate insights about the recommendations\r\n */\r\nfunction generateRecommendationInsights(energyData, mlPrediction, positionPredictions, historicalDraws) {\r\n  const insights = [];\r\n\r\n  // Energy analysis insights\r\n  const topEnergy = energyData.sort((a, b) => b.energy - a.energy)[0];\r\n  insights.push(`Highest energy number: ${topEnergy.number} (${topEnergy.energy.toFixed(2)} energy score)`);\r\n\r\n  // ML prediction insights\r\n  const mlNumbers = mlPrediction.whiteBalls || [];\r\n  insights.push(`AI predicts numbers in ranges: ${getNumberRanges(mlNumbers)}`);\r\n\r\n  // Position prediction insights\r\n  if (positionPredictions) {\r\n    const avgConfidenceWidth = positionPredictions.reduce((sum, pred) => {\r\n      const width = pred.confidenceInterval.upper - pred.confidenceInterval.lower;\r\n      return sum + width;\r\n    }, 0) / positionPredictions.length;\r\n    \r\n    insights.push(`Average confidence interval width: \u00B1${(avgConfidenceWidth/2).toFixed(1)} numbers`);\r\n  }\r\n\r\n  // Historical pattern insights\r\n  const { hot, cold } = getHotAndColdNumbers(historicalDraws);\r\n  insights.push(`Current hot streak: ${hot.slice(0, 3).join(', ')}`);\r\n  insights.push(`Due for appearance: ${cold.slice(0, 3).join(', ')}`);\r\n\r\n  return insights;\r\n}\r\n\r\n/**\r\n * Get range description for numbers\r\n */\r\nfunction getNumberRanges(numbers) {\r\n  if (!numbers || numbers.length === 0) return 'No predictions';\r\n  \r\n  const ranges = [];\r\n  if (numbers.some(n => n <= 20)) ranges.push('Low (1-20)');\r\n  if (numbers.some(n => n > 20 && n <= 40)) ranges.push('Mid (21-40)');  \r\n  if (numbers.some(n => n > 40 && n <= 60)) ranges.push('Mid-High (41-60)');\r\n  if (numbers.some(n => n > 60)) ranges.push('High (61-69)');\r\n  \r\n  return ranges.join(', ');\r\n}\r\n\r\n/**\r\n * Generate enhanced summary\r\n */\r\nfunction generateEnhancedSummary(recommendations, drawCount) {\r\n  let summary = `Analyzed ${drawCount} historical draws. `;\r\n  \r\n  const highConfCount = recommendations.highConfidence.length;\r\n  const mediumConfCount = recommendations.mediumConfidence.length;\r\n  \r\n  summary += `Found ${highConfCount} high-confidence numbers`;\r\n  if (highConfCount > 0) {\r\n    summary += ` (${recommendations.highConfidence.slice(0, 3).join(', ')})`;\r\n  }\r\n  \r\n  if (mediumConfCount > 0) {\r\n    summary += ` and ${mediumConfCount} medium-confidence alternatives`;\r\n  }\r\n  \r\n  summary += `. ${recommendations.alternativeSelections.length} alternative strategies available.`;\r\n  \r\n  return summary;\r\n}", "// js/worker-wrapper.js\n// Pub/Sub-based wrapper for ML and Backtest web workers\nimport state from './state.js';\n\nconst workerPaths = {\n  ml: 'dist/ml-worker.bundle.js',\n  backtest: 'dist/backtest-worker.bundle.js',\n  optimization: 'dist/optimization-worker.bundle.js',\n};\n\nconst workers = {};\n\nfunction getWorker(type) {\n  if (!workers[type]) {\n    workers[type] = new Worker(workerPaths[type]);\n    workers[type].onmessage = (e) => {\n      const { type: eventType, data } = e.data;\n      // Publish all worker messages as events\n      state.publish(`${type}:${eventType}`, data);\n    };\n    workers[type].onerror = (err) => {\n      state.publish(`${type}:error`, { message: err.message });\n    };\n  }\n  return workers[type];\n}\n\n// Subscribe to events to send messages to workers\nstate.subscribe('ml:predict', (payload) => {\n  getWorker('ml').postMessage({ type: 'predict', data: payload });\n});\n\nstate.subscribe('backtest:run', (payload) => {\n  getWorker('backtest').postMessage({ type: 'run', data: payload });\n});\n\nstate.subscribe('optimization:start', (payload) => {\n  getWorker('optimization').postMessage({ type: 'optimize', data: payload });\n});\n\nstate.subscribe('optimization:cancel', () => {\n  getWorker('optimization').postMessage({ type: 'cancel' });\n});\n\nstate.subscribe('optimization:status', () => {\n  getWorker('optimization').postMessage({ type: 'status' });\n});\n\nexport default {\n  getWorker,\n};\n", "/**\r\n * OPTIMIZATION UI CONTROLLER\r\n * Handles user interactions and displays for parameter optimization\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n */\r\n\r\nimport state from './state.js';\r\nimport { showNotification, showError, showSuccess, showInfo } from './notifications.js';\r\nimport { createElement, setContent } from './dom-helpers.js';\r\n\r\nlet currentOptimization = null;\r\nlet optimizationProgress = null;\r\n\r\n/**\r\n * Initialize optimization UI and event listeners\r\n */\r\nexport function initOptimizationUI() {\r\n  const optimizeOffsetsBtn = document.getElementById('optimize-offsets');\r\n  const optimizeWeightsBtn = document.getElementById('optimize-weights');  \r\n  const optimizeHybridBtn = document.getElementById('optimize-hybrid');\r\n  const cancelBtn = document.getElementById('cancel-optimization');\r\n\r\n  // Add event listeners\r\n  if (optimizeOffsetsBtn) {\r\n    optimizeOffsetsBtn.addEventListener('click', () => startOptimization('offsets'));\r\n  }\r\n  \r\n  if (optimizeWeightsBtn) {\r\n    optimizeWeightsBtn.addEventListener('click', () => startOptimization('weights'));\r\n  }\r\n  \r\n  if (optimizeHybridBtn) {\r\n    optimizeHybridBtn.addEventListener('click', () => startOptimization('hybrid'));\r\n  }\r\n  \r\n  if (cancelBtn) {\r\n    cancelBtn.addEventListener('click', cancelOptimization);\r\n  }\r\n\r\n  // Subscribe to optimization events\r\n  state.subscribe('optimization:started', handleOptimizationStarted);\r\n  state.subscribe('optimization:progress', handleOptimizationProgress);\r\n  state.subscribe('optimization:complete', handleOptimizationComplete);\r\n  state.subscribe('optimization:cancelled', handleOptimizationCancelled);\r\n  state.subscribe('optimization:error', handleOptimizationError);\r\n\r\n  console.log('[Optimization UI] Initialized successfully');\r\n}\r\n\r\n/**\r\n * Start optimization process\r\n * @param {string} type - Type of optimization ('offsets', 'weights', 'hybrid')\r\n */\r\nfunction startOptimization(type) {\r\n  if (currentOptimization) {\r\n    showError('Optimization Running', 'An optimization is already in progress');\r\n    return;\r\n  }\r\n\r\n  if (!state.draws || state.draws.length < 50) {\r\n    showError('Insufficient Data', 'Please upload a CSV file with at least 50 historical draws');\r\n    return;\r\n  }\r\n\r\n  // Get user settings\r\n  const iterations = parseInt(document.getElementById('optimization-iterations').value) || 100;\r\n  const method = document.getElementById('optimization-method').value || 'random';\r\n\r\n  if (iterations < 10 || iterations > 1000) {\r\n    showError('Invalid Settings', 'Iterations must be between 10 and 1000');\r\n    return;\r\n  }\r\n\r\n  currentOptimization = {\r\n    type: type,\r\n    startTime: Date.now(),\r\n    settings: { iterations, method }\r\n  };\r\n\r\n  // Update UI state\r\n  setOptimizationRunningState(true);\r\n  showOptimizationProgress(`Starting ${type} optimization...`, 0);\r\n\r\n  // Clear previous results\r\n  const resultsContainer = document.getElementById('optimization-results');\r\n  if (resultsContainer) {\r\n    resultsContainer.innerHTML = '';\r\n  }\r\n\r\n  showInfo('Optimization Started', `${getOptimizationTypeLabel(type)} optimization started with ${iterations} iterations`);\r\n\r\n  // Send optimization request to worker\r\n  state.publish('optimization:start', {\r\n    historicalData: state.draws,\r\n    optimizationType: type,\r\n    searchParams: {\r\n      method: method,\r\n      iterations: iterations,\r\n      crossValidationFolds: 5\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Cancel current optimization\r\n */\r\nfunction cancelOptimization() {\r\n  if (!currentOptimization) {\r\n    return;\r\n  }\r\n\r\n  showInfo('Cancelling', 'Stopping optimization...');\r\n  state.publish('optimization:cancel');\r\n}\r\n\r\n/**\r\n * Handle optimization started event\r\n */\r\nfunction handleOptimizationStarted(data) {\r\n  console.log('[Optimization UI] Optimization started:', data);\r\n  showOptimizationProgress(data.message, 0);\r\n}\r\n\r\n/**\r\n * Handle optimization progress updates\r\n */\r\nfunction handleOptimizationProgress(data) {\r\n  console.log('[Optimization UI] Progress:', data);\r\n  \r\n  if (data.iteration && currentOptimization) {\r\n    const progress = (data.iteration / currentOptimization.settings.iterations) * 100;\r\n    showOptimizationProgress(data.message, progress);\r\n  } else {\r\n    showOptimizationProgress(data.message, null);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle optimization completion\r\n */\r\nfunction handleOptimizationComplete(data) {\r\n  console.log('[Optimization UI] Optimization complete:', data);\r\n  \r\n  const duration = currentOptimization ? (Date.now() - currentOptimization.startTime) / 1000 : 0;\r\n  \r\n  hideOptimizationProgress();\r\n  setOptimizationRunningState(false);\r\n  displayOptimizationResults(data.results, duration);\r\n  \r\n  showSuccess('Optimization Complete', `${getOptimizationTypeLabel(data.results.type)} optimization completed successfully`);\r\n  \r\n  currentOptimization = null;\r\n}\r\n\r\n/**\r\n * Handle optimization cancellation\r\n */\r\nfunction handleOptimizationCancelled(data) {\r\n  console.log('[Optimization UI] Optimization cancelled:', data);\r\n  \r\n  hideOptimizationProgress();\r\n  setOptimizationRunningState(false);\r\n  showInfo('Cancelled', 'Optimization was cancelled');\r\n  \r\n  currentOptimization = null;\r\n}\r\n\r\n/**\r\n * Handle optimization errors\r\n */\r\nfunction handleOptimizationError(data) {\r\n  console.error('[Optimization UI] Optimization error:', data);\r\n  \r\n  hideOptimizationProgress();\r\n  setOptimizationRunningState(false);\r\n  showError('Optimization Failed', data.message || 'An unknown error occurred');\r\n  \r\n  currentOptimization = null;\r\n}\r\n\r\n/**\r\n * Set UI state for optimization running/stopped\r\n */\r\nfunction setOptimizationRunningState(running) {\r\n  const optimizationBtns = document.querySelectorAll('.optimization-btn');\r\n  const cancelBtn = document.getElementById('cancel-optimization');\r\n  \r\n  optimizationBtns.forEach(btn => {\r\n    btn.disabled = running;\r\n  });\r\n  \r\n  if (cancelBtn) {\r\n    cancelBtn.style.display = running ? 'inline-block' : 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Show optimization progress\r\n */\r\nfunction showOptimizationProgress(message, progress = null) {\r\n  const progressContainer = document.getElementById('optimization-progress');\r\n  if (!progressContainer) return;\r\n\r\n  progressContainer.style.display = 'block';\r\n  \r\n  let progressBarHtml = '';\r\n  if (progress !== null) {\r\n    progressBarHtml = `\r\n      <div class=\"progress-bar\">\r\n        <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  progressContainer.innerHTML = `\r\n    <div class=\"progress-text\">${message}</div>\r\n    ${progressBarHtml}\r\n    <div class=\"progress-details\">\r\n      ${progress !== null ? `Progress: ${progress.toFixed(1)}%` : 'Processing...'}\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Hide optimization progress\r\n */\r\nfunction hideOptimizationProgress() {\r\n  const progressContainer = document.getElementById('optimization-progress');\r\n  if (progressContainer) {\r\n    progressContainer.style.display = 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Display optimization results\r\n */\r\nfunction displayOptimizationResults(results, duration) {\r\n  const resultsContainer = document.getElementById('optimization-results');\r\n  if (!resultsContainer) return;\r\n\r\n  const { bestParams, bestPerformance, improvement, type } = results;\r\n\r\n  // Create results summary\r\n  const summaryHtml = `\r\n    <div class=\"optimization-summary\">\r\n      <h3>\u2705 ${getOptimizationTypeLabel(type)} Optimization Complete</h3>\r\n      <p><strong>Duration:</strong> ${duration.toFixed(1)} seconds</p>\r\n      <p><strong>Best Hit Rate:</strong> ${(bestPerformance.hitRate * 100).toFixed(2)}%</p>\r\n      <p><strong>Average Matches:</strong> ${bestPerformance.averageMatches.toFixed(2)}</p>\r\n      ${improvement.hitRateImprovement > 0 ? \r\n        `<span class=\"improvement-indicator improvement-positive\">\r\n          +${improvement.hitRateImprovement.toFixed(1)}% improvement\r\n        </span>` : \r\n        `<span class=\"improvement-indicator improvement-negative\">\r\n          ${improvement.hitRateImprovement.toFixed(1)}% change\r\n        </span>`\r\n      }\r\n    </div>\r\n  `;\r\n\r\n  // Create performance metrics grid\r\n  const metricsHtml = `\r\n    <div class=\"results-grid\">\r\n      <div class=\"result-card\">\r\n        <div class=\"result-value\">${(bestPerformance.hitRate * 100).toFixed(1)}%</div>\r\n        <div class=\"result-label\">Hit Rate</div>\r\n      </div>\r\n      <div class=\"result-card\">\r\n        <div class=\"result-value\">${bestPerformance.averageMatches.toFixed(2)}</div>\r\n        <div class=\"result-label\">Avg Matches</div>\r\n      </div>\r\n      <div class=\"result-card\">\r\n        <div class=\"result-value\">${bestPerformance.maxMatches}</div>\r\n        <div class=\"result-label\">Max Matches</div>\r\n      </div>\r\n      <div class=\"result-card\">\r\n        <div class=\"result-value\">${(bestPerformance.consistency * 100).toFixed(1)}%</div>\r\n        <div class=\"result-label\">Consistency</div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  // Create parameter display\r\n  let parametersHtml = '<h4>Optimized Parameters:</h4>';\r\n  \r\n  if (bestParams.offsets) {\r\n    parametersHtml += `\r\n      <div class=\"parameter-display\">\r\n        <strong>ML Offsets:</strong> [${bestParams.offsets.join(', ')}]\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  if (bestParams.weights) {\r\n    parametersHtml += `\r\n      <div class=\"parameter-display\">\r\n        <strong>Energy Weights:</strong><br>\r\n        Prime: ${bestParams.weights.prime.toFixed(3)}<br>\r\n        Digital Root: ${bestParams.weights.digitalRoot.toFixed(3)}<br>\r\n        Mod5: ${bestParams.weights.mod5.toFixed(3)}<br>\r\n        Grid Position: ${bestParams.weights.gridPosition.toFixed(3)}\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // Add apply button\r\n  const applyButton = `\r\n    <button id=\"apply-optimized-params\" class=\"optimization-btn\" style=\"margin-top: 1rem;\">\r\n      Apply Optimized Parameters\r\n    </button>\r\n  `;\r\n\r\n  resultsContainer.innerHTML = summaryHtml + metricsHtml + parametersHtml + applyButton;\r\n\r\n  // Add event listener for apply button\r\n  const applyBtn = document.getElementById('apply-optimized-params');\r\n  if (applyBtn) {\r\n    applyBtn.addEventListener('click', () => {\r\n      applyOptimizedParameters(bestParams);\r\n      showSuccess('Parameters Applied', 'Optimized parameters have been applied to the prediction models');\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Apply optimized parameters to the models\r\n */\r\nfunction applyOptimizedParameters(params) {\r\n  // Update ML model with optimized offsets\r\n  if (params.offsets) {\r\n    state.publish('ml:setOffsets', params.offsets);\r\n  }\r\n  \r\n  // Update energy calculation with optimized weights\r\n  if (params.weights) {\r\n    state.publish('energy:setWeights', params.weights);\r\n  }\r\n  \r\n  console.log('[Optimization UI] Applied optimized parameters:', params);\r\n}\r\n\r\n/**\r\n * Get human-readable label for optimization type\r\n */\r\nfunction getOptimizationTypeLabel(type) {\r\n  switch (type) {\r\n    case 'offsets': return 'ML Offset';\r\n    case 'weights': return 'Energy Weight';\r\n    case 'hybrid': return 'Hybrid';\r\n    default: return 'Unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Get optimization status\r\n */\r\nexport function getOptimizationStatus() {\r\n  return {\r\n    isRunning: currentOptimization !== null,\r\n    currentType: currentOptimization?.type || null,\r\n    startTime: currentOptimization?.startTime || null,\r\n    settings: currentOptimization?.settings || null\r\n  };\r\n}\r\n\r\nexport default {\r\n  initOptimizationUI,\r\n  getOptimizationStatus\r\n};", "/**\r\n * CONFIDENCE INTERVAL UI CONTROLLER\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Manages the user interface for position-based confidence interval predictions\r\n */\r\n\r\nimport state from './state.js';\r\nimport { PositionBasedPredictor } from './confidence-predictor.js';\r\nimport { showError, showSuccess, showInfo } from './notifications.js';\r\n\r\nlet currentPredictor = null;\r\nlet isGeneratingPrediction = false;\r\n\r\n/**\r\n * Initialize confidence interval UI\r\n */\r\nexport function initConfidenceUI() {\r\n  const generateBtn = document.getElementById('generate-confidence-prediction');\r\n  \r\n  if (generateBtn) {\r\n    generateBtn.addEventListener('click', generateConfidencePrediction);\r\n  }\r\n  \r\n  // Subscribe to state changes\r\n  state.subscribe('drawsUpdated', (draws) => {\r\n    if (draws && draws.length > 0) {\r\n      currentPredictor = new PositionBasedPredictor(draws);\r\n      updateDataQualityDisplay(currentPredictor.getSystemStats());\r\n    }\r\n  });\r\n  \r\n  console.log('[Confidence UI] Initialized successfully');\r\n}\r\n\r\n/**\r\n * Generate confidence interval prediction\r\n */\r\nasync function generateConfidencePrediction() {\r\n  if (isGeneratingPrediction) return;\r\n  \r\n  if (!state.draws || state.draws.length === 0) {\r\n    showError('No Data', 'Please upload a CSV file with lottery data first');\r\n    return;\r\n  }\r\n  \r\n  if (state.draws.length < 20) {\r\n    showError('Insufficient Data', 'At least 20 historical draws are required for confidence intervals');\r\n    return;\r\n  }\r\n  \r\n  const confidenceLevel = parseFloat(document.getElementById('confidence-level').value);\r\n  const method = document.getElementById('confidence-method').value;\r\n  \r\n  isGeneratingPrediction = true;\r\n  setGeneratingState(true);\r\n  \r\n  try {\r\n    showInfo('Generating Prediction', `Calculating ${(confidenceLevel * 100)}% confidence intervals using ${method} method`);\r\n    \r\n    // Ensure we have a current predictor\r\n    if (!currentPredictor) {\r\n      currentPredictor = new PositionBasedPredictor(state.draws);\r\n    }\r\n    \r\n    const predictions = await currentPredictor.generatePredictionWithConfidenceIntervals({\r\n      confidenceLevel,\r\n      method,\r\n      includeCorrelations: true\r\n    });\r\n    \r\n    displayConfidencePredictions(predictions, confidenceLevel, method);\r\n    displaySystemStatistics(currentPredictor.getSystemStats());\r\n    \r\n    showSuccess('Prediction Complete', `Generated position-based predictions with ${(confidenceLevel * 100)}% confidence intervals`);\r\n    \r\n  } catch (error) {\r\n    console.error('Confidence prediction failed:', error);\r\n    showError('Prediction Failed', error.message || 'An error occurred while generating confidence intervals');\r\n  } finally {\r\n    isGeneratingPrediction = false;\r\n    setGeneratingState(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Set the generating state UI\r\n */\r\nfunction setGeneratingState(generating) {\r\n  const generateBtn = document.getElementById('generate-confidence-prediction');\r\n  \r\n  if (generateBtn) {\r\n    generateBtn.disabled = generating;\r\n    generateBtn.textContent = generating ? 'Generating...' : 'Generate Prediction';\r\n  }\r\n}\r\n\r\n/**\r\n * Display confidence interval predictions in the UI\r\n */\r\nfunction displayConfidencePredictions(predictions, confidenceLevel, method) {\r\n  const resultsContainer = document.getElementById('confidence-results');\r\n  if (!resultsContainer) return;\r\n  \r\n  // Clear previous results\r\n  while (resultsContainer.firstChild) {\r\n    resultsContainer.removeChild(resultsContainer.firstChild);\r\n  }\r\n  \r\n  predictions.forEach((pred, index) => {\r\n    const ballDiv = document.createElement('div');\r\n    ballDiv.className = `confidence-ball ${pred.position}${pred.constraintAdjusted ? ' constraint-adjusted' : ''}`;\r\n    \r\n    const positionLabel = getPositionLabel(pred.position, index);\r\n    const range = pred.confidenceInterval.upper - pred.confidenceInterval.lower;\r\n    const rangeWidth = Math.min(100, (range / 10) * 100); // Scale for visualization\r\n    \r\n    ballDiv.innerHTML = `\r\n      <div class=\"position-label\">${positionLabel}</div>\r\n      <div class=\"ball-prediction\">\r\n        <div class=\"main-number\">${pred.prediction}</div>\r\n        <div class=\"confidence-range\">${pred.confidenceInterval.display.range}</div>\r\n        <div class=\"confidence-level\">${(confidenceLevel * 100)}% confident</div>\r\n        <div class=\"method-used\">${capitalizeFirst(method)} method</div>\r\n      </div>\r\n      <div class=\"confidence-visualization\">\r\n        ${createConfidenceVisualization(pred, rangeWidth)}\r\n      </div>\r\n      <div class=\"prediction-details\">\r\n        <small>Mean: ${pred.statistics.mean} | Median: ${pred.statistics.median} | StdDev: ${pred.statistics.std}</small>\r\n      </div>\r\n    `;\r\n    \r\n    resultsContainer.appendChild(ballDiv);\r\n  });\r\n}\r\n\r\n/**\r\n * Create visual representation of confidence intervals\r\n */\r\nfunction createConfidenceVisualization(prediction, rangeWidth) {\r\n  return `\r\n    <div class=\"confidence-bar\">\r\n      <div class=\"range-bar\" style=\"width: ${rangeWidth}%\">\r\n        <div class=\"prediction-point\"></div>\r\n        <div class=\"confidence-area\"></div>\r\n      </div>\r\n      <div class=\"range-labels\">\r\n        <span class=\"lower\">${prediction.confidenceInterval.lower}</span>\r\n        <span class=\"upper\">${prediction.confidenceInterval.upper}</span>\r\n      </div>\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Display system statistics\r\n */\r\nfunction displaySystemStatistics(systemStats) {\r\n  const statsContainer = document.getElementById('confidence-stats');\r\n  if (!statsContainer) return;\r\n  \r\n  // Clear previous stats\r\n  while (statsContainer.firstChild) {\r\n    statsContainer.removeChild(statsContainer.firstChild);\r\n  }\r\n  \r\n  const statsHeader = document.createElement('h3');\r\n  statsHeader.textContent = '\uD83D\uDCCA Statistical Summary';\r\n  statsContainer.appendChild(statsHeader);\r\n  \r\n  // Data quality indicator\r\n  const qualityDiv = document.createElement('div');\r\n  qualityDiv.className = systemStats.dataQuality.sufficient ? 'data-quality-good' : 'data-quality-warning';\r\n  qualityDiv.innerHTML = `\r\n    <strong>Data Quality:</strong> ${systemStats.dataQuality.recommendation}\r\n    <br><small>Analysis based on ${systemStats.totalDraws} historical draws</small>\r\n  `;\r\n  statsContainer.appendChild(qualityDiv);\r\n  \r\n  // Position statistics grid\r\n  const statsGrid = document.createElement('div');\r\n  statsGrid.className = 'stats-grid';\r\n  \r\n  Object.entries(systemStats.positionStats).forEach(([position, stats]) => {\r\n    const statCard = document.createElement('div');\r\n    statCard.className = 'stat-card';\r\n    \r\n    const positionName = getPositionLabel(position);\r\n    \r\n    statCard.innerHTML = `\r\n      <div class=\"stat-value\">${stats.mean}</div>\r\n      <div class=\"stat-label\">${positionName} Average</div>\r\n      <div style=\"margin-top: 0.5rem; font-size: 0.8rem; color: #95a5a6;\">\r\n        Range: ${stats.range}<br>\r\n        StdDev: ${stats.std}\r\n      </div>\r\n    `;\r\n    \r\n    statsGrid.appendChild(statCard);\r\n  });\r\n  \r\n  statsContainer.appendChild(statsGrid);\r\n}\r\n\r\n/**\r\n * Update data quality display when new data is loaded\r\n */\r\nfunction updateDataQualityDisplay(systemStats) {\r\n  const statsContainer = document.getElementById('confidence-stats');\r\n  if (!statsContainer) return;\r\n  \r\n  // Show basic data info even before generating predictions\r\n  if (statsContainer.children.length === 0) {\r\n    const infoDiv = document.createElement('div');\r\n    infoDiv.className = systemStats.dataQuality.sufficient ? 'data-quality-good' : 'data-quality-warning';\r\n    infoDiv.innerHTML = `\r\n      <strong>Data Loaded:</strong> ${systemStats.totalDraws} historical draws available\r\n      <br><small>${systemStats.dataQuality.recommendation}</small>\r\n    `;\r\n    statsContainer.appendChild(infoDiv);\r\n  }\r\n}\r\n\r\n/**\r\n * Get human-readable position label\r\n */\r\nfunction getPositionLabel(position, index = null) {\r\n  const labels = {\r\n    ball1: 'Ball 1 (Lowest)',\r\n    ball2: 'Ball 2',\r\n    ball3: 'Ball 3 (Middle)', \r\n    ball4: 'Ball 4',\r\n    ball5: 'Ball 5 (Highest)',\r\n    powerball: 'Powerball'\r\n  };\r\n  \r\n  return labels[position] || `Ball ${index + 1}`;\r\n}\r\n\r\n/**\r\n * Capitalize first letter of string\r\n */\r\nfunction capitalizeFirst(str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n/**\r\n * Export selected prediction for use in other systems\r\n */\r\nexport function exportConfidencePrediction() {\r\n  const predictions = getCurrentPredictions();\r\n  \r\n  if (!predictions || predictions.length === 0) {\r\n    showError('No Predictions', 'Generate a prediction first before exporting');\r\n    return;\r\n  }\r\n  \r\n  const exportData = {\r\n    timestamp: new Date().toISOString(),\r\n    predictions,\r\n    method: document.getElementById('confidence-method').value,\r\n    confidenceLevel: parseFloat(document.getElementById('confidence-level').value),\r\n    dataQuality: currentPredictor?.getSystemStats()?.dataQuality\r\n  };\r\n  \r\n  // Create downloadable JSON\r\n  const blob = new Blob([JSON.stringify(exportData, null, 2)], {\r\n    type: 'application/json'\r\n  });\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `confidence-prediction-${new Date().toISOString().slice(0, 10)}.json`;\r\n  a.click();\r\n  \r\n  URL.revokeObjectURL(url);\r\n  showSuccess('Export Complete', 'Confidence prediction exported successfully');\r\n}\r\n\r\n/**\r\n * Get current predictions from the UI (for integration with other systems)\r\n */\r\nfunction getCurrentPredictions() {\r\n  const results = document.getElementById('confidence-results');\r\n  if (!results || !results.children.length) return null;\r\n  \r\n  const predictions = [];\r\n  Array.from(results.children).forEach((ballDiv, index) => {\r\n    const mainNumber = ballDiv.querySelector('.main-number')?.textContent;\r\n    const confidenceRange = ballDiv.querySelector('.confidence-range')?.textContent;\r\n    const position = ballDiv.classList.contains('powerball') ? 'powerball' : `ball${index + 1}`;\r\n    \r\n    if (mainNumber) {\r\n      predictions.push({\r\n        position,\r\n        prediction: parseInt(mainNumber),\r\n        confidenceRange,\r\n        constraintAdjusted: ballDiv.classList.contains('constraint-adjusted')\r\n      });\r\n    }\r\n  });\r\n  \r\n  return predictions;\r\n}\r\n\r\n// Export functions for external use\r\nexport { getCurrentPredictions };\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.initConfidenceUI = initConfidenceUI;\r\n  window.exportConfidencePrediction = exportConfidencePrediction;\r\n}", "/**\r\n * PREDICTION ACCURACY TESTING FRAMEWORK\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Comprehensive system for testing and comparing prediction accuracy\r\n * across different methods using proper statistical validation\r\n */\r\n\r\nimport { PositionBasedPredictor } from './confidence-predictor.js';\r\nimport { OptimizationEngine } from './optimization-engine.js';\r\nimport { calculateEnergy } from './utils.js';\r\n\r\n/**\r\n * Core accuracy testing engine for lottery predictions\r\n */\r\nexport class PredictionAccuracyTester {\r\n  constructor(historicalData) {\r\n    this.historicalData = historicalData.filter(draw => \r\n      draw.whiteBalls && draw.whiteBalls.length === 5 && draw.powerball\r\n    );\r\n    this.strategies = new Map();\r\n    this.results = new Map();\r\n    this.isRunning = false;\r\n  }\r\n\r\n  /**\r\n   * Register a prediction strategy for testing\r\n   */\r\n  addStrategy(name, predictor, config = {}) {\r\n    this.strategies.set(name, {\r\n      predictor,\r\n      config,\r\n      results: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive accuracy test using time-series cross-validation\r\n   */\r\n  async runAccuracyTest(options = {}) {\r\n    const {\r\n      testMethod = 'walk-forward',\r\n      initialTraining = 200,\r\n      testWindow = 50,\r\n      stepSize = 10,\r\n      minTraining = 100,\r\n      metrics = ['matches', 'consistency', 'prize-tiers', 'confidence-accuracy']\r\n    } = options;\r\n\r\n    if (this.isRunning) {\r\n      throw new Error('Accuracy test is already running');\r\n    }\r\n\r\n    if (this.historicalData.length < initialTraining + testWindow) {\r\n      throw new Error(`Insufficient data. Need at least ${initialTraining + testWindow} draws`);\r\n    }\r\n\r\n    this.isRunning = true;\r\n    const results = new Map();\r\n\r\n    try {\r\n      console.log(`Starting accuracy test with ${this.strategies.size} strategies`);\r\n      \r\n      for (const [strategyName, strategy] of this.strategies) {\r\n        console.log(`Testing strategy: ${strategyName}`);\r\n        \r\n        const strategyResults = await this.testStrategy(\r\n          strategyName,\r\n          strategy,\r\n          { testMethod, initialTraining, testWindow, stepSize, minTraining, metrics }\r\n        );\r\n        \r\n        results.set(strategyName, strategyResults);\r\n        \r\n        // Emit progress for UI updates\r\n        this.emitProgress(strategyName, strategyResults);\r\n      }\r\n\r\n      const comparison = this.generateComparison(results);\r\n      this.results = results;\r\n      \r\n      return {\r\n        results,\r\n        comparison,\r\n        testConfig: options,\r\n        summary: this.generateSummary(results)\r\n      };\r\n\r\n    } finally {\r\n      this.isRunning = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test a single strategy using walk-forward validation\r\n   */\r\n  async testStrategy(name, strategy, config) {\r\n    const { initialTraining, testWindow, stepSize, minTraining, metrics } = config;\r\n    const predictions = [];\r\n    const validationResults = [];\r\n\r\n    // Walk-forward validation\r\n    let currentStart = 0;\r\n    let testCount = 0;\r\n    \r\n    while (currentStart + initialTraining + testWindow <= this.historicalData.length) {\r\n      const trainingEnd = currentStart + initialTraining;\r\n      const testEnd = trainingEnd + testWindow;\r\n      \r\n      const trainingData = this.historicalData.slice(currentStart, trainingEnd);\r\n      const testData = this.historicalData.slice(trainingEnd, testEnd);\r\n      \r\n      // Generate predictions for test period\r\n      const periodPredictions = await this.generatePredictions(\r\n        name, strategy, trainingData, testData\r\n      );\r\n      \r\n      predictions.push(...periodPredictions);\r\n      \r\n      // Calculate metrics for this period\r\n      const periodMetrics = this.calculateMetrics(periodPredictions, metrics);\r\n      validationResults.push({\r\n        period: testCount,\r\n        trainingSize: trainingData.length,\r\n        testSize: testData.length,\r\n        metrics: periodMetrics,\r\n        predictions: periodPredictions\r\n      });\r\n      \r\n      currentStart += stepSize;\r\n      testCount++;\r\n      \r\n      // Prevent infinite loops\r\n      if (testCount > 100) break;\r\n    }\r\n\r\n    // Aggregate results across all periods\r\n    const aggregatedMetrics = this.aggregateResults(validationResults, metrics);\r\n    \r\n    return {\r\n      strategy: name,\r\n      totalPredictions: predictions.length,\r\n      validationPeriods: validationResults.length,\r\n      predictions,\r\n      validationResults,\r\n      aggregatedMetrics,\r\n      performance: this.calculateOverallPerformance(aggregatedMetrics)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate predictions using a specific strategy\r\n   */\r\n  async generatePredictions(strategyName, strategy, trainingData, testData) {\r\n    const predictions = [];\r\n    \r\n    for (let i = 0; i < testData.length; i++) {\r\n      const actualDraw = testData[i];\r\n      const trainingUpToPoint = [...trainingData, ...testData.slice(0, i)];\r\n      \r\n      try {\r\n        let prediction;\r\n        \r\n        switch (strategy.config.type) {\r\n          case 'confidence':\r\n            prediction = await this.predictWithConfidence(strategy, trainingUpToPoint);\r\n            break;\r\n          case 'optimization':\r\n            prediction = await this.predictWithOptimization(strategy, trainingUpToPoint);\r\n            break;\r\n          case 'energy':\r\n            prediction = await this.predictWithEnergy(strategy, trainingUpToPoint);\r\n            break;\r\n          case 'frequency':\r\n            prediction = await this.predictWithFrequency(strategy, trainingUpToPoint);\r\n            break;\r\n          case 'hybrid':\r\n            prediction = await this.predictWithHybrid(strategy, trainingUpToPoint);\r\n            break;\r\n          default:\r\n            prediction = await strategy.predictor(trainingUpToPoint);\r\n        }\r\n\r\n        const predictionResult = {\r\n          strategy: strategyName,\r\n          predicted: prediction,\r\n          actual: actualDraw,\r\n          matches: this.countMatches(prediction.whiteBalls || prediction.numbers, actualDraw.whiteBalls),\r\n          powerballMatch: (prediction.powerball === actualDraw.powerball),\r\n          confidenceAccuracy: this.assessConfidenceAccuracy(prediction, actualDraw),\r\n          timestamp: actualDraw.date\r\n        };\r\n\r\n        predictions.push(predictionResult);\r\n        \r\n      } catch (error) {\r\n        console.warn(`Prediction failed for ${strategyName}:`, error);\r\n        // Continue with other predictions\r\n      }\r\n    }\r\n    \r\n    return predictions;\r\n  }\r\n\r\n  /**\r\n   * Predict using confidence interval method\r\n   */\r\n  async predictWithConfidence(strategy, trainingData) {\r\n    const predictor = new PositionBasedPredictor(trainingData);\r\n    const confidencePredictions = await predictor.generatePredictionWithConfidenceIntervals(\r\n      strategy.config.options || {}\r\n    );\r\n    \r\n    return {\r\n      whiteBalls: confidencePredictions.slice(0, 5).map(p => p.prediction),\r\n      powerball: confidencePredictions[5].prediction,\r\n      confidence: strategy.config.options?.confidenceLevel || 0.95,\r\n      method: 'confidence-intervals',\r\n      confidenceIntervals: confidencePredictions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict using optimization method\r\n   */\r\n  async predictWithOptimization(strategy, trainingData) {\r\n    const engine = new OptimizationEngine(strategy.config.optimizationType || 'hybrid');\r\n    // This would integrate with the optimization system\r\n    // For now, return a simplified prediction\r\n    return {\r\n      whiteBalls: [7, 19, 31, 42, 58],\r\n      powerball: 12,\r\n      method: 'optimization',\r\n      confidence: 0.75\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict using energy signature method\r\n   */\r\n  async predictWithEnergy(strategy, trainingData) {\r\n    const allNumbers = [...new Set(trainingData.flatMap(d => d.whiteBalls))];\r\n    const weights = strategy.config.weights || {\r\n      prime: 0.3, digitalRoot: 0.2, mod5: 0.2, gridPosition: 0.3\r\n    };\r\n    \r\n    const energyData = calculateEnergy(allNumbers, weights);\r\n    const topEnergy = energyData\r\n      .sort((a, b) => b.energy - a.energy)\r\n      .slice(0, 5)\r\n      .map(item => item.number);\r\n    \r\n    return {\r\n      whiteBalls: topEnergy,\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      method: 'energy-signature',\r\n      confidence: 0.70\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict using frequency analysis\r\n   */\r\n  async predictWithFrequency(strategy, trainingData) {\r\n    const frequency = new Array(70).fill(0);\r\n    trainingData.forEach(draw => {\r\n      draw.whiteBalls.forEach(num => {\r\n        if (num >= 1 && num <= 69) frequency[num]++;\r\n      });\r\n    });\r\n    \r\n    const topFrequent = frequency\r\n      .map((count, number) => ({ number, count }))\r\n      .filter(item => item.number >= 1 && item.number <= 69)\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 5)\r\n      .map(item => item.number);\r\n    \r\n    return {\r\n      whiteBalls: topFrequent,\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      method: 'frequency-analysis',\r\n      confidence: 0.60\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict using hybrid approach\r\n   */\r\n  async predictWithHybrid(strategy, trainingData) {\r\n    const energyPrediction = await this.predictWithEnergy(strategy, trainingData);\r\n    const frequencyPrediction = await this.predictWithFrequency(strategy, trainingData);\r\n    \r\n    // Combine predictions (simple approach)\r\n    const combined = [...energyPrediction.whiteBalls.slice(0, 3), \r\n                     ...frequencyPrediction.whiteBalls.slice(0, 2)];\r\n    \r\n    return {\r\n      whiteBalls: combined,\r\n      powerball: energyPrediction.powerball,\r\n      method: 'hybrid',\r\n      confidence: 0.72\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Count matching numbers between prediction and actual\r\n   */\r\n  countMatches(predicted, actual) {\r\n    if (!predicted || !actual || !Array.isArray(predicted) || !Array.isArray(actual)) {\r\n      return 0;\r\n    }\r\n    \r\n    return predicted.filter(num => actual.includes(num)).length;\r\n  }\r\n\r\n  /**\r\n   * Assess confidence interval accuracy\r\n   */\r\n  assessConfidenceAccuracy(prediction, actual) {\r\n    if (!prediction.confidenceIntervals || !actual.whiteBalls) {\r\n      return null;\r\n    }\r\n    \r\n    let withinIntervalCount = 0;\r\n    const positions = prediction.confidenceIntervals.slice(0, 5);\r\n    const sortedActual = [...actual.whiteBalls].sort((a, b) => a - b);\r\n    \r\n    positions.forEach((pos, index) => {\r\n      const actualValue = sortedActual[index];\r\n      if (actualValue >= pos.confidenceInterval.lower && \r\n          actualValue <= pos.confidenceInterval.upper) {\r\n        withinIntervalCount++;\r\n      }\r\n    });\r\n    \r\n    return {\r\n      withinInterval: withinIntervalCount,\r\n      totalPositions: positions.length,\r\n      accuracy: withinIntervalCount / positions.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate comprehensive metrics for predictions\r\n   */\r\n  calculateMetrics(predictions, requestedMetrics) {\r\n    const metrics = {};\r\n    \r\n    if (requestedMetrics.includes('matches')) {\r\n      metrics.matches = this.calculateMatchMetrics(predictions);\r\n    }\r\n    \r\n    if (requestedMetrics.includes('consistency')) {\r\n      metrics.consistency = this.calculateConsistency(predictions);\r\n    }\r\n    \r\n    if (requestedMetrics.includes('prize-tiers')) {\r\n      metrics.prizeTiers = this.calculatePrizeTiers(predictions);\r\n    }\r\n    \r\n    if (requestedMetrics.includes('confidence-accuracy')) {\r\n      metrics.confidenceAccuracy = this.calculateConfidenceAccuracy(predictions);\r\n    }\r\n    \r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Calculate match-based metrics\r\n   */\r\n  calculateMatchMetrics(predictions) {\r\n    const matches = predictions.map(p => p.matches);\r\n    const powerballMatches = predictions.filter(p => p.powerballMatch).length;\r\n    \r\n    return {\r\n      totalPredictions: predictions.length,\r\n      averageMatches: matches.reduce((sum, m) => sum + m, 0) / matches.length,\r\n      maxMatches: Math.max(...matches),\r\n      minMatches: Math.min(...matches),\r\n      hitRate: matches.filter(m => m >= 3).length / matches.length,\r\n      powerballHitRate: powerballMatches / predictions.length,\r\n      distribution: this.getMatchDistribution(matches)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate consistency metrics\r\n   */\r\n  calculateConsistency(predictions) {\r\n    const matches = predictions.map(p => p.matches);\r\n    const mean = matches.reduce((sum, m) => sum + m, 0) / matches.length;\r\n    const variance = matches.reduce((sum, m) => sum + Math.pow(m - mean, 2), 0) / matches.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    \r\n    return {\r\n      mean,\r\n      variance,\r\n      standardDeviation: stdDev,\r\n      coefficientOfVariation: stdDev / mean,\r\n      consistency: Math.max(0, 1 - (stdDev / mean))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate prize tier metrics\r\n   */\r\n  calculatePrizeTiers(predictions) {\r\n    const tiers = {\r\n      jackpot: 0,      // 5 matches + powerball\r\n      match5: 0,       // 5 matches, no powerball\r\n      match4Plus: 0,   // 4 matches + powerball\r\n      match4: 0,       // 4 matches, no powerball\r\n      match3Plus: 0,   // 3 matches + powerball\r\n      match3: 0,       // 3 matches, no powerball\r\n      match2Plus: 0,   // 2 matches + powerball\r\n      match1Plus: 0    // 1 match + powerball\r\n    };\r\n    \r\n    predictions.forEach(pred => {\r\n      const matches = pred.matches;\r\n      const pbMatch = pred.powerballMatch;\r\n      \r\n      if (matches === 5 && pbMatch) tiers.jackpot++;\r\n      else if (matches === 5) tiers.match5++;\r\n      else if (matches === 4 && pbMatch) tiers.match4Plus++;\r\n      else if (matches === 4) tiers.match4++;\r\n      else if (matches === 3 && pbMatch) tiers.match3Plus++;\r\n      else if (matches === 3) tiers.match3++;\r\n      else if (matches === 2 && pbMatch) tiers.match2Plus++;\r\n      else if (matches === 1 && pbMatch) tiers.match1Plus++;\r\n    });\r\n    \r\n    const totalPredictions = predictions.length;\r\n    const tierRates = {};\r\n    \r\n    Object.entries(tiers).forEach(([tier, count]) => {\r\n      tierRates[tier] = {\r\n        count,\r\n        rate: count / totalPredictions,\r\n        expectedRate: this.getExpectedPrizeTierRate(tier)\r\n      };\r\n    });\r\n    \r\n    return {\r\n      counts: tiers,\r\n      rates: tierRates,\r\n      totalWinningPredictions: Object.values(tiers).reduce((sum, count) => sum + count, 0)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence interval accuracy\r\n   */\r\n  calculateConfidenceAccuracy(predictions) {\r\n    const confidenceResults = predictions\r\n      .map(p => p.confidenceAccuracy)\r\n      .filter(ca => ca !== null);\r\n    \r\n    if (confidenceResults.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    const totalAccuracies = confidenceResults.map(ca => ca.accuracy);\r\n    const averageAccuracy = totalAccuracies.reduce((sum, acc) => sum + acc, 0) / totalAccuracies.length;\r\n    \r\n    return {\r\n      averageAccuracy,\r\n      totalEvaluated: confidenceResults.length,\r\n      withinIntervalTotal: confidenceResults.reduce((sum, ca) => sum + ca.withinInterval, 0),\r\n      expectedAccuracy: 0.95 // Assuming 95% confidence intervals\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get expected prize tier rates (based on official lottery odds)\r\n   */\r\n  getExpectedPrizeTierRate(tier) {\r\n    const odds = {\r\n      jackpot: 1 / 292201338,     // 1 in 292M\r\n      match5: 1 / 11688054,       // 1 in 11.7M\r\n      match4Plus: 1 / 913129,     // 1 in 913k\r\n      match4: 1 / 36525,          // 1 in 36.5k\r\n      match3Plus: 1 / 14494,      // 1 in 14.5k\r\n      match3: 1 / 580,            // 1 in 580\r\n      match2Plus: 1 / 701,        // 1 in 701\r\n      match1Plus: 1 / 92          // 1 in 92\r\n    };\r\n    \r\n    return odds[tier] || 0;\r\n  }\r\n\r\n  /**\r\n   * Get match distribution\r\n   */\r\n  getMatchDistribution(matches) {\r\n    const distribution = {};\r\n    for (let i = 0; i <= 5; i++) {\r\n      distribution[i] = matches.filter(m => m === i).length;\r\n    }\r\n    return distribution;\r\n  }\r\n\r\n  /**\r\n   * Aggregate results across validation periods\r\n   */\r\n  aggregateResults(validationResults, metrics) {\r\n    const aggregated = {};\r\n    \r\n    metrics.forEach(metric => {\r\n      const metricValues = validationResults\r\n        .map(vr => vr.metrics[metric])\r\n        .filter(mv => mv !== undefined);\r\n      \r\n      if (metricValues.length > 0) {\r\n        aggregated[metric] = this.aggregateMetric(metric, metricValues);\r\n      }\r\n    });\r\n    \r\n    return aggregated;\r\n  }\r\n\r\n  /**\r\n   * Aggregate a specific metric across periods\r\n   */\r\n  aggregateMetric(metricName, metricValues) {\r\n    switch (metricName) {\r\n      case 'matches':\r\n        return {\r\n          averageMatches: this.average(metricValues.map(mv => mv.averageMatches)),\r\n          averageHitRate: this.average(metricValues.map(mv => mv.hitRate)),\r\n          totalPredictions: metricValues.reduce((sum, mv) => sum + mv.totalPredictions, 0)\r\n        };\r\n      \r\n      case 'consistency':\r\n        return {\r\n          averageConsistency: this.average(metricValues.map(mv => mv.consistency)),\r\n          averageStdDev: this.average(metricValues.map(mv => mv.standardDeviation))\r\n        };\r\n      \r\n      case 'prize-tiers':\r\n        const aggregatedCounts = {};\r\n        const tierNames = Object.keys(metricValues[0].counts);\r\n        \r\n        tierNames.forEach(tier => {\r\n          aggregatedCounts[tier] = metricValues.reduce((sum, mv) => sum + mv.counts[tier], 0);\r\n        });\r\n        \r\n        return {\r\n          aggregatedCounts,\r\n          totalWins: Object.values(aggregatedCounts).reduce((sum, count) => sum + count, 0)\r\n        };\r\n      \r\n      default:\r\n        return metricValues[0]; // Return first value for unknown metrics\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate overall performance score\r\n   */\r\n  calculateOverallPerformance(aggregatedMetrics) {\r\n    let score = 0;\r\n    let components = 0;\r\n    \r\n    if (aggregatedMetrics.matches) {\r\n      score += aggregatedMetrics.matches.averageMatches * 20; // Weight matches heavily\r\n      score += aggregatedMetrics.matches.averageHitRate * 30; // Weight hit rate heavily\r\n      components += 2;\r\n    }\r\n    \r\n    if (aggregatedMetrics.consistency) {\r\n      score += aggregatedMetrics.consistency.averageConsistency * 25; // Consistency is important\r\n      components += 1;\r\n    }\r\n    \r\n    if (aggregatedMetrics['prize-tiers']) {\r\n      const winRate = aggregatedMetrics['prize-tiers'].totalWins / \r\n                     (aggregatedMetrics.matches?.totalPredictions || 1);\r\n      score += winRate * 25; // Prize wins are valuable\r\n      components += 1;\r\n    }\r\n    \r\n    return components > 0 ? score / components : 0;\r\n  }\r\n\r\n  /**\r\n   * Generate strategy comparison\r\n   */\r\n  generateComparison(results) {\r\n    try {\r\n      if (!results || results.size === 0) {\r\n        throw new Error('No results to compare');\r\n      }\r\n\r\n      const strategies = Array.from(results.entries()).map(([name, result]) => ({\r\n        strategy: name,\r\n        performance: result.performance || 0,\r\n        avgMatches: result.aggregatedMetrics?.matches?.averageMatches || 0,\r\n        hitRate: result.aggregatedMetrics?.matches?.averageHitRate || 0,\r\n        consistency: result.aggregatedMetrics?.consistency?.averageConsistency || 0,\r\n        totalPredictions: result.totalPredictions || 0\r\n      }));\r\n      \r\n      // Sort by performance score\r\n      strategies.sort((a, b) => b.performance - a.performance);\r\n      \r\n      return {\r\n        ranking: strategies,\r\n        bestStrategy: strategies[0],\r\n        statisticalSignificance: this.calculateStatisticalSignificance(results)\r\n      };\r\n    } catch (error) {\r\n      console.error('Error generating comparison:', error);\r\n      throw new Error(`Failed to generate comparison: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate statistical significance of differences\r\n   */\r\n  calculateStatisticalSignificance(results) {\r\n    if (results.size < 2) return null;\r\n    \r\n    const strategiesArray = Array.from(results.values());\r\n    const significance = [];\r\n    \r\n    for (let i = 0; i < strategiesArray.length; i++) {\r\n      for (let j = i + 1; j < strategiesArray.length; j++) {\r\n        const strategyA = strategiesArray[i];\r\n        const strategyB = strategiesArray[j];\r\n        \r\n        // Simple t-test approximation (for demonstration)\r\n        const meanDiff = Math.abs(\r\n          (strategyA.aggregatedMetrics.matches?.averageMatches || 0) -\r\n          (strategyB.aggregatedMetrics.matches?.averageMatches || 0)\r\n        );\r\n        \r\n        significance.push({\r\n          strategies: [strategyA.strategy, strategyB.strategy],\r\n          meanDifference: meanDiff,\r\n          significant: meanDiff > 0.5 // Simple threshold\r\n        });\r\n      }\r\n    }\r\n    \r\n    return significance;\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive summary\r\n   */\r\n  generateSummary(results) {\r\n    const totalStrategies = results.size;\r\n    const totalPredictions = Array.from(results.values())\r\n      .reduce((sum, result) => sum + result.totalPredictions, 0);\r\n    \r\n    const comparison = this.generateComparison(results);\r\n    \r\n    return {\r\n      totalStrategies,\r\n      totalPredictions,\r\n      testDuration: 'Completed',\r\n      bestPerformer: comparison.bestStrategy,\r\n      keyFindings: this.generateKeyFindings(results, comparison, totalPredictions)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate key findings from test results\r\n   */\r\n  generateKeyFindings(results, comparison, totalPredictions) {\r\n    const findings = [];\r\n    \r\n    findings.push(`Best performing strategy: ${comparison.bestStrategy.strategy} (${comparison.bestStrategy.performance.toFixed(2)} score)`);\r\n    \r\n    const avgHitRates = Array.from(results.values())\r\n      .map(r => r.aggregatedMetrics.matches?.averageHitRate || 0);\r\n    const bestHitRate = Math.max(...avgHitRates);\r\n    \r\n    if (bestHitRate > 0.1) {\r\n      findings.push(`Highest hit rate achieved: ${(bestHitRate * 100).toFixed(1)}%`);\r\n    }\r\n    \r\n    findings.push(`Total predictions analyzed: ${totalPredictions}`);\r\n    \r\n    return findings;\r\n  }\r\n\r\n  /**\r\n   * Utility function to calculate average\r\n   */\r\n  average(numbers) {\r\n    return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\r\n  }\r\n\r\n  /**\r\n   * Emit progress for UI updates\r\n   */\r\n  emitProgress(strategyName, results) {\r\n    // This would integrate with the pub/sub system for real-time updates\r\n    if (typeof window !== 'undefined' && window.dispatchEvent) {\r\n      window.dispatchEvent(new CustomEvent('accuracyProgress', {\r\n        detail: { strategy: strategyName, results }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current test status\r\n   */\r\n  getStatus() {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      strategiesRegistered: this.strategies.size,\r\n      hasResults: this.results.size > 0,\r\n      dataSize: this.historicalData.length\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in other modules\r\nexport default PredictionAccuracyTester;\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.PredictionAccuracyTester = PredictionAccuracyTester;\r\n}", "import { applyTemporalWeighting, calculateTemporalFrequency } from './utils.js';\r\n\r\n/**\r\n * MACHINE LEARNING MODULE FOR LOTTERY ANALYSIS\r\n * Version: 2.4.2 | Updated: 2025-08-21 02:45 PM EST\r\n * \r\n * Provides machine learning capabilities for lottery number prediction\r\n * Includes both placeholder implementations and TensorFlow.js integration\r\n * \r\n * @class LotteryML\r\n * @property {string} version - Current module version\r\n * @property {string} status - Current model status\r\n * @property {tf.LayersModel|null} model - Trained TensorFlow.js model\r\n */\r\n\r\nclass LotteryML {\r\n  constructor(tfInstance) {\r\n  this.version = \"2.4.2\";\r\n    this.status = \"initialized\";\r\n    this.model = null;\r\n    this.tf = tfInstance;\r\n    this.isTFLoaded = this.tf && this.tf.ready;\r\n  }\r\n\r\n  /**\r\n   * Train LSTM model on historical draw data\r\n   * @param {Array} draws - Historical draw data with numbers arrays\r\n   * @param {Object} options - Training options\r\n   * @returns {Promise<Object>} Training results with metrics\r\n   */\r\n  async trainLSTM(draws, options = {}) {\r\n    try {\r\n      if (this.tf && !this.tf.ready) {\r\n        await this.tf.ready();\r\n      }\r\n\r\n      if (typeof this.tf === 'undefined') {\r\n        throw new Error('TensorFlow.js not loaded. Please include TensorFlow.js library');\r\n      }\r\n\r\n      if (!draws || draws.length === 0) {\r\n        throw new Error('No draw data provided for training');\r\n      }\r\n\r\n      const {\r\n        epochs = 20,\r\n        validationSplit = 0.2,\r\n        batchSize = 32,\r\n        units = 64\r\n      } = options;\r\n\r\n      console.log(`Training LSTM model on ${draws.length} draws...`);\r\n\r\n      // Create and compile model\r\n      const model = this.tf.sequential();\r\n      model.add(this.tf.layers.lstm({\r\n        units: units,\r\n        inputShape: [50, 1],\r\n        returnSequences: false\r\n      }));\r\n      model.add(this.tf.layers.dense({ units: 1, activation: 'linear' }));\r\n\r\n      model.compile({\r\n        optimizer: this.tf.train.adam(0.001),\r\n        loss: 'meanSquaredError',\r\n        metrics: ['accuracy']\r\n      });\r\n\r\n      // Preprocess data\r\n      const { inputs, labels } = this.preprocessData(draws);\r\n\r\n      if (!inputs) {\r\n        throw new Error(\"Could not create training data from draws. Check data quality.\");\r\n      }\r\n      \r\n      // Train model\r\n      const history = await model.fit(inputs, labels, {\r\n        epochs: epochs,\r\n        validationSplit: validationSplit,\r\n        batchSize: batchSize,\r\n        shuffle: true,\r\n        callbacks: {\r\n          onEpochEnd: (epoch, logs) => {\r\n            console.log(`Epoch ${epoch + 1}/${epochs} - loss: ${logs.loss.toFixed(4)}`);\r\n          }\r\n        }\r\n      });\r\n\r\n      this.model = model;\r\n      this.status = \"trained\";\r\n      \r\n      return {\r\n        success: true,\r\n        epochs: epochs,\r\n        finalLoss: history.history.loss[epochs - 1],\r\n        finalAccuracy: history.history.acc ? history.history.acc[epochs - 1] : null,\r\n        modelSummary: model.summary()\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('LSTM training failed:', error);\r\n      this.status = \"error\";\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        fallback: await this.trainFrequencyModel(draws)\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Train simple frequency-based model (fallback)\r\n   * @param {Array} draws - Historical draw data\r\n   * @returns {Promise<Object>} Training results\r\n   */\r\n  async trainFrequencyModel(draws) {\r\n    console.log('Using frequency-based model as fallback');\r\n    this.status = \"frequency_model\";\r\n    \r\n    return {\r\n      success: true,\r\n      model: 'frequency_based',\r\n      accuracy: 0.65,\r\n      message: 'Using frequency-based prediction model'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Preprocess draw data for LSTM training\r\n   * @param {Array} draws - Raw draw data\r\n   * @returns {Object} Processed inputs and labels\r\n   */\r\n  preprocessData(draws) {\r\n    // Convert numbers to sequences for LSTM input\r\n    const sequences = [];\r\n    const targets = [];\r\n    const sequenceLength = 50;\r\n\r\n    for (let i = 0; i < draws.length - sequenceLength; i++) {\r\n      const sequence = [];\r\n      let skip = false;\r\n      for (let j = 0; j < sequenceLength; j++) {\r\n        // Use average of numbers in each draw as feature\r\n        const draw = draws[i + j];\r\n        if (!draw.whiteBalls || draw.whiteBalls.length === 0) {\r\n          skip = true;\r\n          break;\r\n        }\r\n        const avg = draw.whiteBalls.reduce((sum, num) => sum + num, 0) / draw.whiteBalls.length;\r\n        sequence.push(avg);\r\n      }\r\n\r\n      if (skip) continue;\r\n\r\n      // Target: average of next draw\r\n      const nextDraw = draws[i + sequenceLength];\r\n      if (!nextDraw.whiteBalls || nextDraw.whiteBalls.length === 0) {\r\n        continue;\r\n      }\r\n      targets.push(nextDraw.whiteBalls.reduce((sum, num) => sum + num, 0) / nextDraw.whiteBalls.length);\r\n      sequences.push(sequence); // Only push sequence if target is valid\r\n    }\r\n\r\n    if (sequences.length === 0) {\r\n      return { inputs: null, labels: null };\r\n    }\r\n\r\n    return {\r\n      inputs: this.tf.tensor3d(sequences.map(seq => seq.map(val => [val]))),\r\n      labels: this.tf.tensor2d(targets.map(val => [val]))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict next lottery numbers using available model\r\n   * @param {Array} draws - Historical draw data for context\r\n   * @returns {Promise<Object>} Prediction results\r\n   */\r\n  async predictNextNumbers(draws, decayRate = 0.1) {\r\n    try {\r\n      if (this.model && this.status === 'trained') {\r\n        // The LSTM prediction itself doesn't directly use decayRate in its current form,\r\n        // but the input data can be weighted.\r\n        const weightedDraws = applyTemporalWeighting(draws, decayRate);\r\n        return await this.predictWithLSTM(weightedDraws);\r\n      } else {\r\n        // If model isn't trained, use the temporal frequency analysis\r\n        return await this.predictWithTemporalFrequency(draws, decayRate);\r\n      }\r\n    } catch (error) {\r\n      console.error('Prediction failed:', error);\r\n      return this.getFallbackPrediction();\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Predict using LSTM model\r\n   * @param {Array} draws - Historical data\r\n   * @returns {Object} LSTM prediction results\r\n   */\r\n  async predictWithLSTM(draws) {\r\n    const recentDraws = draws.slice(-50);\r\n    const { inputs } = this.preprocessData([...recentDraws, ...recentDraws]); // Pad for sequence\r\n    const prediction = this.model.predict(inputs);\r\n    const predictedValue = prediction.dataSync()[0];\r\n    \r\n    // Convert back to discrete numbers using current offsets (optimized or default)\r\n    const numbers = this.valueToNumbers(predictedValue, this.getCurrentOffsets());\r\n    \r\n    return {\r\n      whiteBalls: numbers.slice(0, 5), // Take only 5 for whiteball prediction\r\n      numbers,\r\n      confidence: 0.82,\r\n      model: 'lstm',\r\n      method: 'neural_network',\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      offsets: this.getCurrentOffsets() // Include offsets in response for transparency\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict using frequency analysis\r\n   * @param {Array} draws - Historical data\r\n   * @returns {Object} Frequency-based prediction\r\n   */\r\n  async predictWithFrequency(draws) {\r\n    const frequencyMap = this.calculateFrequency(draws);\r\n    const predictedNumbers = this.getFrequencyBasedPrediction(frequencyMap);\r\n    \r\n    return {\r\n      whiteBalls: predictedNumbers,\r\n      numbers: predictedNumbers,\r\n      confidence: 0.76,\r\n      model: 'frequency_heuristic',\r\n      method: 'statistical_analysis'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate number frequency from historical draws\r\n   * @param {Array} draws - Draw history\r\n   * @returns {Array} Frequency counts for numbers 1-69\r\n   */\r\n  calculateFrequency(draws) {\r\n    const frequency = new Array(70).fill(0);\r\n    draws.forEach(draw => {\r\n      // Support both 'numbers' and 'whiteBalls' for backward compatibility\r\n      const nums = draw.numbers || draw.whiteBalls;\r\n      if (Array.isArray(nums)) {\r\n        nums.forEach(num => {\r\n          if (num >= 1 && num <= 69) {\r\n            frequency[num]++;\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return frequency;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Enhanced frequency analysis with temporal weighting\r\n   * @param {Array} draws - Historical draw data\r\n   * @param {number} decayRate - Temporal decay rate\r\n   * @returns {Object} Temporal-weighted prediction\r\n   */\r\n  async predictWithTemporalFrequency(draws, decayRate = 0.1) {\r\n    try {\r\n      const weightedDraws = applyTemporalWeighting(draws, decayRate);\r\n      const temporalFrequency = calculateTemporalFrequency(weightedDraws);\r\n      const predictedNumbers = temporalFrequency\r\n        .map((weightedCount, number) => ({ number, weightedCount }))\r\n        .filter(item => item.number >= 1 && item.number <= 69)\r\n        .sort((a, b) => b.weightedCount - a.weightedCount)\r\n        .slice(0, 10)\r\n        .map(item => item.number);\r\n      return {\r\n        whiteBalls: predictedNumbers,\r\n        numbers: predictedNumbers,\r\n        confidence: Math.min(0.82, 0.65 + (weightedDraws.length > 100 ? 0.17 : 0)),\r\n        model: 'temporal_frequency',\r\n        powerball: Math.floor(Math.random() * 26) + 1\r\n      };\r\n    } catch (error) {\r\n      console.error('Temporal frequency prediction failed:', error);\r\n      return this.getFallbackPrediction();\r\n    }\r\n  }\r\n\r\n   /**\r\n    * Get prediction based on frequency analysis\r\n    * @param {Array} frequencyMap - Frequency counts\r\n   * @returns {Array} Predicted numbers\r\n   */\r\n  getFrequencyBasedPrediction(frequencyMap) {\r\n    return frequencyMap\r\n      .map((count, number) => ({ number, count }))\r\n      .filter(item => item.number >= 1 && item.number <= 69)\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10)\r\n      .map(item => item.number)\r\n      .sort((a, b) => a - b);\r\n  }\r\n\r\n  /**\r\n   * Fallback prediction when all else fails\r\n   * @returns {Object} Basic prediction\r\n   */\r\n  getFallbackPrediction() {\r\n    // Common lottery numbers as fallback\r\n    const commonNumbers = [7, 19, 23, 31, 42, 56, 11, 15, 44, 58];\r\n    \r\n    return {\r\n      whiteBalls: commonNumbers,\r\n      numbers: commonNumbers,\r\n      confidence: 0.5,\r\n      model: 'fallback',\r\n      method: 'common_patterns',\r\n      warning: 'Using fallback prediction - consider training model',\r\n      powerball: Math.floor(Math.random() * 26) + 1\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert predicted value to discrete numbers\r\n   * @param {number} value - Predicted continuous value\r\n   * @param {Array} customOffsets - Custom offset array (optional)\r\n   * @returns {Array} Discrete lottery numbers\r\n   */\r\n  valueToNumbers(value, customOffsets = null) {\r\n    const base = Math.round(value);\r\n    \r\n    // Use custom offsets if provided, otherwise use default heuristic\r\n    const offsets = customOffsets || [0, 7, 13, 19, 23, 11, 17, 29, 5, 37];\r\n    \r\n    const numbers = offsets.map(offset => {\r\n      const num = (base + offset) % 69 + 1;\r\n      return Math.max(1, Math.min(69, num));\r\n    });\r\n    \r\n    // Remove duplicates and return up to 10 numbers\r\n    return [...new Set(numbers)].slice(0, 10);\r\n  }\r\n\r\n  /**\r\n   * Set optimized offsets for future predictions\r\n   * @param {Array} offsets - Optimized offset array\r\n   */\r\n  setOptimizedOffsets(offsets) {\r\n    this.optimizedOffsets = offsets;\r\n    console.log('ML model updated with optimized offsets:', offsets);\r\n  }\r\n\r\n  /**\r\n   * Get current offsets (optimized or default)\r\n   * @returns {Array} Current offset array\r\n   */\r\n  getCurrentOffsets() {\r\n    return this.optimizedOffsets || [0, 7, 13, 19, 23, 11, 17, 29, 5, 37];\r\n  }\r\n\r\n  /**\r\n   * Get module status and information\r\n   * @returns {Object} Status information\r\n   */\r\n  getStatus() {\r\n    return {\r\n      version: this.version,\r\n      status: this.status,\r\n      hasTensorFlow: this.isTFLoaded,\r\n      modelType: this.model ? 'lstm' : 'frequency',\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reset model to initial state\r\n   */\r\n  reset() {\r\n    if (this.model) {\r\n      this.model.dispose();\r\n    }\r\n    this.model = null;\r\n    this.status = \"initialized\";\r\n  }\r\n}\r\n\r\n// Only initialize if we're in the main thread (window exists)\r\n// Web workers don't have access to window object\r\nif (typeof window !== 'undefined') {\r\n  try {\r\n    window.lotteryML = new LotteryML();\r\n    console.log('LotteryML module initialized successfully');\r\n  } catch (error) {\r\n    console.error('Failed to initialize LotteryML:', error);\r\n    // Fallback to basic object if class fails\r\n    window.lotteryML = {\r\n      predictNextNumbers: async () => ({\r\n        numbers: [7, 19, 23, 31, 42, 56, 11, 15, 44, 58],\r\n        confidence: 0.5,\r\n        model: 'fallback',\r\n        warning: 'ML module initialization failed'\r\n      }),\r\n      getStatus: () => ({ status: 'error', message: 'Initialization failed' })\r\n    };\r\n  }\r\n\r\n} else if (typeof self !== 'undefined') {\r\n  // In worker context, export the class for importScripts\r\n  \r\n}\r\n\r\nexport default LotteryML;", "/**\r\n * PARAMETER OPTIMIZATION ENGINE\r\n * Systematic optimization of ML offsets and energy weights using data-driven methods\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n */\r\n\r\nimport { calculateEnergy } from './utils.js';\r\nimport LotteryML from './ml.js';\r\n\r\n/**\r\n * Core optimization engine for parameter tuning\r\n */\r\nexport class OptimizationEngine {\r\n  constructor(type = 'hybrid') {\r\n    this.type = type; // 'offsets', 'weights', 'hybrid'\r\n    this.results = [];\r\n    this.bestParams = null;\r\n    this.isRunning = false;\r\n  }\r\n\r\n  /**\r\n   * Main optimization entry point\r\n   * @param {Array} historicalData - Historical draw data\r\n   * @param {Object} searchParams - Search configuration\r\n   * @returns {Promise<Object>} Optimization results\r\n   */\r\n  async optimize(historicalData, searchParams = {}) {\r\n    if (this.isRunning) {\r\n      throw new Error('Optimization already in progress');\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.results = [];\r\n    \r\n    try {\r\n      const config = {\r\n        method: searchParams.method || 'random',\r\n        iterations: searchParams.iterations || 100,\r\n        crossValidationFolds: searchParams.crossValidationFolds || 5,\r\n        testSize: searchParams.testSize || 0.2,\r\n        ...searchParams\r\n      };\r\n\r\n      console.log(`Starting ${this.type} optimization with ${config.method} search...`);\r\n      \r\n      // Create cross-validation splits\r\n      const cvSplits = this.createCrossValidationSplits(historicalData, config.crossValidationFolds);\r\n      \r\n      // Run optimization based on type\r\n      let optimizationResults;\r\n      switch (this.type) {\r\n        case 'offsets':\r\n          optimizationResults = await this.optimizeOffsets(cvSplits, config);\r\n          break;\r\n        case 'weights':\r\n          optimizationResults = await this.optimizeWeights(cvSplits, config);\r\n          break;\r\n        case 'hybrid':\r\n          optimizationResults = await this.optimizeHybrid(cvSplits, config);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown optimization type: ${this.type}`);\r\n      }\r\n\r\n      this.bestParams = optimizationResults.bestParams;\r\n      return optimizationResults;\r\n      \r\n    } finally {\r\n      this.isRunning = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create time-series cross-validation splits\r\n   * @param {Array} data - Historical data\r\n   * @param {number} folds - Number of CV folds\r\n   * @returns {Array} Array of {train, test} splits\r\n   */\r\n  createCrossValidationSplits(data, folds = 5) {\r\n    const splits = [];\r\n    const minTrainingSize = Math.floor(data.length * 0.3); // Minimum 30% for training\r\n    const stepSize = Math.floor((data.length - minTrainingSize) / folds);\r\n\r\n    for (let i = 0; i < folds; i++) {\r\n      const trainEnd = minTrainingSize + (i * stepSize);\r\n      const testStart = trainEnd;\r\n      const testEnd = Math.min(testStart + stepSize, data.length);\r\n\r\n      if (testEnd > testStart) {\r\n        splits.push({\r\n          train: data.slice(0, trainEnd),\r\n          test: data.slice(testStart, testEnd),\r\n          fold: i + 1\r\n        });\r\n      }\r\n    }\r\n\r\n    return splits;\r\n  }\r\n\r\n  /**\r\n   * Optimize ML offset parameters\r\n   */\r\n  async optimizeOffsets(cvSplits, config) {\r\n    const searchSpace = this.generateOffsetSearchSpace(config);\r\n    const results = [];\r\n\r\n    for (let i = 0; i < config.iterations; i++) {\r\n      const offsets = this.sampleFromSearchSpace(searchSpace, config.method, i);\r\n      const performance = await this.evaluateOffsets(offsets, cvSplits);\r\n      \r\n      results.push({\r\n        params: { offsets },\r\n        performance,\r\n        iteration: i + 1\r\n      });\r\n\r\n      if (i % 10 === 0) {\r\n        console.log(`Offset optimization progress: ${i + 1}/${config.iterations}`);\r\n      }\r\n    }\r\n\r\n    // Find best parameters\r\n    const bestResult = results.reduce((best, current) => \r\n      current.performance.hitRate > best.performance.hitRate ? current : best\r\n    );\r\n\r\n    return {\r\n      type: 'offsets',\r\n      bestParams: bestResult.params,\r\n      bestPerformance: bestResult.performance,\r\n      allResults: results,\r\n      improvement: this.calculateImprovement(bestResult.performance, results)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Optimize energy weight parameters\r\n   */\r\n  async optimizeWeights(cvSplits, config) {\r\n    const results = [];\r\n\r\n    for (let i = 0; i < config.iterations; i++) {\r\n      const weights = this.generateRandomWeights();\r\n      const performance = await this.evaluateWeights(weights, cvSplits);\r\n      \r\n      results.push({\r\n        params: { weights },\r\n        performance,\r\n        iteration: i + 1\r\n      });\r\n\r\n      if (i % 10 === 0) {\r\n        console.log(`Weight optimization progress: ${i + 1}/${config.iterations}`);\r\n      }\r\n    }\r\n\r\n    // Find best parameters\r\n    const bestResult = results.reduce((best, current) => \r\n      current.performance.hitRate > best.performance.hitRate ? current : best\r\n    );\r\n\r\n    return {\r\n      type: 'weights',\r\n      bestParams: bestResult.params,\r\n      bestPerformance: bestResult.performance,\r\n      allResults: results,\r\n      improvement: this.calculateImprovement(bestResult.performance, results)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Optimize both offsets and weights simultaneously\r\n   */\r\n  async optimizeHybrid(cvSplits, config) {\r\n    const results = [];\r\n\r\n    for (let i = 0; i < config.iterations; i++) {\r\n      const offsets = this.generateRandomOffsets();\r\n      const weights = this.generateRandomWeights();\r\n      const performance = await this.evaluateHybrid({ offsets, weights }, cvSplits);\r\n      \r\n      results.push({\r\n        params: { offsets, weights },\r\n        performance,\r\n        iteration: i + 1\r\n      });\r\n\r\n      if (i % 10 === 0) {\r\n        console.log(`Hybrid optimization progress: ${i + 1}/${config.iterations}`);\r\n      }\r\n    }\r\n\r\n    // Find best parameters\r\n    const bestResult = results.reduce((best, current) => \r\n      current.performance.hitRate > best.performance.hitRate ? current : best\r\n    );\r\n\r\n    return {\r\n      type: 'hybrid',\r\n      bestParams: bestResult.params,\r\n      bestPerformance: bestResult.performance,\r\n      allResults: results,\r\n      improvement: this.calculateImprovement(bestResult.performance, results)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate search space for offsets\r\n   */\r\n  generateOffsetSearchSpace(config) {\r\n    return {\r\n      offsetRange: [1, 68],\r\n      numOffsets: config.numOffsets || 8,\r\n      minSpread: config.minSpread || 3,\r\n      maxSpread: config.maxSpread || 15\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sample from search space based on method\r\n   */\r\n  sampleFromSearchSpace(searchSpace, method, iteration) {\r\n    switch (method) {\r\n      case 'random':\r\n        return this.generateRandomOffsets(searchSpace.numOffsets, searchSpace.offsetRange);\r\n      case 'grid':\r\n        return this.generateGridOffsets(searchSpace, iteration);\r\n      default:\r\n        return this.generateRandomOffsets();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate random offset combination\r\n   */\r\n  generateRandomOffsets(numOffsets = 8, range = [1, 68]) {\r\n    const offsets = [];\r\n    const used = new Set();\r\n\r\n    while (offsets.length < numOffsets) {\r\n      const offset = Math.floor(Math.random() * (range[1] - range[0] + 1)) + range[0];\r\n      if (!used.has(offset)) {\r\n        offsets.push(offset);\r\n        used.add(offset);\r\n      }\r\n    }\r\n\r\n    return offsets.sort((a, b) => a - b);\r\n  }\r\n\r\n  /**\r\n   * Generate random weight combination (normalized to sum = 1)\r\n   */\r\n  generateRandomWeights() {\r\n    const weights = {\r\n      prime: Math.random(),\r\n      digitalRoot: Math.random(),\r\n      mod5: Math.random(),\r\n      gridPosition: Math.random()\r\n    };\r\n\r\n    // Normalize to sum = 1\r\n    const sum = Object.values(weights).reduce((s, w) => s + w, 0);\r\n    Object.keys(weights).forEach(key => {\r\n      weights[key] /= sum;\r\n    });\r\n\r\n    return weights;\r\n  }\r\n\r\n  /**\r\n   * Evaluate offset parameters against cross-validation splits\r\n   */\r\n  async evaluateOffsets(offsets, cvSplits) {\r\n    const foldResults = [];\r\n\r\n    for (const split of cvSplits) {\r\n      const ml = new LotteryML();\r\n      const predictions = [];\r\n\r\n      // Generate predictions for test period\r\n      for (let i = 0; i < split.test.length - 1; i++) {\r\n        const trainData = [...split.train, ...split.test.slice(0, i)];\r\n        const actualDraw = split.test[i + 1];\r\n        \r\n        try {\r\n          // Use fallback prediction with custom offsets\r\n          const prediction = this.generatePredictionWithOffsets(trainData, offsets);\r\n          const matches = this.countMatches(prediction.whiteBalls, actualDraw.whiteBalls);\r\n          \r\n          predictions.push({\r\n            predicted: prediction.whiteBalls,\r\n            actual: actualDraw.whiteBalls,\r\n            matches\r\n          });\r\n        } catch (error) {\r\n          console.warn('Prediction failed:', error.message);\r\n        }\r\n      }\r\n\r\n      const foldPerformance = this.calculatePerformanceMetrics(predictions);\r\n      foldResults.push(foldPerformance);\r\n    }\r\n\r\n    // Average performance across folds\r\n    return this.averagePerformance(foldResults);\r\n  }\r\n\r\n  /**\r\n   * Evaluate weight parameters against cross-validation splits\r\n   */\r\n  async evaluateWeights(weights, cvSplits) {\r\n    const foldResults = [];\r\n\r\n    for (const split of cvSplits) {\r\n      const predictions = [];\r\n\r\n      // Generate predictions for test period\r\n      for (let i = 0; i < split.test.length - 1; i++) {\r\n        const trainData = [...split.train, ...split.test.slice(0, i)];\r\n        const actualDraw = split.test[i + 1];\r\n        \r\n        try {\r\n          // Use energy-based prediction with custom weights\r\n          const prediction = this.generatePredictionWithWeights(trainData, weights);\r\n          const matches = this.countMatches(prediction.whiteBalls, actualDraw.whiteBalls);\r\n          \r\n          predictions.push({\r\n            predicted: prediction.whiteBalls,\r\n            actual: actualDraw.whiteBalls,\r\n            matches\r\n          });\r\n        } catch (error) {\r\n          console.warn('Prediction failed:', error.message);\r\n        }\r\n      }\r\n\r\n      const foldPerformance = this.calculatePerformanceMetrics(predictions);\r\n      foldResults.push(foldPerformance);\r\n    }\r\n\r\n    return this.averagePerformance(foldResults);\r\n  }\r\n\r\n  /**\r\n   * Evaluate hybrid parameters\r\n   */\r\n  async evaluateHybrid(params, cvSplits) {\r\n    const foldResults = [];\r\n\r\n    for (const split of cvSplits) {\r\n      const predictions = [];\r\n\r\n      for (let i = 0; i < split.test.length - 1; i++) {\r\n        const trainData = [...split.train, ...split.test.slice(0, i)];\r\n        const actualDraw = split.test[i + 1];\r\n        \r\n        try {\r\n          const prediction = this.generateHybridPrediction(trainData, params);\r\n          const matches = this.countMatches(prediction.whiteBalls, actualDraw.whiteBalls);\r\n          \r\n          predictions.push({\r\n            predicted: prediction.whiteBalls,\r\n            actual: actualDraw.whiteBalls,\r\n            matches\r\n          });\r\n        } catch (error) {\r\n          console.warn('Prediction failed:', error.message);\r\n        }\r\n      }\r\n\r\n      const foldPerformance = this.calculatePerformanceMetrics(predictions);\r\n      foldResults.push(foldPerformance);\r\n    }\r\n\r\n    return this.averagePerformance(foldResults);\r\n  }\r\n\r\n  /**\r\n   * Generate prediction with custom offsets\r\n   */\r\n  generatePredictionWithOffsets(trainData, offsets) {\r\n    // Simplified frequency-based prediction with custom offsets\r\n    const frequency = new Array(70).fill(0);\r\n    trainData.forEach(draw => {\r\n      (draw.whiteBalls || []).forEach(num => {\r\n        if (num >= 1 && num <= 69) frequency[num]++;\r\n      });\r\n    });\r\n\r\n    const avgValue = frequency.reduce((sum, freq, idx) => sum + (freq * idx), 0) / \r\n                    frequency.reduce((sum, freq) => sum + freq, 0) || 35;\r\n\r\n    const base = Math.round(avgValue);\r\n    const numbers = offsets.map(offset => {\r\n      const num = (base + offset) % 69 + 1;\r\n      return Math.max(1, Math.min(69, num));\r\n    });\r\n\r\n    return {\r\n      whiteBalls: [...new Set(numbers)].slice(0, 5), // Remove duplicates, take 5\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      confidence: 0.7\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate prediction with custom weights\r\n   */\r\n  generatePredictionWithWeights(trainData, weights) {\r\n    const allNumbers = Array.from({length: 69}, (_, i) => i + 1);\r\n    const energyData = calculateEnergy(allNumbers, weights);\r\n    \r\n    return {\r\n      whiteBalls: energyData\r\n        .sort((a, b) => b.energy - a.energy)\r\n        .slice(0, 5)\r\n        .map(item => item.number),\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      confidence: 0.75\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate hybrid prediction\r\n   */\r\n  generateHybridPrediction(trainData, params) {\r\n    const offsetPred = this.generatePredictionWithOffsets(trainData, params.offsets);\r\n    const weightPred = this.generatePredictionWithWeights(trainData, params.weights);\r\n    \r\n    // Combine predictions (simple average)\r\n    const combined = [...offsetPred.whiteBalls, ...weightPred.whiteBalls];\r\n    const unique = [...new Set(combined)].slice(0, 5);\r\n    \r\n    return {\r\n      whiteBalls: unique,\r\n      powerball: Math.floor(Math.random() * 26) + 1,\r\n      confidence: 0.8\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Count matching numbers between prediction and actual\r\n   */\r\n  countMatches(predicted, actual) {\r\n    if (!predicted || !actual) return 0;\r\n    return predicted.filter(num => actual.includes(num)).length;\r\n  }\r\n\r\n  /**\r\n   * Calculate performance metrics for a set of predictions\r\n   */\r\n  calculatePerformanceMetrics(predictions) {\r\n    if (predictions.length === 0) {\r\n      return {\r\n        hitRate: 0,\r\n        averageMatches: 0,\r\n        maxMatches: 0,\r\n        consistency: 0,\r\n        totalPredictions: 0\r\n      };\r\n    }\r\n\r\n    const matches = predictions.map(p => p.matches);\r\n    const hits = matches.filter(m => m >= 3).length;\r\n    \r\n    return {\r\n      hitRate: hits / predictions.length,\r\n      averageMatches: matches.reduce((sum, m) => sum + m, 0) / predictions.length,\r\n      maxMatches: Math.max(...matches),\r\n      consistency: this.calculateConsistency(matches),\r\n      totalPredictions: predictions.length,\r\n      matchDistribution: this.calculateMatchDistribution(matches)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate consistency score (1 - coefficient of variation)\r\n   */\r\n  calculateConsistency(matches) {\r\n    if (matches.length <= 1) return 1;\r\n    \r\n    const mean = matches.reduce((sum, m) => sum + m, 0) / matches.length;\r\n    const variance = matches.reduce((sum, m) => sum + Math.pow(m - mean, 2), 0) / matches.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    \r\n    return mean > 0 ? Math.max(0, 1 - (stdDev / mean)) : 0;\r\n  }\r\n\r\n  /**\r\n   * Calculate match distribution\r\n   */\r\n  calculateMatchDistribution(matches) {\r\n    const distribution = {};\r\n    for (let i = 0; i <= 5; i++) {\r\n      distribution[i] = matches.filter(m => m === i).length;\r\n    }\r\n    return distribution;\r\n  }\r\n\r\n  /**\r\n   * Average performance across CV folds\r\n   */\r\n  averagePerformance(foldResults) {\r\n    if (foldResults.length === 0) return this.calculatePerformanceMetrics([]);\r\n\r\n    const avgPerformance = {\r\n      hitRate: foldResults.reduce((sum, r) => sum + r.hitRate, 0) / foldResults.length,\r\n      averageMatches: foldResults.reduce((sum, r) => sum + r.averageMatches, 0) / foldResults.length,\r\n      maxMatches: Math.max(...foldResults.map(r => r.maxMatches)),\r\n      consistency: foldResults.reduce((sum, r) => sum + r.consistency, 0) / foldResults.length,\r\n      totalPredictions: foldResults.reduce((sum, r) => sum + r.totalPredictions, 0),\r\n      foldVariance: this.calculateFoldVariance(foldResults)\r\n    };\r\n\r\n    return avgPerformance;\r\n  }\r\n\r\n  /**\r\n   * Calculate variance between CV folds\r\n   */\r\n  calculateFoldVariance(foldResults) {\r\n    const hitRates = foldResults.map(r => r.hitRate);\r\n    const mean = hitRates.reduce((sum, hr) => sum + hr, 0) / hitRates.length;\r\n    const variance = hitRates.reduce((sum, hr) => sum + Math.pow(hr - mean, 2), 0) / hitRates.length;\r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  /**\r\n   * Calculate improvement over baseline\r\n   */\r\n  calculateImprovement(bestPerformance, allResults) {\r\n    const baseline = {\r\n      hitRate: 0.1, // Typical baseline hit rate\r\n      averageMatches: 1.2 // Typical baseline average matches\r\n    };\r\n\r\n    return {\r\n      hitRateImprovement: ((bestPerformance.hitRate - baseline.hitRate) / baseline.hitRate) * 100,\r\n      averageMatchImprovement: ((bestPerformance.averageMatches - baseline.averageMatches) / baseline.averageMatches) * 100,\r\n      confidenceInterval: this.calculateConfidenceInterval(allResults)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate 95% confidence interval for results\r\n   */\r\n  calculateConfidenceInterval(results) {\r\n    const hitRates = results.map(r => r.performance.hitRate);\r\n    const mean = hitRates.reduce((sum, hr) => sum + hr, 0) / hitRates.length;\r\n    const stdDev = Math.sqrt(hitRates.reduce((sum, hr) => sum + Math.pow(hr - mean, 2), 0) / hitRates.length);\r\n    const marginOfError = 1.96 * (stdDev / Math.sqrt(hitRates.length));\r\n    \r\n    return {\r\n      lower: mean - marginOfError,\r\n      upper: mean + marginOfError,\r\n      mean,\r\n      stdDev\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get optimization status\r\n   */\r\n  getStatus() {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      type: this.type,\r\n      resultsCount: this.results.length,\r\n      hasBestParams: this.bestParams !== null,\r\n      bestParams: this.bestParams\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Factory function to create optimization engine\r\n */\r\nexport function createOptimizationEngine(type) {\r\n  return new OptimizationEngine(type);\r\n}\r\n\r\n/**\r\n * Quick optimization utility for common use cases\r\n */\r\nexport async function quickOptimize(historicalData, type = 'hybrid', iterations = 50) {\r\n  const engine = new OptimizationEngine(type);\r\n  \r\n  return await engine.optimize(historicalData, {\r\n    method: 'random',\r\n    iterations,\r\n    crossValidationFolds: 3\r\n  });\r\n}\r\n\r\nexport default OptimizationEngine;", "/**\r\n * ACCURACY TESTING UI CONTROLLER\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * User interface for split testing and prediction accuracy analysis\r\n */\r\n\r\nimport state from './state.js';\r\nimport PredictionAccuracyTester from './accuracy-tester.js';\r\nimport { showError, showSuccess, showInfo } from './notifications.js';\r\n\r\nlet currentTester = null;\r\nlet isTestingRunning = false;\r\n\r\n/**\r\n * Initialize accuracy testing UI\r\n */\r\nexport function initAccuracyUI() {\r\n  const runTestBtn = document.getElementById('run-accuracy-test');\r\n  const addStrategyBtn = document.getElementById('add-strategy');\r\n  \r\n  if (runTestBtn) {\r\n    runTestBtn.addEventListener('click', runAccuracyTest);\r\n  }\r\n  \r\n  if (addStrategyBtn) {\r\n    addStrategyBtn.addEventListener('click', addCustomStrategy);\r\n  }\r\n  \r\n  // Subscribe to data updates\r\n  state.subscribe('drawsUpdated', (draws) => {\r\n    if (draws && draws.length > 0) {\r\n      currentTester = new PredictionAccuracyTester(draws);\r\n      setupDefaultStrategies();\r\n      updateTestDataInfo(draws.length);\r\n    }\r\n  });\r\n  \r\n  // Listen for progress updates\r\n  if (typeof window !== 'undefined') {\r\n    window.addEventListener('accuracyProgress', handleProgressUpdate);\r\n  }\r\n  \r\n  console.log('[Accuracy UI] Initialized successfully');\r\n}\r\n\r\n/**\r\n * Setup default prediction strategies for testing\r\n */\r\nfunction setupDefaultStrategies() {\r\n  if (!currentTester) return;\r\n  \r\n  // Clear existing strategies\r\n  currentTester.strategies.clear();\r\n  \r\n  // Add confidence interval strategy\r\n  currentTester.addStrategy('Confidence Intervals (95%)', null, {\r\n    type: 'confidence',\r\n    options: {\r\n      confidenceLevel: 0.95,\r\n      method: 'bootstrap',\r\n      includeCorrelations: true\r\n    }\r\n  });\r\n  \r\n  // Add confidence interval strategy with different settings\r\n  currentTester.addStrategy('Confidence Intervals (90%)', null, {\r\n    type: 'confidence',\r\n    options: {\r\n      confidenceLevel: 0.90,\r\n      method: 'time-weighted',\r\n      includeCorrelations: true\r\n    }\r\n  });\r\n  \r\n  // Add energy signature strategy\r\n  currentTester.addStrategy('Energy Signature', null, {\r\n    type: 'energy',\r\n    weights: {\r\n      prime: 0.3,\r\n      digitalRoot: 0.2,\r\n      mod5: 0.2,\r\n      gridPosition: 0.3\r\n    }\r\n  });\r\n  \r\n  // Add frequency analysis strategy\r\n  currentTester.addStrategy('Frequency Analysis', null, {\r\n    type: 'frequency'\r\n  });\r\n  \r\n  // Add hybrid strategy\r\n  currentTester.addStrategy('Hybrid (Energy + Frequency)', null, {\r\n    type: 'hybrid'\r\n  });\r\n  \r\n  // Update strategy list in UI\r\n  updateStrategyList();\r\n}\r\n\r\n/**\r\n * Run comprehensive accuracy test\r\n */\r\nasync function runAccuracyTest() {\r\n  if (isTestingRunning) return;\r\n  \r\n  if (!state.draws || state.draws.length === 0) {\r\n    showError('No Data', 'Please upload a CSV file with lottery data first');\r\n    return;\r\n  }\r\n  \r\n  if (state.draws.length < 250) {\r\n    showError('Insufficient Data', 'At least 250 historical draws are required for reliable accuracy testing');\r\n    return;\r\n  }\r\n  \r\n  if (!currentTester || currentTester.strategies.size === 0) {\r\n    showError('No Strategies', 'Please add at least one prediction strategy to test');\r\n    return;\r\n  }\r\n  \r\n  isTestingRunning = true;\r\n  setTestingState(true);\r\n  \r\n  try {\r\n    const testConfig = getTestConfiguration();\r\n    \r\n    showInfo('Starting Accuracy Test', `Testing ${currentTester.strategies.size} strategies with walk-forward validation`);\r\n    \r\n    const results = await currentTester.runAccuracyTest(testConfig);\r\n    \r\n    displayTestResults(results);\r\n    displayStrategyComparison(results.comparison);\r\n    displayDetailedAnalysis(results);\r\n    \r\n    showSuccess('Test Complete', 'Accuracy analysis completed successfully');\r\n    \r\n  } catch (error) {\r\n    console.error('Accuracy test failed:', error);\r\n    showError('Test Failed', error.message || 'An error occurred during accuracy testing');\r\n  } finally {\r\n    isTestingRunning = false;\r\n    setTestingState(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Get test configuration from UI controls\r\n */\r\nfunction getTestConfiguration() {\r\n  return {\r\n    testMethod: document.getElementById('test-method')?.value || 'walk-forward',\r\n    initialTraining: parseInt(document.getElementById('initial-training')?.value) || 200,\r\n    testWindow: parseInt(document.getElementById('test-window')?.value) || 50,\r\n    stepSize: parseInt(document.getElementById('step-size')?.value) || 10,\r\n    metrics: ['matches', 'consistency', 'prize-tiers', 'confidence-accuracy']\r\n  };\r\n}\r\n\r\n/**\r\n * Set testing state in UI\r\n */\r\nfunction setTestingState(testing) {\r\n  const runBtn = document.getElementById('run-accuracy-test');\r\n  const addBtn = document.getElementById('add-strategy');\r\n  \r\n  if (runBtn) {\r\n    runBtn.disabled = testing;\r\n    runBtn.textContent = testing ? 'Testing...' : 'Run Accuracy Test';\r\n  }\r\n  \r\n  if (addBtn) {\r\n    addBtn.disabled = testing;\r\n  }\r\n  \r\n  // Show/hide progress container\r\n  const progressContainer = document.getElementById('accuracy-progress');\r\n  if (progressContainer) {\r\n    progressContainer.style.display = testing ? 'block' : 'none';\r\n  }\r\n}\r\n\r\n/**\r\n * Handle progress updates from accuracy testing\r\n */\r\nfunction handleProgressUpdate(event) {\r\n  const { strategy, results } = event.detail;\r\n  \r\n  const progressContainer = document.getElementById('accuracy-progress');\r\n  if (!progressContainer) return;\r\n  \r\n  const progressItem = document.createElement('div');\r\n  progressItem.className = 'progress-item';\r\n  progressItem.innerHTML = `\r\n    <div class=\"progress-strategy\">${strategy}</div>\r\n    <div class=\"progress-stats\">\r\n      ${results.totalPredictions} predictions \u2022 \r\n      ${results.validationPeriods} validation periods \u2022 \r\n      Score: ${results.performance.toFixed(2)}\r\n    </div>\r\n  `;\r\n  \r\n  progressContainer.appendChild(progressItem);\r\n}\r\n\r\n/**\r\n * Display test results overview\r\n */\r\nfunction displayTestResults(results) {\r\n  const resultsContainer = document.getElementById('accuracy-results');\r\n  if (!resultsContainer) return;\r\n  \r\n  // Clear previous results\r\n  while (resultsContainer.firstChild) {\r\n    resultsContainer.removeChild(resultsContainer.firstChild);\r\n  }\r\n  \r\n  const summary = results.summary;\r\n  \r\n  const summaryDiv = document.createElement('div');\r\n  summaryDiv.className = 'test-summary';\r\n  summaryDiv.innerHTML = `\r\n    <h3>\uD83C\uDFAF Accuracy Test Results</h3>\r\n    <div class=\"summary-stats\">\r\n      <div class=\"summary-stat\">\r\n        <div class=\"stat-value\">${summary.totalStrategies}</div>\r\n        <div class=\"stat-label\">Strategies Tested</div>\r\n      </div>\r\n      <div class=\"summary-stat\">\r\n        <div class=\"stat-value\">${summary.totalPredictions.toLocaleString()}</div>\r\n        <div class=\"stat-label\">Total Predictions</div>\r\n      </div>\r\n      <div class=\"summary-stat\">\r\n        <div class=\"stat-value\">${summary.bestPerformer.performance.toFixed(2)}</div>\r\n        <div class=\"stat-label\">Best Score</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"key-findings\">\r\n      <h4>Key Findings:</h4>\r\n      <ul>\r\n        ${summary.keyFindings.map(finding => `<li>${finding}</li>`).join('')}\r\n      </ul>\r\n    </div>\r\n  `;\r\n  \r\n  resultsContainer.appendChild(summaryDiv);\r\n}\r\n\r\n/**\r\n * Display strategy comparison table\r\n */\r\nfunction displayStrategyComparison(comparison) {\r\n  const comparisonContainer = document.getElementById('strategy-comparison');\r\n  if (!comparisonContainer) return;\r\n  \r\n  // Clear previous comparison\r\n  while (comparisonContainer.firstChild) {\r\n    comparisonContainer.removeChild(comparisonContainer.firstChild);\r\n  }\r\n  \r\n  const table = document.createElement('table');\r\n  table.className = 'comparison-table';\r\n  \r\n  const header = document.createElement('thead');\r\n  header.innerHTML = `\r\n    <tr>\r\n      <th>Rank</th>\r\n      <th>Strategy</th>\r\n      <th>Performance Score</th>\r\n      <th>Avg Matches</th>\r\n      <th>Hit Rate</th>\r\n      <th>Consistency</th>\r\n      <th>Total Predictions</th>\r\n    </tr>\r\n  `;\r\n  table.appendChild(header);\r\n  \r\n  const tbody = document.createElement('tbody');\r\n  \r\n  comparison.ranking.forEach((strategy, index) => {\r\n    const row = document.createElement('tr');\r\n    row.className = index === 0 ? 'best-strategy' : '';\r\n    \r\n    row.innerHTML = `\r\n      <td>${index + 1}</td>\r\n      <td>\r\n        <div class=\"strategy-name\">${strategy.strategy}</div>\r\n        ${index === 0 ? '<span class=\"best-badge\">\uD83C\uDFC6 Best</span>' : ''}\r\n      </td>\r\n      <td class=\"score-cell\">${strategy.performance.toFixed(2)}</td>\r\n      <td>${strategy.avgMatches.toFixed(2)}</td>\r\n      <td>${(strategy.hitRate * 100).toFixed(1)}%</td>\r\n      <td>${(strategy.consistency * 100).toFixed(1)}%</td>\r\n      <td>${strategy.totalPredictions.toLocaleString()}</td>\r\n    `;\r\n    \r\n    tbody.appendChild(row);\r\n  });\r\n  \r\n  table.appendChild(tbody);\r\n  comparisonContainer.appendChild(table);\r\n}\r\n\r\n/**\r\n * Display detailed analysis\r\n */\r\nfunction displayDetailedAnalysis(results) {\r\n  const detailsContainer = document.getElementById('detailed-analysis');\r\n  if (!detailsContainer) return;\r\n  \r\n  // Clear previous details\r\n  while (detailsContainer.firstChild) {\r\n    detailsContainer.removeChild(detailsContainer.firstChild);\r\n  }\r\n  \r\n  // Create detailed analysis for each strategy\r\n  results.results.forEach(([strategyName, strategyResult]) => {\r\n    const strategyDiv = document.createElement('div');\r\n    strategyDiv.className = 'strategy-analysis';\r\n    \r\n    const metrics = strategyResult.aggregatedMetrics;\r\n    \r\n    strategyDiv.innerHTML = `\r\n      <h4>${strategyName}</h4>\r\n      <div class=\"analysis-grid\">\r\n        ${metrics.matches ? `\r\n          <div class=\"analysis-card\">\r\n            <h5>Match Performance</h5>\r\n            <p>Average Matches: ${metrics.matches.averageMatches.toFixed(2)}</p>\r\n            <p>Hit Rate (\u22653 matches): ${(metrics.matches.averageHitRate * 100).toFixed(1)}%</p>\r\n            <p>Total Predictions: ${metrics.matches.totalPredictions}</p>\r\n          </div>\r\n        ` : ''}\r\n        \r\n        ${metrics.consistency ? `\r\n          <div class=\"analysis-card\">\r\n            <h5>Consistency</h5>\r\n            <p>Consistency Score: ${(metrics.consistency.averageConsistency * 100).toFixed(1)}%</p>\r\n            <p>Average Std Dev: ${metrics.consistency.averageStdDev.toFixed(2)}</p>\r\n          </div>\r\n        ` : ''}\r\n        \r\n        ${metrics['prize-tiers'] ? `\r\n          <div class=\"analysis-card\">\r\n            <h5>Prize Tiers</h5>\r\n            <p>Total Wins: ${metrics['prize-tiers'].totalWins}</p>\r\n            <p>Win Rate: ${(metrics['prize-tiers'].totalWins / metrics.matches.totalPredictions * 100).toFixed(2)}%</p>\r\n          </div>\r\n        ` : ''}\r\n        \r\n        ${metrics.confidenceAccuracy ? `\r\n          <div class=\"analysis-card\">\r\n            <h5>Confidence Accuracy</h5>\r\n            <p>Interval Accuracy: ${(metrics.confidenceAccuracy.averageAccuracy * 100).toFixed(1)}%</p>\r\n            <p>Expected: ${(metrics.confidenceAccuracy.expectedAccuracy * 100)}%</p>\r\n          </div>\r\n        ` : ''}\r\n      </div>\r\n    `;\r\n    \r\n    detailsContainer.appendChild(strategyDiv);\r\n  });\r\n}\r\n\r\n/**\r\n * Add custom strategy\r\n */\r\nfunction addCustomStrategy() {\r\n  const strategyName = prompt('Enter strategy name:');\r\n  if (!strategyName || !currentTester) return;\r\n  \r\n  const strategyType = prompt('Enter strategy type (confidence, energy, frequency, hybrid):');\r\n  if (!strategyType) return;\r\n  \r\n  try {\r\n    currentTester.addStrategy(strategyName, null, {\r\n      type: strategyType,\r\n      options: {} // Could be expanded with more options\r\n    });\r\n    \r\n    updateStrategyList();\r\n    showSuccess('Strategy Added', `${strategyName} strategy added successfully`);\r\n    \r\n  } catch (error) {\r\n    showError('Failed to Add Strategy', error.message);\r\n  }\r\n}\r\n\r\n/**\r\n * Update strategy list display\r\n */\r\nfunction updateStrategyList() {\r\n  const listContainer = document.getElementById('strategy-list');\r\n  if (!listContainer || !currentTester) return;\r\n  \r\n  // Clear current list\r\n  while (listContainer.firstChild) {\r\n    listContainer.removeChild(listContainer.firstChild);\r\n  }\r\n  \r\n  if (currentTester.strategies.size === 0) {\r\n    const noStrategies = document.createElement('div');\r\n    noStrategies.className = 'no-strategies';\r\n    noStrategies.textContent = 'No strategies configured';\r\n    listContainer.appendChild(noStrategies);\r\n    return;\r\n  }\r\n  \r\n  currentTester.strategies.forEach((strategy, name) => {\r\n    const strategyItem = document.createElement('div');\r\n    strategyItem.className = 'strategy-item';\r\n    \r\n    strategyItem.innerHTML = `\r\n      <div class=\"strategy-info\">\r\n        <div class=\"strategy-name\">${name}</div>\r\n        <div class=\"strategy-type\">Type: ${strategy.config.type}</div>\r\n      </div>\r\n      <button class=\"remove-strategy\" onclick=\"removeStrategy('${name}')\">Remove</button>\r\n    `;\r\n    \r\n    listContainer.appendChild(strategyItem);\r\n  });\r\n}\r\n\r\n/**\r\n * Remove a strategy\r\n */\r\nfunction removeStrategy(strategyName) {\r\n  if (!currentTester) return;\r\n  \r\n  currentTester.strategies.delete(strategyName);\r\n  updateStrategyList();\r\n  showInfo('Strategy Removed', `${strategyName} strategy removed`);\r\n}\r\n\r\n/**\r\n * Update test data information\r\n */\r\nfunction updateTestDataInfo(drawCount) {\r\n  const infoContainer = document.getElementById('test-data-info');\r\n  if (!infoContainer) return;\r\n  \r\n  const sufficient = drawCount >= 250;\r\n  \r\n  infoContainer.className = `test-data-info ${sufficient ? 'sufficient' : 'insufficient'}`;\r\n  infoContainer.innerHTML = `\r\n    <div class=\"data-count\">${drawCount.toLocaleString()} draws available</div>\r\n    <div class=\"data-status\">\r\n      ${sufficient \r\n        ? '\u2705 Sufficient data for accuracy testing' \r\n        : '\u26A0\uFE0F At least 250 draws recommended for reliable results'\r\n      }\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Export test results\r\n */\r\nexport function exportTestResults() {\r\n  if (!currentTester || !currentTester.results || currentTester.results.size === 0) {\r\n    showError('No Results', 'Run an accuracy test first before exporting');\r\n    return;\r\n  }\r\n  \r\n  const exportData = {\r\n    timestamp: new Date().toISOString(),\r\n    testConfig: getTestConfiguration(),\r\n    results: Array.from(currentTester.results.entries()),\r\n    summary: currentTester.generateSummary(currentTester.results)\r\n  };\r\n  \r\n  const blob = new Blob([JSON.stringify(exportData, null, 2)], {\r\n    type: 'application/json'\r\n  });\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = `accuracy-test-results-${new Date().toISOString().slice(0, 10)}.json`;\r\n  a.click();\r\n  \r\n  URL.revokeObjectURL(url);\r\n  showSuccess('Export Complete', 'Accuracy test results exported successfully');\r\n}\r\n\r\n// Export functions\r\nexport { removeStrategy };\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.initAccuracyUI = initAccuracyUI;\r\n  window.exportTestResults = exportTestResults;\r\n  window.removeStrategy = removeStrategy;\r\n}", "/**\r\n * STRATEGY BUILDER\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Custom strategy builder for creating personalized number selection formulas\r\n */\r\n\r\nimport state from './state.js';\r\nimport { showError, showSuccess, showInfo } from './notifications.js';\r\n\r\nlet savedStrategies = JSON.parse(localStorage.getItem('lottery-strategies') || '[]');\r\nlet currentStrategy = {\r\n  name: '',\r\n  formula: {},\r\n  weights: {\r\n    energy: 30,\r\n    frequency: 25,\r\n    gaps: 20,\r\n    patterns: 15,\r\n    random: 10\r\n  }\r\n};\r\n\r\nexport function initStrategyBuilder() {\r\n  setupFormulaBuilder();\r\n  setupSaveButton();\r\n  loadSavedStrategies();\r\n  \r\n  console.log('[Strategy Builder] Initialized successfully');\r\n}\r\n\r\nfunction setupFormulaBuilder() {\r\n  const formulaBuilder = document.getElementById('formula-builder');\r\n  if (!formulaBuilder) return;\r\n\r\n  formulaBuilder.innerHTML = `\r\n    <div class=\"strategy-config\">\r\n      <div class=\"strategy-name-section\">\r\n        <label for=\"strategy-name\">Strategy Name:</label>\r\n        <input type=\"text\" id=\"strategy-name\" placeholder=\"e.g., My Custom Strategy\" value=\"${currentStrategy.name}\">\r\n      </div>\r\n      \r\n      <div class=\"weights-section\">\r\n        <h4>\uD83D\uDCCA Component Weights (Total: 100%)</h4>\r\n        <div class=\"weight-controls\">\r\n          <div class=\"weight-control\">\r\n            <label for=\"energy-weight\">Energy Signature:</label>\r\n            <input type=\"range\" id=\"energy-weight\" min=\"0\" max=\"100\" value=\"${currentStrategy.weights.energy}\">\r\n            <span class=\"weight-value\">${currentStrategy.weights.energy}%</span>\r\n          </div>\r\n          \r\n          <div class=\"weight-control\">\r\n            <label for=\"frequency-weight\">Hot/Cold Numbers:</label>\r\n            <input type=\"range\" id=\"frequency-weight\" min=\"0\" max=\"100\" value=\"${currentStrategy.weights.frequency}\">\r\n            <span class=\"weight-value\">${currentStrategy.weights.frequency}%</span>\r\n          </div>\r\n          \r\n          <div class=\"weight-control\">\r\n            <label for=\"gaps-weight\">Gap Analysis:</label>\r\n            <input type=\"range\" id=\"gaps-weight\" min=\"0\" max=\"100\" value=\"${currentStrategy.weights.gaps}\">\r\n            <span class=\"weight-value\">${currentStrategy.weights.gaps}%</span>\r\n          </div>\r\n          \r\n          <div class=\"weight-control\">\r\n            <label for=\"patterns-weight\">Pattern Matching:</label>\r\n            <input type=\"range\" id=\"patterns-weight\" min=\"0\" max=\"100\" value=\"${currentStrategy.weights.patterns}\">\r\n            <span class=\"weight-value\">${currentStrategy.weights.patterns}%</span>\r\n          </div>\r\n          \r\n          <div class=\"weight-control\">\r\n            <label for=\"random-weight\">Random Factor:</label>\r\n            <input type=\"range\" id=\"random-weight\" min=\"0\" max=\"100\" value=\"${currentStrategy.weights.random}\">\r\n            <span class=\"weight-value\">${currentStrategy.weights.random}%</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"total-weight\">\r\n          Total: <span id=\"total-weight\">100</span>%\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"filter-section\">\r\n        <h4>\uD83C\uDFAF Number Filters</h4>\r\n        <div class=\"filter-controls\">\r\n          <label>\r\n            <input type=\"checkbox\" id=\"avoid-consecutive\" checked>\r\n            Avoid consecutive numbers (1,2,3...)\r\n          </label>\r\n          \r\n          <label>\r\n            <input type=\"checkbox\" id=\"balance-odd-even\" checked>\r\n            Balance odd/even numbers\r\n          </label>\r\n          \r\n          <label>\r\n            <input type=\"checkbox\" id=\"spread-ranges\" checked>\r\n            Spread across number ranges\r\n          </label>\r\n          \r\n          <label>\r\n            <input type=\"checkbox\" id=\"limit-repeats\">\r\n            Limit recent repeating numbers\r\n          </label>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"preview-section\">\r\n        <h4>\uD83D\uDC40 Strategy Preview</h4>\r\n        <button id=\"preview-strategy\" class=\"preview-btn\">Generate Preview Numbers</button>\r\n        <div id=\"preview-results\" class=\"preview-results\"></div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"saved-strategies\">\r\n      <h4>\uD83D\uDCBE Saved Strategies</h4>\r\n      <div id=\"strategies-list\" class=\"strategies-list\"></div>\r\n    </div>\r\n  `;\r\n\r\n  setupWeightControls();\r\n  setupPreview();\r\n}\r\n\r\nfunction setupWeightControls() {\r\n  const weightSliders = document.querySelectorAll('.weight-control input[type=\"range\"]');\r\n  const totalWeightSpan = document.getElementById('total-weight');\r\n\r\n  weightSliders.forEach(slider => {\r\n    slider.addEventListener('input', (e) => {\r\n      const value = parseInt(e.target.value);\r\n      const weightType = e.target.id.replace('-weight', '');\r\n      \r\n      // Update the display\r\n      const valueSpan = e.target.nextElementSibling;\r\n      valueSpan.textContent = value + '%';\r\n      \r\n      // Update current strategy\r\n      currentStrategy.weights[weightType] = value;\r\n      \r\n      // Update total\r\n      const total = Object.values(currentStrategy.weights).reduce((sum, w) => sum + w, 0);\r\n      totalWeightSpan.textContent = total;\r\n      \r\n      // Color code the total\r\n      if (total === 100) {\r\n        totalWeightSpan.style.color = '#2ed573';\r\n      } else if (total > 100) {\r\n        totalWeightSpan.style.color = '#ff4757';\r\n      } else {\r\n        totalWeightSpan.style.color = '#ffa502';\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction setupPreview() {\r\n  const previewBtn = document.getElementById('preview-strategy');\r\n  if (previewBtn) {\r\n    previewBtn.addEventListener('click', generatePreview);\r\n  }\r\n}\r\n\r\nfunction setupSaveButton() {\r\n  const saveBtn = document.getElementById('save-strategy');\r\n  if (saveBtn) {\r\n    saveBtn.addEventListener('click', saveStrategy);\r\n  }\r\n}\r\n\r\nfunction saveStrategy() {\r\n  const nameInput = document.getElementById('strategy-name');\r\n  const strategyName = nameInput?.value.trim();\r\n  \r\n  if (!strategyName) {\r\n    showError('Missing Name', 'Please enter a name for your strategy');\r\n    return;\r\n  }\r\n  \r\n  // Validate weights total 100%\r\n  const total = Object.values(currentStrategy.weights).reduce((sum, w) => sum + w, 0);\r\n  if (total !== 100) {\r\n    showError('Invalid Weights', `Component weights must total 100% (current: ${total}%)`);\r\n    return;\r\n  }\r\n  \r\n  // Get filter settings\r\n  const filters = {\r\n    avoidConsecutive: document.getElementById('avoid-consecutive')?.checked || false,\r\n    balanceOddEven: document.getElementById('balance-odd-even')?.checked || false,\r\n    spreadRanges: document.getElementById('spread-ranges')?.checked || false,\r\n    limitRepeats: document.getElementById('limit-repeats')?.checked || false\r\n  };\r\n  \r\n  const strategy = {\r\n    id: Date.now().toString(),\r\n    name: strategyName,\r\n    weights: { ...currentStrategy.weights },\r\n    filters,\r\n    created: new Date().toISOString(),\r\n    lastUsed: null\r\n  };\r\n  \r\n  // Check if name already exists\r\n  const existingIndex = savedStrategies.findIndex(s => s.name === strategyName);\r\n  if (existingIndex >= 0) {\r\n    if (!confirm(`Strategy \"${strategyName}\" already exists. Overwrite?`)) {\r\n      return;\r\n    }\r\n    savedStrategies[existingIndex] = strategy;\r\n  } else {\r\n    savedStrategies.push(strategy);\r\n  }\r\n  \r\n  // Save to localStorage\r\n  localStorage.setItem('lottery-strategies', JSON.stringify(savedStrategies));\r\n  \r\n  // Update UI\r\n  loadSavedStrategies();\r\n  showSuccess('Strategy Saved', `\"${strategyName}\" has been saved successfully`);\r\n}\r\n\r\nfunction loadSavedStrategies() {\r\n  const strategiesList = document.getElementById('strategies-list');\r\n  if (!strategiesList) return;\r\n  \r\n  if (savedStrategies.length === 0) {\r\n    strategiesList.innerHTML = '<p class=\"no-strategies\">No saved strategies yet.</p>';\r\n    return;\r\n  }\r\n  \r\n  strategiesList.innerHTML = savedStrategies.map(strategy => `\r\n    <div class=\"saved-strategy\" data-id=\"${strategy.id}\">\r\n      <div class=\"strategy-info\">\r\n        <div class=\"strategy-name\">${strategy.name}</div>\r\n        <div class=\"strategy-meta\">\r\n          Created: ${new Date(strategy.created).toLocaleDateString()}\r\n          ${strategy.lastUsed ? ` | Last used: ${new Date(strategy.lastUsed).toLocaleDateString()}` : ''}\r\n        </div>\r\n        <div class=\"strategy-weights\">\r\n          Energy: ${strategy.weights.energy}% \u2022 \r\n          Frequency: ${strategy.weights.frequency}% \u2022 \r\n          Gaps: ${strategy.weights.gaps}% \u2022 \r\n          Patterns: ${strategy.weights.patterns}% \u2022 \r\n          Random: ${strategy.weights.random}%\r\n        </div>\r\n      </div>\r\n      <div class=\"strategy-actions\">\r\n        <button class=\"load-strategy\" onclick=\"loadStrategy('${strategy.id}')\">Load</button>\r\n        <button class=\"use-strategy\" onclick=\"useStrategy('${strategy.id}')\">Use</button>\r\n        <button class=\"delete-strategy\" onclick=\"deleteStrategy('${strategy.id}')\">Delete</button>\r\n      </div>\r\n    </div>\r\n  `).join('');\r\n}\r\n\r\nasync function generatePreview() {\r\n  if (!state.draws || state.draws.length === 0) {\r\n    showError('No Data', 'Please load lottery data first to preview your strategy');\r\n    return;\r\n  }\r\n  \r\n  const previewBtn = document.getElementById('preview-strategy');\r\n  const previewResults = document.getElementById('preview-results');\r\n  \r\n  if (previewBtn) previewBtn.disabled = true;\r\n  if (previewResults) previewResults.innerHTML = '<div class=\"loading\">Generating preview...</div>';\r\n  \r\n  try {\r\n    // Simulate strategy calculation with current weights\r\n    const numbers = await generateNumbersWithStrategy(currentStrategy);\r\n    \r\n    if (previewResults) {\r\n      previewResults.innerHTML = `\r\n        <div class=\"preview-numbers\">\r\n          <div class=\"white-balls\">\r\n            ${numbers.whiteBalls.map(n => `<span class=\"number-ball\">${n}</span>`).join('')}\r\n          </div>\r\n          <div class=\"powerball\">\r\n            <span class=\"powerball-number\">${numbers.powerball}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"preview-note\">\r\n          <small>Preview generated with current weights and filters</small>\r\n        </div>\r\n      `;\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (previewResults) {\r\n      previewResults.innerHTML = `<div class=\"error\">Preview failed: ${error.message}</div>`;\r\n    }\r\n  } finally {\r\n    if (previewBtn) previewBtn.disabled = false;\r\n  }\r\n}\r\n\r\nasync function generateNumbersWithStrategy(strategy) {\r\n  // This is a simplified version - in a real implementation, \r\n  // you'd use the actual analysis results with the custom weights\r\n  const draws = state.draws.slice(-100); // Use recent draws\r\n  \r\n  // Generate weighted recommendations\r\n  const whiteBalls = [];\r\n  const usedNumbers = new Set();\r\n  \r\n  // Simple strategy simulation - would be more complex in reality\r\n  while (whiteBalls.length < 5) {\r\n    let number;\r\n    \r\n    if (Math.random() * 100 < strategy.weights.energy) {\r\n      // Energy-based number (simplified)\r\n      number = Math.floor(Math.random() * 30) + 20; // Mid-range numbers\r\n    } else if (Math.random() * 100 < strategy.weights.frequency) {\r\n      // Frequency-based number (simplified)\r\n      number = Math.floor(Math.random() * 20) + 1; // Lower numbers\r\n    } else {\r\n      // Random number\r\n      number = Math.floor(Math.random() * 69) + 1;\r\n    }\r\n    \r\n    if (!usedNumbers.has(number) && number <= 69) {\r\n      usedNumbers.add(number);\r\n      whiteBalls.push(number);\r\n    }\r\n  }\r\n  \r\n  whiteBalls.sort((a, b) => a - b);\r\n  \r\n  return {\r\n    whiteBalls,\r\n    powerball: Math.floor(Math.random() * 26) + 1\r\n  };\r\n}\r\n\r\n// Global functions for strategy management\r\nwindow.loadStrategy = function(id) {\r\n  const strategy = savedStrategies.find(s => s.id === id);\r\n  if (!strategy) return;\r\n  \r\n  currentStrategy = {\r\n    name: strategy.name,\r\n    weights: { ...strategy.weights },\r\n    formula: {}\r\n  };\r\n  \r\n  // Update UI\r\n  const nameInput = document.getElementById('strategy-name');\r\n  if (nameInput) nameInput.value = strategy.name;\r\n  \r\n  // Update weight sliders\r\n  Object.entries(strategy.weights).forEach(([key, value]) => {\r\n    const slider = document.getElementById(`${key}-weight`);\r\n    const valueSpan = slider?.nextElementSibling;\r\n    if (slider) slider.value = value;\r\n    if (valueSpan) valueSpan.textContent = value + '%';\r\n  });\r\n  \r\n  // Update filters\r\n  Object.entries(strategy.filters || {}).forEach(([key, value]) => {\r\n    const checkbox = document.getElementById(key.replace(/([A-Z])/g, '-$1').toLowerCase());\r\n    if (checkbox) checkbox.checked = value;\r\n  });\r\n  \r\n  showInfo('Strategy Loaded', `\"${strategy.name}\" has been loaded for editing`);\r\n};\r\n\r\nwindow.useStrategy = function(id) {\r\n  const strategy = savedStrategies.find(s => s.id === id);\r\n  if (!strategy) return;\r\n  \r\n  // Mark as last used\r\n  strategy.lastUsed = new Date().toISOString();\r\n  localStorage.setItem('lottery-strategies', JSON.stringify(savedStrategies));\r\n  \r\n  // Apply strategy to current analysis (this would integrate with the main analysis)\r\n  showSuccess('Strategy Applied', `\"${strategy.name}\" is now being used for analysis`);\r\n  loadSavedStrategies(); // Refresh to show last used date\r\n};\r\n\r\nwindow.deleteStrategy = function(id) {\r\n  const strategy = savedStrategies.find(s => s.id === id);\r\n  if (!strategy) return;\r\n  \r\n  if (!confirm(`Delete strategy \"${strategy.name}\"? This cannot be undone.`)) return;\r\n  \r\n  savedStrategies = savedStrategies.filter(s => s.id !== id);\r\n  localStorage.setItem('lottery-strategies', JSON.stringify(savedStrategies));\r\n  \r\n  loadSavedStrategies();\r\n  showInfo('Strategy Deleted', `\"${strategy.name}\" has been deleted`);\r\n};", "/**\r\n * SERVER DETECTION AND AUTO-LAUNCH SYSTEM\r\n * Version: 1.0.0 | Created: 2025-09-04\r\n * \r\n * Smart detection and management of local Node.js server for performance-intensive operations\r\n */\r\n\r\nimport { showError, showSuccess, showInfo, showWarning } from './notifications.js';\r\n\r\n/**\r\n * Manages local server detection, launch, and communication\r\n */\r\nexport class ServerManager {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      serverPort: options.serverPort || 3001,\r\n      serverHost: options.serverHost || 'localhost',\r\n      detectionTimeout: options.detectionTimeout || 5000,\r\n      launchTimeout: options.launchTimeout || 30000,\r\n      retryAttempts: options.retryAttempts || 3,\r\n      autoLaunch: options.autoLaunch || true,\r\n      ...options\r\n    };\r\n    \r\n    this.serverStatus = 'unknown'; // unknown, available, unavailable, starting, running, error\r\n    this.serverProcess = null;\r\n    this.serverCapabilities = {};\r\n    this.lastHealthCheck = null;\r\n    this.performanceMetrics = {\r\n      detectionTime: 0,\r\n      launchTime: 0,\r\n      avgResponseTime: 0,\r\n      successfulRequests: 0,\r\n      failedRequests: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get server base URL\r\n   */\r\n  get serverUrl() {\r\n    return `http://${this.options.serverHost}:${this.options.serverPort}`;\r\n  }\r\n\r\n  /**\r\n   * Detect if server is available and get capabilities\r\n   */\r\n  async detectServer() {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      console.log('[ServerManager] Detecting local server...');\r\n      \r\n      const response = await this.makeRequest('/health', {\r\n        method: 'GET',\r\n        timeout: this.options.detectionTimeout\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const healthData = await response.json();\r\n        \r\n        this.serverStatus = 'available';\r\n        this.serverCapabilities = healthData.capabilities || {};\r\n        this.lastHealthCheck = new Date();\r\n        this.performanceMetrics.detectionTime = performance.now() - startTime;\r\n        \r\n        console.log('[ServerManager] Server detected and available:', healthData);\r\n        \r\n        return {\r\n          available: true,\r\n          capabilities: this.serverCapabilities,\r\n          version: healthData.version,\r\n          performance: {\r\n            responseTime: this.performanceMetrics.detectionTime,\r\n            memoryUsage: healthData.memory,\r\n            cpuCores: healthData.cpuCores\r\n          }\r\n        };\r\n      } else {\r\n        throw new Error(`Server responded with status: ${response.status}`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.log('[ServerManager] Server not detected:', error.message);\r\n      \r\n      this.serverStatus = 'unavailable';\r\n      this.performanceMetrics.detectionTime = performance.now() - startTime;\r\n      \r\n      return {\r\n        available: false,\r\n        error: error.message,\r\n        canLaunch: await this.canLaunchServer()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if we can launch a local server\r\n   */\r\n  async canLaunchServer() {\r\n    // Check if we're in an environment that supports server launch\r\n    if (typeof window === 'undefined') return false; // Not in browser\r\n    if (!window.location.protocol.startsWith('http')) return false; // File protocol\r\n    \r\n    // Check for Node.js availability (would need to be implemented based on deployment)\r\n    // This is a placeholder - in real implementation, this would check for:\r\n    // - Electron environment with Node.js access\r\n    // - Bundled server executable\r\n    // - System Node.js installation\r\n    \r\n    return false; // For now, disable auto-launch until server is implemented\r\n  }\r\n\r\n  /**\r\n   * Launch local server\r\n   */\r\n  async launchServer() {\r\n    if (this.serverStatus === 'starting' || this.serverStatus === 'running') {\r\n      console.log('[ServerManager] Server is already starting or running');\r\n      return { success: true, status: this.serverStatus };\r\n    }\r\n    \r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      this.serverStatus = 'starting';\r\n      \r\n      showInfo('Starting Performance Server', 'Launching local server for enhanced performance...');\r\n      \r\n      // In a real implementation, this would:\r\n      // 1. Check for bundled server executable\r\n      // 2. Launch Node.js process with server script\r\n      // 3. Wait for server to be ready\r\n      // 4. Verify health endpoint\r\n      \r\n      // Placeholder implementation\r\n      console.log('[ServerManager] Server launch not implemented in browser environment');\r\n      \r\n      // Simulate server launch for testing\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Check if server is now available\r\n      const detection = await this.detectServer();\r\n      \r\n      if (detection.available) {\r\n        this.serverStatus = 'running';\r\n        this.performanceMetrics.launchTime = performance.now() - startTime;\r\n        \r\n        showSuccess('Server Ready', 'Performance server is now available for enhanced accuracy testing');\r\n        \r\n        return {\r\n          success: true,\r\n          status: 'running',\r\n          launchTime: this.performanceMetrics.launchTime,\r\n          capabilities: this.serverCapabilities\r\n        };\r\n      } else {\r\n        throw new Error('Server failed to start or become available');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('[ServerManager] Server launch failed:', error);\r\n      \r\n      this.serverStatus = 'error';\r\n      \r\n      showError('Server Launch Failed', `Could not start performance server: ${error.message}`);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        fallbackAvailable: true\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop local server\r\n   */\r\n  async stopServer() {\r\n    if (this.serverStatus !== 'running' && this.serverStatus !== 'starting') {\r\n      console.log('[ServerManager] No server to stop');\r\n      return { success: true, status: 'stopped' };\r\n    }\r\n    \r\n    try {\r\n      console.log('[ServerManager] Stopping local server...');\r\n      \r\n      // Attempt graceful shutdown\r\n      await this.makeRequest('/shutdown', {\r\n        method: 'POST',\r\n        timeout: 5000\r\n      });\r\n      \r\n      this.serverStatus = 'unavailable';\r\n      this.serverProcess = null;\r\n      \r\n      showInfo('Server Stopped', 'Performance server has been stopped');\r\n      \r\n      return { success: true, status: 'stopped' };\r\n      \r\n    } catch (error) {\r\n      console.warn('[ServerManager] Graceful shutdown failed:', error.message);\r\n      \r\n      // Force stop if available\r\n      if (this.serverProcess) {\r\n        try {\r\n          this.serverProcess.kill();\r\n          this.serverProcess = null;\r\n        } catch (killError) {\r\n          console.error('[ServerManager] Force stop failed:', killError);\r\n        }\r\n      }\r\n      \r\n      this.serverStatus = 'unavailable';\r\n      \r\n      return { \r\n        success: false, \r\n        error: error.message,\r\n        forceStopped: this.serverProcess === null\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make HTTP request to server with timeout and error handling\r\n   */\r\n  async makeRequest(endpoint, options = {}) {\r\n    const {\r\n      method = 'GET',\r\n      body = null,\r\n      headers = {},\r\n      timeout = 10000\r\n    } = options;\r\n    \r\n    const url = `${this.serverUrl}${endpoint}`;\r\n    const requestStart = performance.now();\r\n    \r\n    try {\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n      \r\n      const response = await fetch(url, {\r\n        method,\r\n        body: body ? JSON.stringify(body) : null,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...headers\r\n        },\r\n        signal: controller.signal\r\n      });\r\n      \r\n      clearTimeout(timeoutId);\r\n      \r\n      const responseTime = performance.now() - requestStart;\r\n      this.updatePerformanceMetrics(responseTime, response.ok);\r\n      \r\n      return response;\r\n      \r\n    } catch (error) {\r\n      const responseTime = performance.now() - requestStart;\r\n      this.updatePerformanceMetrics(responseTime, false);\r\n      \r\n      if (error.name === 'AbortError') {\r\n        throw new Error(`Request timeout after ${timeout}ms`);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update performance metrics\r\n   */\r\n  updatePerformanceMetrics(responseTime, success) {\r\n    if (success) {\r\n      this.performanceMetrics.successfulRequests++;\r\n    } else {\r\n      this.performanceMetrics.failedRequests++;\r\n    }\r\n    \r\n    const totalRequests = this.performanceMetrics.successfulRequests + this.performanceMetrics.failedRequests;\r\n    this.performanceMetrics.avgResponseTime = (\r\n      (this.performanceMetrics.avgResponseTime * (totalRequests - 1) + responseTime) / totalRequests\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Run accuracy test with automatic server management\r\n   */\r\n  async runAccuracyTestWithServerManager(accuracyTester, options = {}) {\r\n    const {\r\n      preferServer = true,\r\n      fallbackToBrowser = true,\r\n      progressCallback = null\r\n    } = options;\r\n    \r\n    let useServer = false;\r\n    let serverInfo = null;\r\n    \r\n    // Try to use server if preferred\r\n    if (preferServer) {\r\n      console.log('[ServerManager] Attempting to use server for accuracy testing...');\r\n      \r\n      // Detect existing server\r\n      const detection = await this.detectServer();\r\n      \r\n      if (detection.available) {\r\n        useServer = true;\r\n        serverInfo = detection;\r\n        showSuccess('Using Performance Server', 'Enhanced accuracy testing with server acceleration');\r\n      } else if (this.options.autoLaunch && detection.canLaunch) {\r\n        // Try to launch server\r\n        const launch = await this.launchServer();\r\n        if (launch.success) {\r\n          useServer = true;\r\n          serverInfo = launch;\r\n        }\r\n      }\r\n      \r\n      if (!useServer && !fallbackToBrowser) {\r\n        throw new Error('Server not available and browser fallback disabled');\r\n      } else if (!useServer) {\r\n        showWarning('Using Browser Mode', 'Server not available, falling back to browser-based testing');\r\n      }\r\n    }\r\n    \r\n    try {\r\n      let results;\r\n      \r\n      if (useServer) {\r\n        // Run server-accelerated testing\r\n        results = await this.runServerAccuracyTest(accuracyTester, options, progressCallback);\r\n      } else {\r\n        // Run browser-based testing\r\n        results = await accuracyTester.runAccuracyTest(progressCallback);\r\n      }\r\n      \r\n      // Add performance metadata\r\n      results.performanceInfo = {\r\n        usedServer: useServer,\r\n        serverInfo: serverInfo,\r\n        executionEnvironment: useServer ? 'server' : 'browser',\r\n        performanceMetrics: { ...this.performanceMetrics }\r\n      };\r\n      \r\n      return results;\r\n      \r\n    } catch (error) {\r\n      // If server test failed and we have fallback, try browser\r\n      if (useServer && fallbackToBrowser) {\r\n        console.warn('[ServerManager] Server test failed, falling back to browser:', error.message);\r\n        showWarning('Server Failed, Using Browser', 'Falling back to browser-based accuracy testing');\r\n        \r\n        const results = await accuracyTester.runAccuracyTest(progressCallback);\r\n        results.performanceInfo = {\r\n          usedServer: false,\r\n          serverFallback: true,\r\n          serverError: error.message,\r\n          executionEnvironment: 'browser'\r\n        };\r\n        \r\n        return results;\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run accuracy test using server\r\n   */\r\n  async runServerAccuracyTest(accuracyTester, options, progressCallback) {\r\n    console.log('[ServerManager] Running server-accelerated accuracy test...');\r\n    \r\n    try {\r\n      // Prepare test configuration\r\n      const testConfig = {\r\n        historicalData: accuracyTester.historicalData,\r\n        options: accuracyTester.options,\r\n        methodWeights: accuracyTester.methodWeights,\r\n        testOptions: options\r\n      };\r\n      \r\n      // Start server-side accuracy test\r\n      const response = await this.makeRequest('/accuracy-test', {\r\n        method: 'POST',\r\n        body: testConfig,\r\n        timeout: 300000 // 5 minute timeout for large tests\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || `Server error: ${response.status}`);\r\n      }\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.jobId) {\r\n        // Long-running job, poll for results\r\n        return await this.pollForResults(result.jobId, progressCallback);\r\n      } else {\r\n        // Immediate result\r\n        return result;\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('[ServerManager] Server accuracy test failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Poll server for long-running test results\r\n   */\r\n  async pollForResults(jobId, progressCallback) {\r\n    const maxPollTime = 600000; // 10 minutes max\r\n    const pollInterval = 2000;   // 2 second intervals\r\n    const startTime = Date.now();\r\n    \r\n    while (Date.now() - startTime < maxPollTime) {\r\n      try {\r\n        const response = await this.makeRequest(`/accuracy-test/${jobId}`, {\r\n          method: 'GET',\r\n          timeout: 10000\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`Polling failed: ${response.status}`);\r\n        }\r\n        \r\n        const status = await response.json();\r\n        \r\n        if (status.completed) {\r\n          return status.results;\r\n        } else if (status.error) {\r\n          throw new Error(status.error);\r\n        } else if (status.progress && progressCallback) {\r\n          progressCallback({\r\n            ...status.progress,\r\n            source: 'server',\r\n            jobId: jobId\r\n          });\r\n        }\r\n        \r\n        // Wait before next poll\r\n        await new Promise(resolve => setTimeout(resolve, pollInterval));\r\n        \r\n      } catch (error) {\r\n        console.error('[ServerManager] Polling error:', error);\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    throw new Error('Server accuracy test timed out');\r\n  }\r\n\r\n  /**\r\n   * Get server status and capabilities\r\n   */\r\n  async getServerInfo() {\r\n    if (this.serverStatus === 'unknown' || this.serverStatus === 'unavailable') {\r\n      const detection = await this.detectServer();\r\n      return detection;\r\n    }\r\n    \r\n    return {\r\n      available: this.serverStatus === 'running' || this.serverStatus === 'available',\r\n      status: this.serverStatus,\r\n      capabilities: this.serverCapabilities,\r\n      lastHealthCheck: this.lastHealthCheck,\r\n      performanceMetrics: { ...this.performanceMetrics }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Recommend performance mode based on dataset size and capabilities\r\n   */\r\n  recommendPerformanceMode(datasetSize, testComplexity = 'medium') {\r\n    const recommendations = {\r\n      useServer: false,\r\n      reason: '',\r\n      expectedSpeedup: 1,\r\n      memoryRecommendation: 'sufficient',\r\n      alternatives: []\r\n    };\r\n    \r\n    // Dataset size thresholds\r\n    const LARGE_DATASET = 500;\r\n    const VERY_LARGE_DATASET = 1000;\r\n    \r\n    // Complexity factors\r\n    const complexityMultipliers = {\r\n      'low': 1,\r\n      'medium': 2,\r\n      'high': 4,\r\n      'maximum': 8\r\n    };\r\n    \r\n    const complexityFactor = complexityMultipliers[testComplexity] || 2;\r\n    const effectiveComplexity = datasetSize * complexityFactor;\r\n    \r\n    if (effectiveComplexity > VERY_LARGE_DATASET * 4) {\r\n      recommendations.useServer = true;\r\n      recommendations.reason = 'Very large dataset with high complexity requires server acceleration';\r\n      recommendations.expectedSpeedup = 5;\r\n    } else if (effectiveComplexity > LARGE_DATASET * 2) {\r\n      recommendations.useServer = true;\r\n      recommendations.reason = 'Large dataset benefits significantly from server processing';\r\n      recommendations.expectedSpeedup = 3;\r\n    } else if (datasetSize > LARGE_DATASET) {\r\n      recommendations.useServer = true;\r\n      recommendations.reason = 'Moderate dataset size, server provides better performance';\r\n      recommendations.expectedSpeedup = 2;\r\n    } else {\r\n      recommendations.reason = 'Dataset size suitable for browser processing';\r\n      recommendations.alternatives.push('Consider server for faster results on repeated testing');\r\n    }\r\n    \r\n    // Memory recommendations\r\n    if (effectiveComplexity > VERY_LARGE_DATASET * 2) {\r\n      recommendations.memoryRecommendation = 'high'; // 8GB+ recommended\r\n    } else if (effectiveComplexity > LARGE_DATASET) {\r\n      recommendations.memoryRecommendation = 'medium'; // 4GB+ recommended\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Get performance comparison between browser and server\r\n   */\r\n  getPerformanceComparison() {\r\n    return {\r\n      browser: {\r\n        pros: [\r\n          'No setup required',\r\n          'Works offline',\r\n          'Data stays local',\r\n          'No additional dependencies'\r\n        ],\r\n        cons: [\r\n          'Limited CPU utilization',\r\n          'Memory constraints',\r\n          'May block UI on large datasets',\r\n          'Slower bootstrap iterations'\r\n        ],\r\n        recommendedFor: 'Datasets under 500 draws, casual testing'\r\n      },\r\n      server: {\r\n        pros: [\r\n          'Full CPU utilization (all cores)',\r\n          'No memory constraints',\r\n          'Background processing',\r\n          'Faster bootstrap sampling',\r\n          'Parallel method testing'\r\n        ],\r\n        cons: [\r\n          'Requires server setup',\r\n          'Additional complexity',\r\n          'May require Node.js installation'\r\n        ],\r\n        recommendedFor: 'Datasets over 500 draws, intensive testing, repeated analysis'\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in other modules\r\nexport default ServerManager;\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.ServerManager = ServerManager;\r\n}", "/**\r\n * ENHANCED ACCURACY TESTING FRAMEWORK\r\n * Version: 1.0.0 | Created: 2025-09-04\r\n * \r\n * Advanced split testing with walk-forward validation and adaptive learning\r\n */\r\n\r\nimport { PositionBasedPredictor } from './confidence-predictor.js';\r\nimport { calculateEnergy } from './utils.js';\r\nimport state from './state.js';\r\n\r\n/**\r\n * Enhanced accuracy tester with walk-forward validation and adaptive learning\r\n */\r\nexport class EnhancedAccuracyTester {\r\n  constructor(historicalData, options = {}) {\r\n    this.historicalData = historicalData.filter(draw => \r\n      draw.whiteBalls && draw.whiteBalls.length === 5 && draw.powerball\r\n    );\r\n    \r\n    this.options = {\r\n      minTrainingSize: options.minTrainingSize || 100,\r\n      testWindowSize: options.testWindowSize || 50,\r\n      stepSize: options.stepSize || 10,\r\n      maxValidationPeriods: options.maxValidationPeriods || 20,\r\n      bootstrapIterations: options.bootstrapIterations || 200,\r\n      confidenceLevel: options.confidenceLevel || 0.95,\r\n      includeEnsemble: options.includeEnsemble || true,\r\n      adaptiveWeighting: options.adaptiveWeighting || true,\r\n      ...options\r\n    };\r\n    \r\n    this.methods = new Map();\r\n    this.accuracyHistory = [];\r\n    this.methodWeights = {\r\n      confidence: 0.25,\r\n      energy: 0.25, \r\n      frequency: 0.25,\r\n      lstm: 0.25\r\n    };\r\n    \r\n    this.isRunning = false;\r\n    this.currentProgress = 0;\r\n    \r\n    this.initializeMethods();\r\n  }\r\n\r\n  /**\r\n   * Initialize prediction methods for testing\r\n   */\r\n  initializeMethods() {\r\n    // Confidence interval method\r\n    this.methods.set('confidence', {\r\n      name: 'Confidence Intervals',\r\n      predict: async (trainingData, options = {}) => {\r\n        const predictor = new PositionBasedPredictor(trainingData);\r\n        const predictions = await predictor.generatePredictionWithConfidenceIntervals({\r\n          confidenceLevel: options.confidenceLevel || 0.95,\r\n          method: 'bootstrap'\r\n        });\r\n        \r\n        return {\r\n          whiteBalls: predictions.slice(0, 5).map(p => p.prediction),\r\n          powerball: predictions[5].prediction,\r\n          confidence: options.confidenceLevel || 0.95,\r\n          method: 'confidence',\r\n          intervals: predictions\r\n        };\r\n      },\r\n      weight: this.methodWeights.confidence,\r\n      accuracy: 0.5 // Initial placeholder\r\n    });\r\n\r\n    // Energy signature method  \r\n    this.methods.set('energy', {\r\n      name: 'Energy Signature',\r\n      predict: async (trainingData, options = {}) => {\r\n        const weights = options.energyWeights || {\r\n          prime: 0.3, digitalRoot: 0.2, mod5: 0.2, gridPosition: 0.3\r\n        };\r\n        \r\n        const allNumbers = [...new Set(trainingData.flatMap(d => d.whiteBalls))];\r\n        const energyData = calculateEnergy(allNumbers, weights);\r\n        \r\n        const topEnergy = energyData\r\n          .sort((a, b) => b.energy - a.energy)\r\n          .slice(0, 5)\r\n          .map(item => item.number);\r\n          \r\n        return {\r\n          whiteBalls: topEnergy,\r\n          powerball: this.predictPowerball(trainingData),\r\n          confidence: 0.70,\r\n          method: 'energy',\r\n          energyScores: energyData\r\n        };\r\n      },\r\n      weight: this.methodWeights.energy,\r\n      accuracy: 0.5\r\n    });\r\n\r\n    // Frequency analysis method\r\n    this.methods.set('frequency', {\r\n      name: 'Frequency Analysis',\r\n      predict: async (trainingData, options = {}) => {\r\n        const lookbackPeriod = options.lookbackPeriod || 100;\r\n        const recentData = trainingData.slice(-lookbackPeriod);\r\n        \r\n        const frequency = new Array(70).fill(0);\r\n        recentData.forEach(draw => {\r\n          draw.whiteBalls.forEach(num => {\r\n            if (num >= 1 && num <= 69) frequency[num]++;\r\n          });\r\n        });\r\n        \r\n        const topFrequent = frequency\r\n          .map((count, number) => ({ number, count, frequency: count / recentData.length }))\r\n          .filter(item => item.number >= 1 && item.number <= 69)\r\n          .sort((a, b) => b.count - a.count)\r\n          .slice(0, 5)\r\n          .map(item => item.number);\r\n          \r\n        return {\r\n          whiteBalls: topFrequent,\r\n          powerball: this.predictPowerball(trainingData),\r\n          confidence: 0.60,\r\n          method: 'frequency',\r\n          frequencies: frequency\r\n        };\r\n      },\r\n      weight: this.methodWeights.frequency,\r\n      accuracy: 0.5\r\n    });\r\n\r\n    // LSTM placeholder (would integrate with existing ML worker)\r\n    this.methods.set('lstm', {\r\n      name: 'LSTM Neural Network',\r\n      predict: async (trainingData, options = {}) => {\r\n        // This would integrate with the existing ML worker\r\n        // For now, return a simple pattern-based prediction\r\n        const recent = trainingData.slice(-10);\r\n        const avgNumbers = [0, 0, 0, 0, 0];\r\n        \r\n        recent.forEach(draw => {\r\n          const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n          sorted.forEach((num, idx) => {\r\n            avgNumbers[idx] += num;\r\n          });\r\n        });\r\n        \r\n        const predicted = avgNumbers.map(sum => \r\n          Math.round(sum / recent.length)\r\n        ).sort((a, b) => a - b);\r\n        \r\n        return {\r\n          whiteBalls: predicted,\r\n          powerball: this.predictPowerball(trainingData),\r\n          confidence: 0.65,\r\n          method: 'lstm',\r\n          neuralPattern: 'temporal-average'\r\n        };\r\n      },\r\n      weight: this.methodWeights.lstm,\r\n      accuracy: 0.5\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Simple powerball prediction helper\r\n   */\r\n  predictPowerball(trainingData) {\r\n    const recentPowerballs = trainingData.slice(-20).map(d => d.powerball);\r\n    const frequency = new Array(27).fill(0);\r\n    recentPowerballs.forEach(pb => frequency[pb]++);\r\n    \r\n    const maxFreq = Math.max(...frequency);\r\n    const mostFrequent = frequency.findIndex(f => f === maxFreq);\r\n    \r\n    return mostFrequent || Math.floor(Math.random() * 26) + 1;\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive walk-forward validation\r\n   */\r\n  async runAccuracyTest(progressCallback = null) {\r\n    if (this.isRunning) {\r\n      throw new Error('Accuracy test is already running');\r\n    }\r\n\r\n    if (this.historicalData.length < this.options.minTrainingSize + this.options.testWindowSize) {\r\n      throw new Error(`Insufficient data. Need at least ${this.options.minTrainingSize + this.options.testWindowSize} draws`);\r\n    }\r\n\r\n    this.isRunning = true;\r\n    this.currentProgress = 0;\r\n    \r\n    const results = {\r\n      methods: new Map(),\r\n      ensemble: null,\r\n      summary: {},\r\n      validationPeriods: [],\r\n      totalPredictions: 0,\r\n      startTime: new Date(),\r\n      endTime: null\r\n    };\r\n\r\n    try {\r\n      console.log(`Starting enhanced accuracy test with ${this.methods.size} methods`);\r\n      \r\n      // Calculate validation windows\r\n      const validationWindows = this.generateValidationWindows();\r\n      const totalSteps = validationWindows.length * this.methods.size;\r\n      let currentStep = 0;\r\n\r\n      // Test each method across all validation windows\r\n      for (const [methodName, method] of this.methods) {\r\n        console.log(`Testing method: ${methodName}`);\r\n        \r\n        const methodResults = {\r\n          name: method.name,\r\n          predictions: [],\r\n          accuracy: {},\r\n          performance: {},\r\n          validationWindows: validationWindows.length\r\n        };\r\n\r\n        // Walk-forward validation for this method\r\n        for (const window of validationWindows) {\r\n          const windowPredictions = await this.testMethodOnWindow(\r\n            method, window, methodName\r\n          );\r\n          methodResults.predictions.push(...windowPredictions);\r\n          \r\n          currentStep++;\r\n          this.currentProgress = (currentStep / totalSteps) * 100;\r\n          \r\n          if (progressCallback) {\r\n            progressCallback({\r\n              progress: this.currentProgress,\r\n              currentMethod: methodName,\r\n              window: window.period,\r\n              totalWindows: validationWindows.length\r\n            });\r\n          }\r\n          \r\n          // Yield control to prevent UI blocking\r\n          await new Promise(resolve => setTimeout(resolve, 1));\r\n        }\r\n\r\n        // Calculate comprehensive accuracy metrics for this method\r\n        methodResults.accuracy = this.calculateComprehensiveAccuracy(methodResults.predictions);\r\n        methodResults.performance = this.calculatePerformanceMetrics(methodResults.predictions);\r\n        \r\n        results.methods.set(methodName, methodResults);\r\n        results.totalPredictions += methodResults.predictions.length;\r\n\r\n        // Update method weights based on performance (adaptive learning)\r\n        if (this.options.adaptiveWeighting) {\r\n          this.updateMethodWeight(methodName, methodResults.accuracy.overallScore);\r\n        }\r\n      }\r\n\r\n      // Generate ensemble predictions if enabled\r\n      if (this.options.includeEnsemble) {\r\n        results.ensemble = await this.generateEnsembleResults(validationWindows);\r\n      }\r\n\r\n      // Generate comprehensive summary\r\n      results.summary = this.generateComprehensiveSummary(results);\r\n      results.endTime = new Date();\r\n      \r\n      // Store results for future adaptive learning\r\n      this.accuracyHistory.push({\r\n        timestamp: new Date(),\r\n        results: results.summary,\r\n        methodWeights: { ...this.methodWeights }\r\n      });\r\n\r\n      console.log('Enhanced accuracy test completed successfully');\r\n      return results;\r\n\r\n    } catch (error) {\r\n      console.error('Enhanced accuracy test failed:', error);\r\n      throw error;\r\n    } finally {\r\n      this.isRunning = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate validation windows for walk-forward testing\r\n   */\r\n  generateValidationWindows() {\r\n    const windows = [];\r\n    const { minTrainingSize, testWindowSize, stepSize, maxValidationPeriods } = this.options;\r\n    \r\n    let currentStart = 0;\r\n    let period = 0;\r\n    \r\n    while (\r\n      currentStart + minTrainingSize + testWindowSize <= this.historicalData.length &&\r\n      period < maxValidationPeriods\r\n    ) {\r\n      const trainingEnd = currentStart + minTrainingSize;\r\n      const testEnd = trainingEnd + testWindowSize;\r\n      \r\n      windows.push({\r\n        period,\r\n        trainingStart: currentStart,\r\n        trainingEnd,\r\n        testStart: trainingEnd,\r\n        testEnd,\r\n        trainingData: this.historicalData.slice(currentStart, trainingEnd),\r\n        testData: this.historicalData.slice(trainingEnd, testEnd)\r\n      });\r\n      \r\n      currentStart += stepSize;\r\n      period++;\r\n    }\r\n    \r\n    return windows;\r\n  }\r\n\r\n  /**\r\n   * Test a specific method on a validation window\r\n   */\r\n  async testMethodOnWindow(method, window, methodName) {\r\n    const predictions = [];\r\n    \r\n    // Generate predictions for each draw in the test window\r\n    for (let i = 0; i < window.testData.length; i++) {\r\n      const actualDraw = window.testData[i];\r\n      const trainingUpToPoint = [\r\n        ...window.trainingData,\r\n        ...window.testData.slice(0, i)\r\n      ];\r\n      \r\n      try {\r\n        const prediction = await method.predict(trainingUpToPoint, {\r\n          confidenceLevel: this.options.confidenceLevel,\r\n          bootstrapIterations: this.options.bootstrapIterations\r\n        });\r\n\r\n        const predictionResult = {\r\n          period: window.period,\r\n          drawIndex: i,\r\n          method: methodName,\r\n          predicted: prediction,\r\n          actual: actualDraw,\r\n          metrics: this.calculateDrawMetrics(prediction, actualDraw),\r\n          timestamp: actualDraw.date\r\n        };\r\n\r\n        predictions.push(predictionResult);\r\n        \r\n      } catch (error) {\r\n        console.warn(`Prediction failed for ${methodName} on draw ${i}:`, error);\r\n        // Continue with other predictions\r\n      }\r\n    }\r\n    \r\n    return predictions;\r\n  }\r\n\r\n  /**\r\n   * Calculate metrics for a single prediction vs actual draw\r\n   */\r\n  calculateDrawMetrics(prediction, actual) {\r\n    const whiteBallMatches = this.countMatches(prediction.whiteBalls, actual.whiteBalls);\r\n    const powerballMatch = prediction.powerball === actual.powerball;\r\n    \r\n    // Prize tier calculation (Powerball rules)\r\n    const prizeTier = this.calculatePrizeTier(whiteBallMatches, powerballMatch);\r\n    \r\n    // Position accuracy (for sorted balls)\r\n    const sortedPredicted = [...prediction.whiteBalls].sort((a, b) => a - b);\r\n    const sortedActual = [...actual.whiteBalls].sort((a, b) => a - b);\r\n    const positionErrors = sortedPredicted.map((pred, idx) => \r\n      Math.abs(pred - sortedActual[idx])\r\n    );\r\n    \r\n    // Confidence interval accuracy (if available)\r\n    let confidenceAccuracy = null;\r\n    if (prediction.intervals) {\r\n      confidenceAccuracy = this.assessConfidenceAccuracy(prediction.intervals, actual);\r\n    }\r\n    \r\n    return {\r\n      whiteBallMatches,\r\n      powerballMatch,\r\n      prizeTier,\r\n      positionErrors,\r\n      meanAbsoluteError: positionErrors.reduce((sum, err) => sum + err, 0) / 5,\r\n      confidenceAccuracy,\r\n      isWinningTicket: prizeTier !== null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Count matching numbers between predicted and actual\r\n   */\r\n  countMatches(predicted, actual) {\r\n    return predicted.filter(num => actual.includes(num)).length;\r\n  }\r\n\r\n  /**\r\n   * Calculate Powerball prize tier\r\n   */\r\n  calculatePrizeTier(whiteBallMatches, powerballMatch) {\r\n    if (whiteBallMatches === 5 && powerballMatch) return 'jackpot';\r\n    if (whiteBallMatches === 5) return 'match5';\r\n    if (whiteBallMatches === 4 && powerballMatch) return 'match4plus';\r\n    if (whiteBallMatches === 4) return 'match4';\r\n    if (whiteBallMatches === 3 && powerballMatch) return 'match3plus';\r\n    if (whiteBallMatches === 3) return 'match3';\r\n    if (whiteBallMatches === 2 && powerballMatch) return 'match2plus';\r\n    if (whiteBallMatches === 1 && powerballMatch) return 'match1plus';\r\n    if (powerballMatch) return 'powerball';\r\n    return null; // No prize\r\n  }\r\n\r\n  /**\r\n   * Assess confidence interval accuracy\r\n   */\r\n  assessConfidenceAccuracy(intervals, actual) {\r\n    const sortedActual = [...actual.whiteBalls].sort((a, b) => a - b);\r\n    let withinInterval = 0;\r\n    \r\n    intervals.slice(0, 5).forEach((interval, idx) => {\r\n      const actualValue = sortedActual[idx];\r\n      if (actualValue >= interval.confidenceInterval.lower && \r\n          actualValue <= interval.confidenceInterval.upper) {\r\n        withinInterval++;\r\n      }\r\n    });\r\n    \r\n    return {\r\n      withinInterval,\r\n      totalPositions: 5,\r\n      accuracy: withinInterval / 5,\r\n      expectedAccuracy: this.options.confidenceLevel\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate comprehensive accuracy metrics\r\n   */\r\n  calculateComprehensiveAccuracy(predictions) {\r\n    if (predictions.length === 0) return {};\r\n    \r\n    const metrics = predictions.map(p => p.metrics);\r\n    \r\n    // Match-based accuracy\r\n    const matchCounts = metrics.map(m => m.whiteBallMatches);\r\n    const powerballHits = metrics.filter(m => m.powerballMatch).length;\r\n    \r\n    // Prize tier distribution\r\n    const prizeTiers = {};\r\n    metrics.forEach(m => {\r\n      if (m.prizeTier) {\r\n        prizeTiers[m.prizeTier] = (prizeTiers[m.prizeTier] || 0) + 1;\r\n      }\r\n    });\r\n    \r\n    // Position accuracy\r\n    const allPositionErrors = metrics.flatMap(m => m.positionErrors);\r\n    const meanAbsoluteErrors = metrics.map(m => m.meanAbsoluteError);\r\n    \r\n    // Confidence interval accuracy\r\n    const confidenceAccuracies = metrics\r\n      .map(m => m.confidenceAccuracy)\r\n      .filter(ca => ca !== null);\r\n    \r\n    // Overall performance score\r\n    const hitRate = metrics.filter(m => m.whiteBallMatches >= 3).length / metrics.length;\r\n    const avgMatches = matchCounts.reduce((sum, matches) => sum + matches, 0) / matchCounts.length;\r\n    const winRate = metrics.filter(m => m.isWinningTicket).length / metrics.length;\r\n    const avgMAE = meanAbsoluteErrors.reduce((sum, mae) => sum + mae, 0) / meanAbsoluteErrors.length;\r\n    \r\n    // Weighted overall score (higher is better)\r\n    const overallScore = (\r\n      (avgMatches / 5) * 0.4 +        // 40% weight on average matches\r\n      hitRate * 0.3 +                 // 30% weight on hit rate (3+ matches)\r\n      winRate * 0.2 +                 // 20% weight on any prize wins\r\n      (1 - avgMAE / 35) * 0.1         // 10% weight on position accuracy\r\n    );\r\n    \r\n    return {\r\n      totalPredictions: predictions.length,\r\n      averageMatches: avgMatches,\r\n      hitRate: hitRate,\r\n      powerballHitRate: powerballHits / predictions.length,\r\n      winRate: winRate,\r\n      prizeTierDistribution: prizeTiers,\r\n      positionAccuracy: {\r\n        meanAbsoluteError: avgMAE,\r\n        allErrors: allPositionErrors\r\n      },\r\n      confidenceCalibration: confidenceAccuracies.length > 0 ? {\r\n        averageAccuracy: confidenceAccuracies.reduce((sum, ca) => sum + ca.accuracy, 0) / confidenceAccuracies.length,\r\n        expectedAccuracy: this.options.confidenceLevel,\r\n        calibrationError: Math.abs(\r\n          (confidenceAccuracies.reduce((sum, ca) => sum + ca.accuracy, 0) / confidenceAccuracies.length) - \r\n          this.options.confidenceLevel\r\n        )\r\n      } : null,\r\n      overallScore: overallScore,\r\n      consistency: this.calculateConsistency(matchCounts)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate consistency metrics\r\n   */\r\n  calculateConsistency(values) {\r\n    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - mean, 2), 0) / values.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    \r\n    return {\r\n      mean,\r\n      variance,\r\n      standardDeviation: stdDev,\r\n      coefficientOfVariation: stdDev / mean,\r\n      consistencyScore: Math.max(0, 1 - (stdDev / mean))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate performance metrics\r\n   */\r\n  calculatePerformanceMetrics(predictions) {\r\n    // Expected value calculation based on prize tiers\r\n    const prizeValues = {\r\n      'jackpot': 100000000,    // $100M average\r\n      'match5': 1000000,       // $1M\r\n      'match4plus': 50000,     // $50K\r\n      'match4': 100,           // $100\r\n      'match3plus': 100,       // $100\r\n      'match3': 7,             // $7\r\n      'match2plus': 7,         // $7\r\n      'match1plus': 4,         // $4\r\n      'powerball': 4           // $4\r\n    };\r\n    \r\n    let totalExpectedValue = 0;\r\n    let totalCost = predictions.length * 2; // $2 per ticket\r\n    \r\n    predictions.forEach(pred => {\r\n      const tier = pred.metrics.prizeTier;\r\n      if (tier && prizeValues[tier]) {\r\n        totalExpectedValue += prizeValues[tier];\r\n      }\r\n    });\r\n    \r\n    const roi = (totalExpectedValue - totalCost) / totalCost;\r\n    const profitability = totalExpectedValue / totalCost;\r\n    \r\n    return {\r\n      totalCost,\r\n      totalExpectedValue,\r\n      roi,\r\n      profitability,\r\n      averageTicketValue: totalExpectedValue / predictions.length,\r\n      breakEvenRate: totalCost / totalExpectedValue\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate ensemble predictions\r\n   */\r\n  async generateEnsembleResults(validationWindows) {\r\n    // This would combine predictions from all methods using adaptive weighting\r\n    const ensemblePredictions = [];\r\n    \r\n    for (const window of validationWindows) {\r\n      for (let i = 0; i < window.testData.length; i++) {\r\n        const actualDraw = window.testData[i];\r\n        const trainingUpToPoint = [...window.trainingData, ...window.testData.slice(0, i)];\r\n        \r\n        // Get predictions from all methods\r\n        const methodPredictions = [];\r\n        for (const [methodName, method] of this.methods) {\r\n          try {\r\n            const prediction = await method.predict(trainingUpToPoint);\r\n            methodPredictions.push({\r\n              method: methodName,\r\n              weight: method.weight,\r\n              prediction\r\n            });\r\n          } catch (error) {\r\n            console.warn(`Ensemble prediction failed for ${methodName}:`, error);\r\n          }\r\n        }\r\n        \r\n        // Combine using weighted voting\r\n        const ensemblePrediction = this.combineWeightedPredictions(methodPredictions);\r\n        \r\n        ensemblePredictions.push({\r\n          period: window.period,\r\n          drawIndex: i,\r\n          method: 'ensemble',\r\n          predicted: ensemblePrediction,\r\n          actual: actualDraw,\r\n          metrics: this.calculateDrawMetrics(ensemblePrediction, actualDraw),\r\n          contributingMethods: methodPredictions.length\r\n        });\r\n      }\r\n    }\r\n    \r\n    return {\r\n      predictions: ensemblePredictions,\r\n      accuracy: this.calculateComprehensiveAccuracy(ensemblePredictions),\r\n      weights: { ...this.methodWeights }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Combine predictions using weighted voting\r\n   */\r\n  combineWeightedPredictions(methodPredictions) {\r\n    // Weighted voting for white balls\r\n    const ballVotes = new Array(70).fill(0).map(() => new Map());\r\n    const powerballVotes = new Map();\r\n    \r\n    methodPredictions.forEach(({ prediction, weight }) => {\r\n      // Vote for white balls\r\n      prediction.whiteBalls.forEach(ball => {\r\n        ballVotes[ball] = (ballVotes[ball] || 0) + weight;\r\n      });\r\n      \r\n      // Vote for powerball\r\n      powerballVotes.set(prediction.powerball, \r\n        (powerballVotes.get(prediction.powerball) || 0) + weight\r\n      );\r\n    });\r\n    \r\n    // Select top 5 voted white balls\r\n    const whiteBallScores = ballVotes\r\n      .map((votes, ball) => ({ ball, votes }))\r\n      .filter(item => item.votes > 0 && item.ball >= 1 && item.ball <= 69)\r\n      .sort((a, b) => b.votes - a.votes);\r\n    \r\n    const selectedWhiteBalls = whiteBallScores\r\n      .slice(0, 5)\r\n      .map(item => item.ball)\r\n      .sort((a, b) => a - b);\r\n    \r\n    // Select highest voted powerball\r\n    const selectedPowerball = Array.from(powerballVotes.entries())\r\n      .sort(([,a], [,b]) => b - a)[0]?.[0] || 1;\r\n    \r\n    return {\r\n      whiteBalls: selectedWhiteBalls,\r\n      powerball: selectedPowerball,\r\n      confidence: 0.75,\r\n      method: 'ensemble',\r\n      votingWeights: { ...this.methodWeights }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update method weight based on performance (adaptive learning)\r\n   */\r\n  updateMethodWeight(methodName, accuracyScore) {\r\n    const currentWeight = this.methodWeights[methodName];\r\n    const learningRate = 0.1;\r\n    \r\n    // Adjust weight based on performance relative to average\r\n    const avgScore = Object.values(this.methodWeights).reduce((sum, w) => sum + w, 0) / 4;\r\n    const adjustment = (accuracyScore - avgScore) * learningRate;\r\n    \r\n    const newWeight = Math.max(0.05, Math.min(0.7, currentWeight + adjustment));\r\n    this.methodWeights[methodName] = newWeight;\r\n    \r\n    // Normalize weights to sum to 1\r\n    const totalWeight = Object.values(this.methodWeights).reduce((sum, w) => sum + w, 0);\r\n    Object.keys(this.methodWeights).forEach(method => {\r\n      this.methodWeights[method] /= totalWeight;\r\n    });\r\n    \r\n    // Update method weight in the methods map\r\n    if (this.methods.has(methodName)) {\r\n      this.methods.get(methodName).weight = this.methodWeights[methodName];\r\n      this.methods.get(methodName).accuracy = accuracyScore;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive summary\r\n   */\r\n  generateComprehensiveSummary(results) {\r\n    const methodSummaries = [];\r\n    let bestMethod = null;\r\n    let bestScore = 0;\r\n    \r\n    for (const [methodName, methodResult] of results.methods) {\r\n      const summary = {\r\n        name: methodName,\r\n        displayName: methodResult.name,\r\n        overallScore: methodResult.accuracy.overallScore || 0,\r\n        averageMatches: methodResult.accuracy.averageMatches || 0,\r\n        hitRate: methodResult.accuracy.hitRate || 0,\r\n        winRate: methodResult.accuracy.winRate || 0,\r\n        consistency: methodResult.accuracy.consistency?.consistencyScore || 0,\r\n        weight: this.methodWeights[methodName] || 0,\r\n        totalPredictions: methodResult.predictions.length\r\n      };\r\n      \r\n      methodSummaries.push(summary);\r\n      \r\n      if (summary.overallScore > bestScore) {\r\n        bestScore = summary.overallScore;\r\n        bestMethod = summary;\r\n      }\r\n    }\r\n    \r\n    // Sort by overall score\r\n    methodSummaries.sort((a, b) => b.overallScore - a.overallScore);\r\n    \r\n    return {\r\n      bestMethod,\r\n      methodRanking: methodSummaries,\r\n      ensemble: results.ensemble ? {\r\n        overallScore: results.ensemble.accuracy.overallScore || 0,\r\n        averageMatches: results.ensemble.accuracy.averageMatches || 0,\r\n        hitRate: results.ensemble.accuracy.hitRate || 0\r\n      } : null,\r\n      totalPredictions: results.totalPredictions,\r\n      validationPeriods: results.validationPeriods?.length || 0,\r\n      testDuration: results.endTime ? results.endTime - results.startTime : 0,\r\n      adaptiveWeights: { ...this.methodWeights },\r\n      keyFindings: this.generateKeyFindings(methodSummaries, results.ensemble)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate key findings from results\r\n   */\r\n  generateKeyFindings(methodSummaries, ensemble) {\r\n    const findings = [];\r\n    \r\n    if (methodSummaries.length > 0) {\r\n      const best = methodSummaries[0];\r\n      findings.push(`Best method: ${best.displayName} (${(best.overallScore * 100).toFixed(1)}% score)`);\r\n      findings.push(`Hit rate: ${(best.hitRate * 100).toFixed(1)}% (3+ matches)`);\r\n      findings.push(`Average matches: ${best.averageMatches.toFixed(2)} per draw`);\r\n    }\r\n    \r\n    if (ensemble && ensemble.overallScore > 0) {\r\n      findings.push(`Ensemble method achieved ${(ensemble.overallScore * 100).toFixed(1)}% overall score`);\r\n    }\r\n    \r\n    const totalPredictions = methodSummaries.reduce((sum, m) => sum + m.totalPredictions, 0);\r\n    findings.push(`Analysis based on ${totalPredictions} total predictions`);\r\n    \r\n    return findings;\r\n  }\r\n\r\n  /**\r\n   * Get current test status\r\n   */\r\n  getStatus() {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      progress: this.currentProgress,\r\n      methodsRegistered: this.methods.size,\r\n      dataSize: this.historicalData.length,\r\n      adaptiveWeights: { ...this.methodWeights },\r\n      hasHistoricalResults: this.accuracyHistory.length > 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Export results for external use\r\n   */\r\n  exportResults(results) {\r\n    return {\r\n      summary: results.summary,\r\n      methodDetails: Array.from(results.methods.entries()).map(([name, data]) => ({\r\n        method: name,\r\n        accuracy: data.accuracy,\r\n        sampleSize: data.predictions.length\r\n      })),\r\n      ensemble: results.ensemble?.accuracy || null,\r\n      exportTimestamp: new Date().toISOString(),\r\n      testParameters: this.options\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in other modules\r\nexport default EnhancedAccuracyTester;\r\n\r\n// Browser compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.EnhancedAccuracyTester = EnhancedAccuracyTester;\r\n}", "/**\r\n * PERFORMANCE MODE UI CONTROLLER\r\n * Version: 1.0.0 | Created: 2025-09-04\r\n * \r\n * User interface for performance mode selection and server management\r\n */\r\n\r\nimport ServerManager from './server-manager.js';\r\nimport EnhancedAccuracyTester from './enhanced-accuracy-tester.js';\r\nimport state from './state.js';\r\nimport { showError, showSuccess, showInfo, showWarning } from './notifications.js';\r\n\r\n/**\r\n * Performance UI controller\r\n */\r\nexport class PerformanceUI {\r\n  constructor() {\r\n    this.serverManager = new ServerManager();\r\n    this.currentAccuracyTest = null;\r\n    this.performanceMode = 'auto'; // auto, browser, server\r\n    this.isTestRunning = false;\r\n    \r\n    this.elements = {\r\n      performancePanel: null,\r\n      modeSelector: null,\r\n      serverStatus: null,\r\n      launchServerBtn: null,\r\n      stopServerBtn: null,\r\n      runAccuracyTestBtn: null,\r\n      testProgress: null,\r\n      testResults: null,\r\n      performanceRecommendation: null\r\n    };\r\n    \r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize performance UI\r\n   */\r\n  init() {\r\n    this.createPerformancePanel();\r\n    this.bindEvents();\r\n    this.subscribeToState();\r\n    \r\n    // Initial server detection\r\n    this.detectServerAsync();\r\n    \r\n    console.log('[PerformanceUI] Initialized successfully');\r\n  }\r\n\r\n  /**\r\n   * Create performance panel HTML\r\n   */\r\n  createPerformancePanel() {\r\n    // Find or create performance panel\r\n    let panel = document.getElementById('performance-panel');\r\n    \r\n    if (!panel) {\r\n      panel = document.createElement('section');\r\n      panel.id = 'performance-panel';\r\n      panel.className = 'panel';\r\n      \r\n      // Insert after optimization panel\r\n      const optimizationPanel = document.getElementById('optimization-panel');\r\n      if (optimizationPanel) {\r\n        optimizationPanel.parentNode.insertBefore(panel, optimizationPanel.nextSibling);\r\n      } else {\r\n        // Fallback: append to panels container\r\n        const panelsContainer = document.querySelector('.panels');\r\n        if (panelsContainer) {\r\n          panelsContainer.appendChild(panel);\r\n        }\r\n      }\r\n    }\r\n    \r\n    panel.innerHTML = `\r\n      <h2>\u26A1 Performance Mode</h2>\r\n      <p class=\"panel-description\">Enhanced accuracy testing with optional server acceleration</p>\r\n      \r\n      <div class=\"performance-controls\">\r\n        <div class=\"performance-mode-selector\">\r\n          <label for=\"performance-mode\">Execution Mode:</label>\r\n          <select id=\"performance-mode\">\r\n            <option value=\"auto\" selected>Auto-Detect (Recommended)</option>\r\n            <option value=\"browser\">Browser Only</option>\r\n            <option value=\"server\">Server Only</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div id=\"server-status\" class=\"server-status\">\r\n          <div class=\"status-indicator\">\r\n            <span class=\"status-dot unknown\"></span>\r\n            <span class=\"status-text\">Checking server availability...</span>\r\n          </div>\r\n          <div class=\"server-info\" style=\"display: none;\"></div>\r\n        </div>\r\n        \r\n        <div class=\"server-controls\">\r\n          <button id=\"launch-server\" class=\"server-btn launch-btn\" style=\"display: none;\">\r\n            \uD83D\uDE80 Launch Performance Server\r\n          </button>\r\n          <button id=\"stop-server\" class=\"server-btn stop-btn\" style=\"display: none;\">\r\n            \u23F9\uFE0F Stop Server\r\n          </button>\r\n          <button id=\"refresh-server\" class=\"server-btn refresh-btn\">\r\n            \uD83D\uDD04 Refresh Status\r\n          </button>\r\n        </div>\r\n        \r\n        <div id=\"performance-recommendation\" class=\"performance-recommendation\" style=\"display: none;\">\r\n          <h4>\uD83D\uDCA1 Performance Recommendation</h4>\r\n          <div class=\"recommendation-content\"></div>\r\n        </div>\r\n        \r\n        <div class=\"accuracy-test-controls\">\r\n          <button id=\"run-enhanced-accuracy-test\" class=\"accuracy-test-btn\" disabled>\r\n            \uD83E\uDDEA Run Enhanced Accuracy Test\r\n          </button>\r\n          <div class=\"test-options\">\r\n            <label>\r\n              <input type=\"checkbox\" id=\"include-ensemble\" checked>\r\n              Include ensemble predictions\r\n            </label>\r\n            <label>\r\n              <input type=\"checkbox\" id=\"adaptive-weighting\" checked>\r\n              Adaptive method weighting\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div id=\"test-progress\" class=\"test-progress\" style=\"display: none;\">\r\n        <div class=\"progress-header\">\r\n          <h4>Testing in Progress...</h4>\r\n          <button id=\"cancel-test\" class=\"cancel-test-btn\">Cancel</button>\r\n        </div>\r\n        <div class=\"progress-bar\">\r\n          <div class=\"progress-fill\" style=\"width: 0%\"></div>\r\n        </div>\r\n        <div class=\"progress-details\">\r\n          <span class=\"current-method\">Initializing...</span>\r\n          <span class=\"progress-text\">0%</span>\r\n        </div>\r\n        <div class=\"performance-info\">\r\n          <span class=\"execution-mode\">Mode: Browser</span>\r\n          <span class=\"elapsed-time\">Elapsed: 00:00</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div id=\"test-results\" class=\"test-results\" style=\"display: none;\">\r\n        <h3>\uD83D\uDCCA Accuracy Test Results</h3>\r\n        <div class=\"results-content\"></div>\r\n      </div>\r\n    `;\r\n    \r\n    // Store element references\r\n    this.elements.performancePanel = panel;\r\n    this.elements.modeSelector = panel.querySelector('#performance-mode');\r\n    this.elements.serverStatus = panel.querySelector('#server-status');\r\n    this.elements.launchServerBtn = panel.querySelector('#launch-server');\r\n    this.elements.stopServerBtn = panel.querySelector('#stop-server');\r\n    this.elements.refreshServerBtn = panel.querySelector('#refresh-server');\r\n    this.elements.runAccuracyTestBtn = panel.querySelector('#run-enhanced-accuracy-test');\r\n    this.elements.testProgress = panel.querySelector('#test-progress');\r\n    this.elements.testResults = panel.querySelector('#test-results');\r\n    this.elements.performanceRecommendation = panel.querySelector('#performance-recommendation');\r\n  }\r\n\r\n  /**\r\n   * Bind event listeners\r\n   */\r\n  bindEvents() {\r\n    // Mode selector\r\n    if (this.elements.modeSelector) {\r\n      this.elements.modeSelector.addEventListener('change', (e) => {\r\n        this.performanceMode = e.target.value;\r\n        this.updateUIState();\r\n      });\r\n    }\r\n    \r\n    // Server controls\r\n    if (this.elements.launchServerBtn) {\r\n      this.elements.launchServerBtn.addEventListener('click', () => this.launchServer());\r\n    }\r\n    \r\n    if (this.elements.stopServerBtn) {\r\n      this.elements.stopServerBtn.addEventListener('click', () => this.stopServer());\r\n    }\r\n    \r\n    if (this.elements.refreshServerBtn) {\r\n      this.elements.refreshServerBtn.addEventListener('click', () => this.refreshServerStatus());\r\n    }\r\n    \r\n    // Accuracy test\r\n    if (this.elements.runAccuracyTestBtn) {\r\n      this.elements.runAccuracyTestBtn.addEventListener('click', () => this.runAccuracyTest());\r\n    }\r\n    \r\n    // Cancel test\r\n    const cancelBtn = this.elements.testProgress?.querySelector('#cancel-test');\r\n    if (cancelBtn) {\r\n      cancelBtn.addEventListener('click', () => this.cancelAccuracyTest());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to state changes\r\n   */\r\n  subscribeToState() {\r\n    state.subscribe('drawsUpdated', (draws) => {\r\n      this.updatePerformanceRecommendation(draws.length);\r\n      this.updateTestButtonState();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Async server detection\r\n   */\r\n  async detectServerAsync() {\r\n    try {\r\n      const serverInfo = await this.serverManager.detectServer();\r\n      this.updateServerStatus(serverInfo);\r\n    } catch (error) {\r\n      console.warn('[PerformanceUI] Server detection failed:', error);\r\n      this.updateServerStatus({ available: false, error: error.message });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update server status display\r\n   */\r\n  updateServerStatus(serverInfo) {\r\n    if (!this.elements.serverStatus) return;\r\n    \r\n    const statusDot = this.elements.serverStatus.querySelector('.status-dot');\r\n    const statusText = this.elements.serverStatus.querySelector('.status-text');\r\n    const serverInfoDiv = this.elements.serverStatus.querySelector('.server-info');\r\n    \r\n    if (serverInfo.available) {\r\n      statusDot.className = 'status-dot available';\r\n      statusText.textContent = 'Performance server available';\r\n      \r\n      serverInfoDiv.style.display = 'block';\r\n      serverInfoDiv.innerHTML = `\r\n        <div class=\"server-capabilities\">\r\n          <strong>Capabilities:</strong>\r\n          <ul>\r\n            <li>CPU Cores: ${serverInfo.performance?.cpuCores || 'N/A'}</li>\r\n            <li>Memory: ${serverInfo.performance?.memoryUsage?.total || 'N/A'}</li>\r\n            <li>Response Time: ${Math.round(serverInfo.performance?.responseTime || 0)}ms</li>\r\n          </ul>\r\n        </div>\r\n      `;\r\n      \r\n      this.elements.launchServerBtn.style.display = 'none';\r\n      this.elements.stopServerBtn.style.display = 'inline-block';\r\n      \r\n    } else {\r\n      statusDot.className = 'status-dot unavailable';\r\n      statusText.textContent = serverInfo.canLaunch ? \r\n        'Server not running (can launch)' : \r\n        'Server not available';\r\n      \r\n      serverInfoDiv.style.display = 'none';\r\n      \r\n      this.elements.launchServerBtn.style.display = serverInfo.canLaunch ? 'inline-block' : 'none';\r\n      this.elements.stopServerBtn.style.display = 'none';\r\n    }\r\n    \r\n    this.updateUIState();\r\n  }\r\n\r\n  /**\r\n   * Update performance recommendation\r\n   */\r\n  updatePerformanceRecommendation(datasetSize) {\r\n    if (!this.elements.performanceRecommendation || !datasetSize) return;\r\n    \r\n    const recommendation = this.serverManager.recommendPerformanceMode(datasetSize, 'medium');\r\n    const content = this.elements.performanceRecommendation.querySelector('.recommendation-content');\r\n    \r\n    content.innerHTML = `\r\n      <div class=\"recommendation-summary\">\r\n        <strong>Dataset Size:</strong> ${datasetSize} draws<br>\r\n        <strong>Recommended Mode:</strong> ${recommendation.useServer ? 'Server' : 'Browser'}<br>\r\n        <strong>Expected Speedup:</strong> ${recommendation.expectedSpeedup}x<br>\r\n        <strong>Reason:</strong> ${recommendation.reason}\r\n      </div>\r\n      ${recommendation.alternatives.length > 0 ? `\r\n        <div class=\"recommendation-alternatives\">\r\n          <strong>Alternatives:</strong>\r\n          <ul>\r\n            ${recommendation.alternatives.map(alt => `<li>${alt}</li>`).join('')}\r\n          </ul>\r\n        </div>\r\n      ` : ''}\r\n    `;\r\n    \r\n    this.elements.performanceRecommendation.style.display = 'block';\r\n    \r\n    // Auto-adjust mode selector based on recommendation\r\n    if (this.performanceMode === 'auto') {\r\n      if (recommendation.useServer && this.serverManager.serverStatus === 'available') {\r\n        this.performanceMode = 'server';\r\n      } else {\r\n        this.performanceMode = 'browser';\r\n      }\r\n      this.updateUIState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Launch server\r\n   */\r\n  async launchServer() {\r\n    try {\r\n      this.elements.launchServerBtn.disabled = true;\r\n      this.elements.launchServerBtn.textContent = '\uD83D\uDE80 Launching...';\r\n      \r\n      const result = await this.serverManager.launchServer();\r\n      \r\n      if (result.success) {\r\n        this.updateServerStatus({\r\n          available: true,\r\n          capabilities: result.capabilities,\r\n          performance: { launchTime: result.launchTime }\r\n        });\r\n      } else {\r\n        showWarning('Server Launch Failed', result.error || 'Unknown error');\r\n        this.updateServerStatus({ available: false, error: result.error });\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('[PerformanceUI] Server launch error:', error);\r\n      showError('Launch Error', error.message);\r\n      this.updateServerStatus({ available: false, error: error.message });\r\n    } finally {\r\n      this.elements.launchServerBtn.disabled = false;\r\n      this.elements.launchServerBtn.textContent = '\uD83D\uDE80 Launch Performance Server';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop server\r\n   */\r\n  async stopServer() {\r\n    try {\r\n      this.elements.stopServerBtn.disabled = true;\r\n      this.elements.stopServerBtn.textContent = '\u23F9\uFE0F Stopping...';\r\n      \r\n      const result = await this.serverManager.stopServer();\r\n      \r\n      if (result.success) {\r\n        this.updateServerStatus({ available: false });\r\n      } else {\r\n        showWarning('Server Stop Failed', result.error || 'Unknown error');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('[PerformanceUI] Server stop error:', error);\r\n      showError('Stop Error', error.message);\r\n    } finally {\r\n      this.elements.stopServerBtn.disabled = false;\r\n      this.elements.stopServerBtn.textContent = '\u23F9\uFE0F Stop Server';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh server status\r\n   */\r\n  async refreshServerStatus() {\r\n    try {\r\n      this.elements.refreshServerBtn.disabled = true;\r\n      this.elements.refreshServerBtn.textContent = '\uD83D\uDD04 Checking...';\r\n      \r\n      const serverInfo = await this.serverManager.getServerInfo();\r\n      this.updateServerStatus(serverInfo);\r\n      \r\n    } catch (error) {\r\n      console.error('[PerformanceUI] Server refresh error:', error);\r\n      showError('Status Check Failed', error.message);\r\n    } finally {\r\n      this.elements.refreshServerBtn.disabled = false;\r\n      this.elements.refreshServerBtn.textContent = '\uD83D\uDD04 Refresh Status';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update UI state based on current conditions\r\n   */\r\n  updateUIState() {\r\n    this.updateTestButtonState();\r\n    \r\n    // Update mode selector to match current mode\r\n    if (this.elements.modeSelector && this.elements.modeSelector.value !== this.performanceMode) {\r\n      this.elements.modeSelector.value = this.performanceMode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update test button state\r\n   */\r\n  updateTestButtonState() {\r\n    if (!this.elements.runAccuracyTestBtn) return;\r\n    \r\n    const hasData = state.draws && state.draws.length >= 100;\r\n    const canRunTest = hasData && !this.isTestRunning;\r\n    \r\n    this.elements.runAccuracyTestBtn.disabled = !canRunTest;\r\n    \r\n    if (!hasData) {\r\n      this.elements.runAccuracyTestBtn.textContent = '\uD83E\uDDEA Upload Data First (100+ draws needed)';\r\n    } else if (this.isTestRunning) {\r\n      this.elements.runAccuracyTestBtn.textContent = '\uD83E\uDDEA Test in Progress...';\r\n    } else {\r\n      this.elements.runAccuracyTestBtn.textContent = '\uD83E\uDDEA Run Enhanced Accuracy Test';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run enhanced accuracy test\r\n   */\r\n  async runAccuracyTest() {\r\n    if (this.isTestRunning || !state.draws || state.draws.length < 100) {\r\n      return;\r\n    }\r\n    \r\n    this.isTestRunning = true;\r\n    this.updateTestButtonState();\r\n    \r\n    // Show progress panel\r\n    this.elements.testProgress.style.display = 'block';\r\n    this.elements.testResults.style.display = 'none';\r\n    \r\n    const startTime = Date.now();\r\n    let progressInterval;\r\n    \r\n    try {\r\n      // Create enhanced accuracy tester\r\n      const includeEnsemble = document.getElementById('include-ensemble')?.checked || true;\r\n      const adaptiveWeighting = document.getElementById('adaptive-weighting')?.checked || true;\r\n      \r\n      const options = {\r\n        minTrainingSize: Math.max(100, Math.floor(state.draws.length * 0.4)),\r\n        testWindowSize: Math.min(50, Math.floor(state.draws.length * 0.1)),\r\n        stepSize: 10,\r\n        maxValidationPeriods: 10,\r\n        bootstrapIterations: state.draws.length > 500 ? 500 : 200,\r\n        confidenceLevel: 0.95,\r\n        includeEnsemble,\r\n        adaptiveWeighting\r\n      };\r\n      \r\n      this.currentAccuracyTest = new EnhancedAccuracyTester(state.draws, options);\r\n      \r\n      // Update progress display\r\n      const progressFill = this.elements.testProgress.querySelector('.progress-fill');\r\n      const progressText = this.elements.testProgress.querySelector('.progress-text');\r\n      const currentMethodSpan = this.elements.testProgress.querySelector('.current-method');\r\n      const elapsedTimeSpan = this.elements.testProgress.querySelector('.elapsed-time');\r\n      const executionModeSpan = this.elements.testProgress.querySelector('.execution-mode');\r\n      \r\n      progressInterval = setInterval(() => {\r\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\r\n        const minutes = Math.floor(elapsed / 60);\r\n        const seconds = elapsed % 60;\r\n        elapsedTimeSpan.textContent = `Elapsed: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n      }, 1000);\r\n      \r\n      // Progress callback\r\n      const progressCallback = (progress) => {\r\n        const percentage = Math.round(progress.progress || 0);\r\n        progressFill.style.width = `${percentage}%`;\r\n        progressText.textContent = `${percentage}%`;\r\n        \r\n        if (progress.currentMethod) {\r\n          currentMethodSpan.textContent = `Testing: ${progress.currentMethod} (Window ${progress.window + 1}/${progress.totalWindows || 'N/A'})`;\r\n        }\r\n        \r\n        if (progress.source === 'server') {\r\n          executionModeSpan.textContent = 'Mode: Server (Accelerated)';\r\n        } else {\r\n          executionModeSpan.textContent = 'Mode: Browser';\r\n        }\r\n      };\r\n      \r\n      showInfo('Starting Accuracy Test', 'Beginning enhanced accuracy analysis with walk-forward validation...');\r\n      \r\n      // Run test with server management\r\n      const results = await this.serverManager.runAccuracyTestWithServerManager(\r\n        this.currentAccuracyTest,\r\n        {\r\n          preferServer: this.performanceMode === 'auto' || this.performanceMode === 'server',\r\n          fallbackToBrowser: this.performanceMode !== 'server',\r\n          progressCallback\r\n        }\r\n      );\r\n      \r\n      // Display results\r\n      this.displayTestResults(results);\r\n      \r\n      const duration = Math.round((Date.now() - startTime) / 1000);\r\n      showSuccess('Accuracy Test Complete', `Analysis completed in ${duration} seconds`);\r\n      \r\n    } catch (error) {\r\n      console.error('[PerformanceUI] Accuracy test failed:', error);\r\n      showError('Test Failed', error.message);\r\n      \r\n      this.elements.testResults.innerHTML = `\r\n        <h3>\u274C Test Failed</h3>\r\n        <div class=\"error-message\">\r\n          <strong>Error:</strong> ${error.message}\r\n        </div>\r\n      `;\r\n      this.elements.testResults.style.display = 'block';\r\n      \r\n    } finally {\r\n      this.isTestRunning = false;\r\n      this.currentAccuracyTest = null;\r\n      \r\n      clearInterval(progressInterval);\r\n      this.elements.testProgress.style.display = 'none';\r\n      this.updateTestButtonState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel running accuracy test\r\n   */\r\n  cancelAccuracyTest() {\r\n    if (this.currentAccuracyTest) {\r\n      // This would cancel the current test - implementation depends on test structure\r\n      showInfo('Cancelling Test', 'Attempting to cancel accuracy test...');\r\n      this.currentAccuracyTest = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display test results\r\n   */\r\n  displayTestResults(results) {\r\n    if (!this.elements.testResults) return;\r\n    \r\n    const { summary, performanceInfo } = results;\r\n    const content = this.elements.testResults.querySelector('.results-content') || \r\n                   this.elements.testResults;\r\n    \r\n    const executionMode = performanceInfo?.usedServer ? 'Server (Accelerated)' : 'Browser';\r\n    const testDuration = Math.round(summary.testDuration / 1000) || 0;\r\n    \r\n    content.innerHTML = `\r\n      <div class=\"results-summary\">\r\n        <div class=\"execution-info\">\r\n          <span class=\"execution-mode\">Execution Mode: ${executionMode}</span>\r\n          <span class=\"duration\">Duration: ${testDuration}s</span>\r\n          <span class=\"predictions\">Total Predictions: ${summary.totalPredictions}</span>\r\n        </div>\r\n        \r\n        <div class=\"best-method\">\r\n          <h4>\uD83C\uDFC6 Best Performing Method</h4>\r\n          <div class=\"method-card\">\r\n            <strong>${summary.bestMethod?.displayName || 'N/A'}</strong>\r\n            <div class=\"metrics\">\r\n              <span>Score: ${((summary.bestMethod?.overallScore || 0) * 100).toFixed(1)}%</span>\r\n              <span>Avg Matches: ${(summary.bestMethod?.averageMatches || 0).toFixed(2)}</span>\r\n              <span>Hit Rate: ${((summary.bestMethod?.hitRate || 0) * 100).toFixed(1)}%</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"method-ranking\">\r\n          <h4>\uD83D\uDCCA Method Ranking</h4>\r\n          <div class=\"ranking-list\">\r\n            ${summary.methodRanking?.map((method, index) => `\r\n              <div class=\"rank-item\">\r\n                <span class=\"rank\">#${index + 1}</span>\r\n                <span class=\"method-name\">${method.displayName}</span>\r\n                <span class=\"score\">${(method.overallScore * 100).toFixed(1)}%</span>\r\n                <div class=\"method-details\">\r\n                  Avg Matches: ${method.averageMatches.toFixed(2)} | \r\n                  Hit Rate: ${(method.hitRate * 100).toFixed(1)}% |\r\n                  Weight: ${(method.weight * 100).toFixed(0)}%\r\n                </div>\r\n              </div>\r\n            `).join('') || '<div>No ranking data available</div>'}\r\n          </div>\r\n        </div>\r\n        \r\n        ${summary.ensemble ? `\r\n          <div class=\"ensemble-results\">\r\n            <h4>\uD83C\uDFAF Ensemble Performance</h4>\r\n            <div class=\"ensemble-metrics\">\r\n              <span>Score: ${(summary.ensemble.overallScore * 100).toFixed(1)}%</span>\r\n              <span>Avg Matches: ${summary.ensemble.averageMatches.toFixed(2)}</span>\r\n              <span>Hit Rate: ${(summary.ensemble.hitRate * 100).toFixed(1)}%</span>\r\n            </div>\r\n          </div>\r\n        ` : ''}\r\n        \r\n        <div class=\"key-findings\">\r\n          <h4>\uD83D\uDD0D Key Findings</h4>\r\n          <ul>\r\n            ${summary.keyFindings?.map(finding => `<li>${finding}</li>`).join('') || '<li>No findings available</li>'}\r\n          </ul>\r\n        </div>\r\n        \r\n        ${performanceInfo?.serverInfo ? `\r\n          <div class=\"performance-details\">\r\n            <h4>\u26A1 Performance Details</h4>\r\n            <div class=\"server-performance\">\r\n              <strong>Server Capabilities:</strong>\r\n              <ul>\r\n                <li>CPU Cores: ${performanceInfo.serverInfo.performance?.cpuCores || 'N/A'}</li>\r\n                <li>Memory: ${performanceInfo.serverInfo.performance?.memoryUsage || 'N/A'}</li>\r\n                <li>Average Response: ${Math.round(performanceInfo.serverInfo.performanceMetrics?.avgResponseTime || 0)}ms</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ` : ''}\r\n      </div>\r\n    `;\r\n    \r\n    this.elements.testResults.style.display = 'block';\r\n  }\r\n}\r\n\r\n// Initialize performance UI when DOM is ready\r\nlet performanceUI = null;\r\n\r\nexport function initPerformanceUI() {\r\n  if (!performanceUI) {\r\n    performanceUI = new PerformanceUI();\r\n  }\r\n  return performanceUI;\r\n}\r\n\r\nexport default PerformanceUI;", "/**\r\n * PROGRESS STATUS MANAGER\r\n * Version: 1.0.0 | Created: 2025-09-02\r\n * \r\n * Manages the progress status display under the analyze button\r\n */\r\n\r\nimport state from './state.js';\r\n\r\nclass ProgressStatus {\r\n  constructor() {\r\n    this.currentStep = '';\r\n    this.startTime = null;\r\n    this.progressContainer = null;\r\n    this.currentStepEl = null;\r\n    this.timestampEl = null;\r\n    this.suggestedActionsEl = null;\r\n    \r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.progressContainer = document.getElementById('progress-status');\r\n    this.currentStepEl = document.getElementById('current-step');\r\n    this.timestampEl = document.getElementById('step-timestamp');\r\n    this.suggestedActionsEl = document.getElementById('suggested-actions');\r\n\r\n    if (!this.progressContainer) return;\r\n\r\n    // Subscribe to state changes\r\n    state.subscribe('drawsUpdated', () => {\r\n      this.updateStep('Data loaded', 'Run analysis or optimize parameters');\r\n      this.show();\r\n    });\r\n\r\n    state.subscribe('progress', (message) => {\r\n      this.updateStep(message, 'Please wait...');\r\n    });\r\n\r\n    state.subscribe('hideProgress', () => {\r\n      this.updateStep('Analysis complete', 'Try parameter optimization or accuracy testing');\r\n    });\r\n\r\n    state.subscribe('energyResults', () => {\r\n      this.updateStep('Energy analysis complete', 'Check AI predictions next');\r\n    });\r\n\r\n    state.subscribe('mlResults', () => {\r\n      this.updateStep('AI predictions complete', 'Review recommendations or try optimization');\r\n    });\r\n\r\n    state.subscribe('error', (error) => {\r\n      this.updateStep(`Error: ${error.title}`, 'Check the error message and try again');\r\n    });\r\n\r\n    // Optimization events\r\n    state.subscribe('optimizationStarted', () => {\r\n      this.updateStep('Parameter optimization in progress', 'This may take several minutes...');\r\n    });\r\n\r\n    state.subscribe('optimizationComplete', () => {\r\n      this.updateStep('Optimization complete', 'Run analysis again to see improved results');\r\n    });\r\n\r\n    console.log('[Progress Status] Initialized successfully');\r\n  }\r\n\r\n  updateStep(step, suggestedActions = '') {\r\n    if (!this.progressContainer) return;\r\n\r\n    this.currentStep = step;\r\n    this.startTime = new Date();\r\n\r\n    if (this.currentStepEl) {\r\n      this.currentStepEl.textContent = step;\r\n    }\r\n\r\n    if (this.timestampEl) {\r\n      this.timestampEl.textContent = `Started: ${this.startTime.toLocaleTimeString()}`;\r\n    }\r\n\r\n    if (this.suggestedActionsEl && suggestedActions) {\r\n      this.suggestedActionsEl.textContent = suggestedActions;\r\n    }\r\n\r\n    this.show();\r\n  }\r\n\r\n  show() {\r\n    if (this.progressContainer) {\r\n      this.progressContainer.style.display = 'block';\r\n    }\r\n  }\r\n\r\n  hide() {\r\n    if (this.progressContainer) {\r\n      this.progressContainer.style.display = 'none';\r\n    }\r\n  }\r\n\r\n  getElapsedTime() {\r\n    if (!this.startTime) return '';\r\n    \r\n    const elapsed = new Date() - this.startTime;\r\n    const seconds = Math.floor(elapsed / 1000);\r\n    \r\n    if (seconds < 60) {\r\n      return `${seconds}s`;\r\n    } else {\r\n      const minutes = Math.floor(seconds / 60);\r\n      const remainingSeconds = seconds % 60;\r\n      return `${minutes}m ${remainingSeconds}s`;\r\n    }\r\n  }\r\n\r\n  updateElapsedTime() {\r\n    if (this.timestampEl && this.startTime) {\r\n      const elapsed = this.getElapsedTime();\r\n      this.timestampEl.textContent = `Started: ${this.startTime.toLocaleTimeString()} (${elapsed} elapsed)`;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst progressStatus = new ProgressStatus();\r\n\r\n// Update elapsed time every 5 seconds\r\nsetInterval(() => {\r\n  progressStatus.updateElapsedTime();\r\n}, 5000);\r\n\r\nexport default progressStatus;", "// ==================== BACKTEST INTEGRATION ==================== //\n\nexport async function runBacktest(settings = CONFIG.backtestSettings) {\n    if (state.draws.length === 0) {\n        state.publish('error', { title: 'No Data', message: 'Please upload a CSV file with lottery data first.' });\n        return;\n    }\n\n    state.publish('progress', 'Starting backtest...');\n\n    try {\n        const resultPromise = new Promise((resolve, reject) => {\n            let unsubResult, unsubError;\n            const cleanup = () => { unsubResult(); unsubError(); };\n\n            const handler = (data) => {\n                cleanup();\n                resolve(data.results || data);\n            };\n            const errorHandler = (err) => {\n                cleanup();\n                reject(err);\n            };\n\n            unsubResult = state.subscribe('backtest:result', handler);\n            unsubError = state.subscribe('backtest:error', errorHandler);\n        });\n\n        state.publish('backtest:run', { draws: state.draws, settings });\n        const results = await resultPromise;\n        state.publish('backtestResults', results);\n    } catch (error) {\n        state.publish('error', { title: 'Backtest Failed', message: error.message || error });\n    } finally {\n        state.publish('hideProgress');\n    }\n}\n\n// LOTTERY ANALYSIS PRO - CORE APPLICATION\n// Version: 2.4.2 | Last Updated: 2025-08-21 02:45 PM EST\n\nimport {\n    elements,\n    initUIElements,\n} from './ui.js';\nimport state from './state.js';\n\nimport { calculateEnergy, displayEnergyResults } from './utils.js';\nimport {\n    calculateFrequency,\n    findCommonPairs,\n    gapAnalysis,\n    getHotAndColdNumbers,\n    getOverdueNumbers\n} from './analysis.js';\nimport { generateEnhancedRecommendations } from './enhanced-recommendations.js';\nimport workerWrapper from './worker-wrapper.js';\nimport { initOptimizationUI } from './optimization-ui.js';\nimport { initConfidenceUI } from './confidence-ui.js';\nimport { initAccuracyUI } from './accuracy-ui.js';\nimport { initStrategyBuilder } from './strategy-builder.js';\nimport { initPerformanceUI } from './performance-ui.js';\nimport progressStatus from './progress-status.js';\n\n// ==================== CONFIG & STATE ==================== //\nconst CONFIG = {\n    analysisMethods: ['energy', 'ml', 'hybrid'],\n    backtestSettings: {\n        initialTrainingSize: 100,\n        testWindowSize: 50,\n    },\n    energyWeights: { // Default weights\n        prime: 0.3,\n        digitalRoot: 0.2,\n        mod5: 0.2,\n        gridPosition: 0.3\n    }\n};\n\n// Initialize state properties\nstate.draws = [];\n\n// App state for non-pubsub values\nconst appState = {\n    currentMethod: 'hybrid',\n    activeWorkers: new Map(),\n};\n\n\n// ==================== CORE ANALYSIS ==================== //\n\nexport async function runAnalysis() {\n    if (state.draws.length === 0) {\n        state.publish('error', { title: 'No Data', message: 'Please upload a CSV file with lottery data first.' });\n        return;\n    }\n\n    state.publish('analyzeBtnState', false);\n    state.publish('progress', 'Starting analysis...');\n\n    try {\n        // Core analytics\n        const maxNumber = 69; // TODO: make dynamic if needed\n        const frequency = calculateFrequency(state.draws, maxNumber);\n        const pairs = findCommonPairs(state.draws);\n        const gaps = gapAnalysis(state.draws);\n        const hotCold = getHotAndColdNumbers(state.draws, maxNumber);\n        const overdue = getOverdueNumbers(state.draws, maxNumber);\n\n        state.publish('analytics:frequency', frequency);\n        state.publish('analytics:pairs', pairs);\n        state.publish('analytics:gaps', gaps);\n        state.publish('analytics:hotCold', hotCold);\n        state.publish('analytics:overdue', overdue);\n        \n        state.publish('progress', 'Calculating energy signatures...');\n    const allNumbers = [...new Set(state.draws.flatMap(d => d.whiteBalls))];\n    console.log('allNumbers for energy:', allNumbers);\n    const energyData = calculateEnergy(allNumbers, CONFIG.energyWeights);\n    console.log('Energy Data Sample:', energyData.slice(0, 3));\n        state.publish('energyResults', energyData);\n\n        state.publish('progress', 'Running ML predictions...');\n        const mlResultPromise = new Promise((resolve, reject) => {\n            let unsubResult, unsubError;\n            const cleanup = () => { \n                if (unsubResult) unsubResult(); \n                if (unsubError) unsubError(); \n            };\n\n            const handler = (mlPrediction) => {\n                cleanup();\n                resolve(mlPrediction.prediction || mlPrediction);\n            };\n            const errorHandler = (err) => {\n                cleanup();\n                reject(err || new Error('ML prediction failed with unknown error'));\n            };\n\n            unsubResult = state.subscribe('ml:result', handler);\n            unsubError = state.subscribe('ml:error', errorHandler);\n            \n            // Add a timeout to prevent hanging (increased for large datasets)\n            setTimeout(() => {\n                cleanup();\n                reject(new Error('ML prediction timeout after 2 minutes'));\n            }, 120000);\n        });\n\n        state.publish('ml:predict', { draws: state.draws });\n        const mlPrediction = await mlResultPromise;\n        state.publish('mlResults', mlPrediction);\n\n        state.publish('progress', 'Generating enhanced recommendations...');\n        const recommendations = await generateRecommendations(energyData, mlPrediction);\n        state.publish('recommendations', recommendations);\n\n    } catch (error) {\n        console.error('Analysis error details:', error);\n        const errorMessage = error?.message || error?.toString() || 'Unknown error occurred during analysis';\n        state.publish('error', { title: 'Analysis Failed', message: errorMessage });\n    } finally {\n        state.publish('hideProgress');\n        state.publish('analyzeBtnState', true);\n    }\n}\n\nasync function generateRecommendations(energyData, mlPrediction) {\n    try {\n        // Validate inputs\n        if (!Array.isArray(energyData)) {\n            throw new Error('Energy data is not an array');\n        }\n        if (!mlPrediction || typeof mlPrediction !== 'object') {\n            throw new Error('ML prediction is invalid');\n        }\n\n        // Deduplicate energy data by number\n        const uniqueByNumber = {};\n        energyData.forEach(item => { \n            if (item && item.number) {\n                uniqueByNumber[item.number] = item; \n            }\n        });\n        const dedupedEnergyData = Object.values(uniqueByNumber);\n\n        // Generate position predictions if confidence predictor is available\n        let positionPredictions = null;\n        try {\n            const { PositionBasedPredictor } = await import('./confidence-predictor.js');\n            const predictor = new PositionBasedPredictor(state.draws);\n            positionPredictions = await predictor.generatePredictionWithConfidenceIntervals({\n                confidenceLevel: 0.95,\n                method: 'bootstrap',\n                includeCorrelations: true\n            });\n        } catch (error) {\n            console.warn('Position predictions unavailable:', error.message);\n        }\n\n        // Use enhanced recommendations system\n        const enhancedRecommendations = generateEnhancedRecommendations(\n            dedupedEnergyData, \n            mlPrediction, \n            positionPredictions, \n            state.draws\n        );\n\n        // Maintain backward compatibility with existing UI expectations\n        const legacyFormat = {\n            highConfidence: enhancedRecommendations.highConfidence,\n            energyBased: enhancedRecommendations.energyBased || dedupedEnergyData\n                .sort((a, b) => b.energy - a.energy)\n                .slice(0, 5)\n                .map(item => item.number),\n            mlBased: mlPrediction.whiteBalls || [],\n            powerball: mlPrediction.powerball,\n            summary: enhancedRecommendations.summary || `Based on ${state.draws.length} historical draws`\n        };\n\n        // Add enhanced features\n        legacyFormat.mediumConfidence = enhancedRecommendations.mediumConfidence;\n        legacyFormat.alternativeSelections = enhancedRecommendations.alternativeSelections;\n        legacyFormat.positionBased = enhancedRecommendations.positionBased;\n        legacyFormat.insights = enhancedRecommendations.insights;\n        legacyFormat.confidenceScores = enhancedRecommendations.confidenceScores;\n\n        console.log('[Enhanced Recommendations] High confidence count:', legacyFormat.highConfidence.length);\n        console.log('[Enhanced Recommendations] Medium confidence count:', legacyFormat.mediumConfidence.length);\n        console.log('[Enhanced Recommendations] Alternative strategies:', legacyFormat.alternativeSelections.length);\n\n        return legacyFormat;\n\n    } catch (error) {\n        console.error('Error generating enhanced recommendations:', error);\n        \n        // Fallback to simple recommendations if enhanced system fails\n        const fallbackRecommendations = generateSimpleRecommendations(energyData, mlPrediction);\n        fallbackRecommendations.error = `Enhanced recommendations failed: ${error.message}`;\n        return fallbackRecommendations;\n    }\n}\n\nfunction generateSimpleRecommendations(energyData, mlPrediction) {\n    // Fallback implementation\n    const uniqueByNumber = {};\n    energyData.forEach(item => { \n        if (item && item.number) {\n            uniqueByNumber[item.number] = item; \n        }\n    });\n    const deduped = Object.values(uniqueByNumber);\n    const topEnergy = [...deduped].sort((a, b) => b.energy - a.energy).slice(0, 5);\n    const mlNumbers = (mlPrediction.whiteBalls || []).slice(0, 5);\n\n    const energyNumbers = topEnergy.map(item => item.number);\n    const overlap = mlNumbers.filter(num => energyNumbers.includes(num));\n    \n    return {\n        highConfidence: overlap,\n        energyBased: energyNumbers,\n        mlBased: mlNumbers,\n        powerball: mlPrediction.powerball,\n        summary: `Fallback recommendations based on ${state.draws.length} historical draws`\n    };\n}\n\nfunction getFrequencyFallback(draws) {\n    const whiteFreq = new Array(70).fill(0);\n    draws.forEach(draw => {\n        if (draw.whiteBalls && Array.isArray(draw.whiteBalls)) {\n            draw.whiteBalls.forEach(n => {\n                if (n >= 1 && n <= 69) whiteFreq[n] += 1;\n            });\n        }\n    });\n    const predictedWhiteBalls = whiteFreq\n        .map((count, number) => ({ number, count }))\n        .filter(item => item.number >= 1)\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5)\n        .map(item => item.number);\n\n    return {\n        whiteBalls: predictedWhiteBalls,\n        powerball: Math.floor(Math.random() * 26) + 1,\n        confidence: 0.5,\n        model: 'fallback_frequency'\n    };\n}\n\nfunction initEventListeners() {\n    const controlPanel = document.querySelector('.control-panel');\n    if (controlPanel) {\n        controlPanel.addEventListener('click', (event) => {\n            if (event.target.id === 'analyzeBtn') runAnalysis();\n        });\n    } else {\n        console.error('Control panel not found for event delegation.');\n    }\n    elements.uploadInput.addEventListener('change', handleFileUpload);\n}\n\nexport async function handleFileUpload(event) {\n    const file = event.target.files[0];\n    if (!file) {\n        state.publish('analyzeBtnState', false);\n        return;\n    }\n\n    state.publish('progress', 'Parsing CSV file...');\n    Papa.parse(file, {\n        header: false,\n        dynamicTyping: false,\n        skipEmptyLines: true,\n        complete: (results) => {\n            state.publish('hideProgress');\n            if (results.errors.length) {\n                state.publish('error', { title: 'CSV Parsing Error', message: results.errors[0].message });\n                state.publish('analyzeBtnState', false);\n                return;\n            }\n\n            // Skip the first two header rows\n            const dataRows = results.data.slice(2);\n\n            state.draws = dataRows.map(row => {\n                const whiteBalls = [row[1], row[2], row[3], row[4], row[5]].map(Number);\n                const powerball = Number(row[6]);\n                const date = new Date(row[0]);\n                return { whiteBalls, powerball, date };\n            });\n            console.log(`Parsed ${state.draws.length} draws.`);\n            console.log('First 5 draws:', state.draws.slice(0, 5));\n            state.publish('drawsUpdated', state.draws);\n            state.publish('analyzeBtnState', true);\n        },\n        error: (err) => {\n            state.publish('hideProgress');\n            state.publish('error', { title: 'CSV Parsing Error', message: err });\n            state.publish('analyzeBtnState', false);\n        }\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    initUIElements(CONFIG, state);\n    initEventListeners();\n    initOptimizationUI();\n    initConfidenceUI();\n    initAccuracyUI();\n    initStrategyBuilder();\n    initPerformanceUI();\n});"],
  "mappings": "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",
  "names": ["displayEnergyResults", "CONFIG", "state", "elements", "performance", "window", "mlPrediction", "PositionBasedPredictor"]
}
