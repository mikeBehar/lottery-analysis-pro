{
  "version": 3,
  "sources": ["../js/utils.js", "../js/state.js", "../js/ui.js", "../js/analysis.js", "../js/worker-wrapper.js", "../js/app.js"],
  "sourcesContent": ["/**\n * LOTTERY ANALYSIS UTILITIES\n * Version: 2.4.2 | Updated: 2025-08-21 02:45 PM EST\n * Changes:\n * - Added temporal weighting analysis\n * - Added number pairing/grouping analysis\n * - Enhanced gap analysis with statistical expectations\n * - Maintained all existing energy calculation functions\n */\n\n// =============== ENERGY CALCULATION =============== //\n/**\n * Calculates energy signature for lottery numbers\n * @param {number[]} numbers - Array of numbers (1-69)\n * @param {Object} weights - The energy weights from CONFIG.\n * @returns {Object[]} Energy data for each number\n * @version 1.1.0 | Updated: 2024-08-21\n */\nfunction calculateEnergy(numbers, weights) {\n  const defaultWeights = {\n    prime: 0.3,\n    digitalRoot: 0.2,\n    mod5: 0.2,\n    gridPosition: 0.3\n  };\n  const effectiveWeights = weights || defaultWeights;\n  \n  return numbers.map(num => {\n    const energyComponents = {\n      isPrime: isPrime(num) ? 1 : 0,\n      digitalRoot: getDigitalRoot(num),\n      mod5: (num % 5) * 0.2,\n      gridScore: getGridPositionScore(num)\n    };\n\n    const energy = (energyComponents.isPrime * effectiveWeights.prime) +\n                   (energyComponents.digitalRoot * effectiveWeights.digitalRoot) +\n                   (energyComponents.mod5 * effectiveWeights.mod5) +\n                   (energyComponents.gridScore * effectiveWeights.gridPosition);\n\n    return {\n      number: num,\n      ...energyComponents,\n      energy: energy\n    };\n  });\n}\n\n/**\n * Displays energy calculation results in a container\n * @param {Object[]} energyData - Array of energy data objects\n * @param {HTMLElement} container - DOM element to display results in\n * @version 1.0.0 | Created: 2023-11-16\n */\nfunction displayEnergyResults(energyData, container) {\n  if (!energyData || energyData.length === 0) {\n    container.innerHTML = '<p>No energy data available</p>';\n    return;\n  }\n\n  // Deduplicate by number\n  const uniqueByNumber = {};\n  energyData.forEach(item => { uniqueByNumber[item.number] = item; });\n  const deduped = Object.values(uniqueByNumber);\n  const sorted = [...deduped].sort((a, b) => b.energy - a.energy);\n  const topNumbers = sorted.slice(0, 15);\n  console.log('[Energy Panel] Top numbers (deduped):', topNumbers.map(n => n.number));\n  container.innerHTML = topNumbers.map(num => `\n    <div class=\"number-card\" data-energy=\"${num.energy.toFixed(2)}\">\n      <div class=\"number\">${num.number}</div>\n      <div class=\"energy-score\">${num.energy.toFixed(2)}</div>\n      <div class=\"energy-breakdown\">\n        Prime: ${num.isPrime ? '\u2713' : '\u2717'} | \n        Root: ${num.digitalRoot} | \n        Mod5: ${(num.mod5 / 0.2).toFixed(0)} | \n        Grid: ${num.gridScore.toFixed(1)}\n      </div>\n    </div>\n  `).join('');\n}\n\n// =============== TEMPORAL ANALYSIS =============== //\n/**\n * Applies exponential time decay to an array of draws\n * Recent draws are weighted more heavily than older ones\n * @param {Array} draws - Array of draw objects\n * @param {number} decayRate - Decay factor (e.g., 0.9 = 10% decay per draw)\n * @returns {Array} Draws with an added `weight` property\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction applyTemporalDecay(draws, decayRate = 0.99) {\n  if (!draws.length) return [];\n  \n  const weightedDraws = draws.map((draw, index) => {\n    // Most recent draw gets weight = 1, previous gets decayRate, then decayRate^2, etc.\n    const weight = Math.pow(decayRate, draws.length - index - 1);\n    return { ...draw, weight };\n  });\n  \n  return weightedDraws;\n}\n\n// =============== NUMBER RELATIONSHIP ANALYSIS =============== //\n/**\n * Analyzes and identifies number pairs that frequently appear together\n * @param {Array} draws - Array of draw objects\n * @param {number} minFrequency - Minimum co-occurrences to consider\n * @returns {Object} Map of number pairs and their frequency count\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction findNumberPairs(draws, minFrequency = 5) {\n  const pairCounts = {};\n  \n  draws.forEach(draw => {\n    const whiteBalls = (draw.whiteBalls || []).slice().sort((a, b) => a - b);\n    // Create all possible pairs in the draw\n    for (let i = 0; i < whiteBalls.length; i++) {\n      for (let j = i + 1; j < whiteBalls.length; j++) {\n        const pairKey = `${whiteBalls[i]}-${whiteBalls[j]}`;\n        pairCounts[pairKey] = (pairCounts[pairKey] || 0) + 1;\n      }\n    }\n  });\n  \n  // Filter and sort pairs\n  const frequentPairs = Object.entries(pairCounts)\n    .filter(([_, count]) => count >= minFrequency)\n    .sort((a, b) => b[1] - a[1])\n    .reduce((obj, [key, count]) => {\n      obj[key] = count;\n      return obj;\n    }, {});\n  \n  return frequentPairs;\n}\n\n// =============== GAP ANALYSIS =============== //\n/**\n * Calculates the expected and actual gaps for each number\n * Identifies truly overdue numbers based on statistical expectation\n * @param {Array} draws - Array of draw objects\n * @returns {Object} Gap analysis for numbers 1-69.\n * @version 1.0.0 | Created: 2024-08-20 07:30 PM EST\n */\nfunction calculateGapAnalysis(draws) {\n  const gapData = {};\n  \n  // Initialize numbers 1-69\n  for (let i = 1; i <= 69; i++) {\n    gapData[i] = {\n      number: i,\n      frequency: 0,\n      lastSeen: null,\n      gaps: [],\n      expectedGap: 0,\n      currentGap: 0,\n      isOverdue: false\n    };\n  }\n  \n  // First pass: calculate frequencies and gaps\n  draws.forEach((draw, drawIndex) => {\n    (draw.whiteBalls || []).forEach(num => {\n      if (num >= 1 && num <= 69) {\n        if (gapData[num].lastSeen !== null) {\n          const gap = drawIndex - gapData[num].lastSeen;\n          gapData[num].gaps.push(gap);\n        }\n        gapData[num].lastSeen = drawIndex;\n        gapData[num].frequency++;\n      }\n    });\n  });\n  \n  // Second pass: calculate expected gap and overdue status\n  Object.values(gapData).forEach(data => {\n    if (data.gaps.length > 0) {\n      data.expectedGap = data.gaps.reduce((sum, gap) => sum + gap, 0) / data.gaps.length;\n      data.currentGap = draws.length - data.lastSeen;\n      data.isOverdue = data.currentGap > data.expectedGap * 1.5; // 50% beyond expected\n    }\n  });\n  \n  return gapData;\n}\n\n// =============== SUPPORTING FUNCTIONS =============== //\n/** \n * Checks if a number is prime \n * @version 1.0.0 | Created: 2023-11-15\n */\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  \n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}\n\n/** \n * Calculates digital root (recursive digit sum) \n * @version 1.0.0 | Created: 2023-11-15\n */\nfunction getDigitalRoot(num) {\n  return num - 9 * Math.floor((num - 1) / 9);\n}\n\n/** \n * Scores spatial position on a 5x14 grid \n * @version 1.0.4 | Updated: 2024-08-20 07:30 PM EST\n */\nfunction getGridPositionScore(num) {\n  const GRID = [\n    [0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9],\n    [0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7],\n    [0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5],\n    [0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.7],\n    [0.3, 0.5, 0.7, 0.9, 1.0, 0.9, 0.7, 0.5, 0.3, 0.5, 0.7, 0.9, 1.0, 0.9]\n  ];\n  \n  if (num < 1 || num > 70) return 0.5;\n  const row = Math.floor((num - 1) / 14);\n  const col = (num - 1) % 14;\n  return GRID[row]?.[col] ?? 0.5;\n}\n\n// =============== EXPORTS =============== //\n// Note: If using ES6 modules, add export statements\nexport {\n  calculateEnergy, displayEnergyResults,\n  applyTemporalDecay, findNumberPairs, calculateGapAnalysis,\n  isPrime, getDigitalRoot, getGridPositionScore,\n  applyTemporalWeighting, calculateTemporalFrequency\n};\n\n// =============== TEMPORAL WEIGHTING =============== //\n/**\n * Applies exponential time decay to draws (recent draws weighted higher)\n * @param {Array} draws - Array of draw objects with date property\n * @param {number} decayRate - Decay rate (0-1), higher = faster decay\n * @returns {Array} Draws with temporal weights added\n * @version 1.0.0 | Created: 2024-08-20\n */\nfunction applyTemporalWeighting(draws, decayRate = 0.1) {\n  const validDraws = draws.filter(d => d.date && typeof d.date.getTime === 'function');\n  if (!validDraws.length) return [];\n  \n  const mostRecentDate = new Date(Math.max(...validDraws.map(d => d.date.getTime())));\n  const maxAgeDays = (mostRecentDate - new Date(Math.min(...validDraws.map(d => d.date.getTime())))) / (1000 * 60 * 60 * 24);\n  \n  return validDraws.map(draw => {\n    const ageDays = (mostRecentDate - draw.date) / (1000 * 60 * 60 * 24);\n    const normalizedAge = ageDays / maxAgeDays;\n    const weight = Math.exp(-decayRate * normalizedAge * 10); // Exponential decay\n    return {\n      ...draw,\n      temporalWeight: weight,\n      weightedNumbers: (draw.whiteBalls || []).map(num => ({\n        number: num,\n        weight: weight\n      }))\n    };\n  });\n}\n\n/**\n * Calculates frequency with temporal weighting\n * @param {Array} weightedDraws - Draws with temporal weights\n * @returns {Array} Frequency map with temporal weighting\n */\nfunction calculateTemporalFrequency(weightedDraws) {\n  const frequency = new Array(70).fill(0);\n  weightedDraws.forEach(draw => {\n    draw.weightedNumbers.forEach(weightedNum => {\n      if (weightedNum.number >= 1 && weightedNum.number <= 69) {\n        frequency[weightedNum.number] += weightedNum.weight;\n      }\n    });\n  });\n  return frequency;\n}\n\n// Make temporal functions available globally\nif (typeof window !== 'undefined') {\n  window.applyTemporalWeighting = applyTemporalWeighting;\n  window.calculateTemporalFrequency = calculateTemporalFrequency;\n}", "// js/state.js\r\n// Simple pub/sub (event emitter) for app state management\r\n// Usage: import state from './state.js';\r\n\r\nclass PubSub {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  subscribe(event, handler) {\r\n    if (!this.events[event]) {\r\n      this.events[event] = [];\r\n    }\r\n    this.events[event].push(handler);\r\n    // Return unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event].filter(h => h !== handler);\r\n    };\r\n  }\r\n\r\n  publish(event, data) {\r\n    if (!this.events[event]) return;\r\n    this.events[event].forEach(handler => handler(data));\r\n  }\r\n\r\n  clear(event) {\r\n    if (event) {\r\n      delete this.events[event];\r\n    } else {\r\n      this.events = {};\r\n    }\r\n  }\r\n}\r\n\r\nconst state = new PubSub();\r\nexport default state;\r\n", "import { displayEnergyResults as displayEnergyResultsFromUtils } from './utils.js';\n\nexport function displayEnergyResults(energyData, container) {\n  displayEnergyResultsFromUtils(energyData, container);\n}\n\n// Listen for drawsUpdated event (future: update UI, enable analysis, show draw count, etc.)\nstate.subscribe('drawsUpdated', (draws) => {\n  // Example: log or update UI with draw count\n  console.log(`[PubSub] Draws updated: ${draws.length} draws loaded.`);\n  // You can add UI updates here as needed\n});\n// Centralized DOM elements object\nexport const elements = (() => {\n  const panelsContainer = document.querySelector('.panels') || document.body;\n  const makePanel = (id, className) => {\n    let el = document.getElementById(id);\n    if (!el) {\n      el = document.createElement('div');\n      el.id = id;\n      el.className = className;\n      panelsContainer.appendChild(el);\n    }\n    return el;\n  };\n  return {\n    methodSelector: document.createElement('select'),\n    temporalDecaySelector: document.createElement('select'),\n    analyzeBtn: document.getElementById('analyzeBtn'),\n    uploadInput: document.getElementById('csvUpload'),\n    progressIndicator: document.createElement('div'),\n    backtestResults: document.createElement('div'),\n    recommendations: document.getElementById('recommendations'),\n    energyResults: document.getElementById('energy-results') || makePanel('energy-results', 'energy-panel'),\n    mlResults: document.getElementById('ml-results') || makePanel('ml-results', 'ml-panel'),\n    // Analytics panels\n    hotColdPanel: makePanel('hot-cold-panel', 'analytics-panel'),\n    overduePanel: makePanel('overdue-panel', 'analytics-panel'),\n    frequencyPanel: makePanel('frequency-panel', 'analytics-panel'),\n    pairsPanel: makePanel('pairs-panel', 'analytics-panel'),\n    gapsPanel: makePanel('gaps-panel', 'analytics-panel'),\n    // ...existing code...\n  };\n})();\n\n// --- Analytics event subscriptions ---\nstate.subscribe('analytics:hotCold', (hotCold) => displayHotCold(hotCold, elements.hotColdPanel));\nstate.subscribe('analytics:overdue', (overdue) => displayOverdue(overdue, elements.overduePanel));\nstate.subscribe('analytics:frequency', (frequency) => displayFrequency(frequency, elements.frequencyPanel));\nstate.subscribe('analytics:pairs', (pairs) => displayPairs(pairs, elements.pairsPanel));\nstate.subscribe('analytics:gaps', (gaps) => displayGaps(gaps, elements.gapsPanel));\n\n// --- Analytics display functions ---\nexport function displayHotCold(hotCold, container) {\n  container.innerHTML = `\n    <h3>\uD83D\uDD25 Hot & Cold Numbers</h3>\n    <div><strong>Hot:</strong> ${hotCold.hot.map(n => `<span class=\"number hot\">${n}</span>`).join(' ')}</div>\n    <div><strong>Cold:</strong> ${hotCold.cold.map(n => `<span class=\"number cold\">${n}</span>`).join(' ')}</div>\n  `;\n}\n\nexport function displayOverdue(overdue, container) {\n  container.innerHTML = `\n    <h3>\u23F3 Overdue Numbers</h3>\n    <div>${overdue.map(n => `<span class=\"number overdue\">${n}</span>`).join(' ')}</div>\n  `;\n}\n\nexport function displayFrequency(frequency, container) {\n  container.innerHTML = `\n    <h3>\uD83D\uDCCA Number Frequency</h3>\n    <div class=\"frequency-grid\">\n      ${frequency.whiteBalls.map((count, idx) => `<span class=\"number freq\">${idx + 1}: ${count}</span>`).join(' ')}\n    </div>\n  `;\n}\n\nexport function displayPairs(pairs, container) {\n  // Show top 10 pairs\n  const sorted = Object.entries(pairs).sort((a, b) => b[1] - a[1]).slice(0, 10);\n  container.innerHTML = `\n    <h3>\uD83D\uDD17 Common Number Pairs</h3>\n    <ul>${sorted.map(([pair, count]) => `<li>${pair}: ${count}</li>`).join('')}</ul>\n  `;\n}\n\nexport function displayGaps(gaps, container) {\n  // Show all gaps sorted by frequency\n  const sorted = Object.entries(gaps).sort((a, b) => b[1] - a[1]);\n  container.innerHTML = `\n    <h3>\uD83D\uDCCF Gap Analysis</h3>\n    <ul>${sorted.map(([gap, count]) => `<li>Gap ${gap}: ${count} times</li>`).join('')}</ul>\n  `;\n}\n\n/**\n * Initialize UI elements and dynamic DOM structure.\n * @param {object} CONFIG - App config object (for method options)\n * @param {object} state - App state object (for current method)\n */\nexport function initUIElements(CONFIG, state) {\n  // Create and add Powerball results container if not present\n  if (!elements.powerballResults) {\n    elements.powerballResults = document.getElementById('powerball-results');\n    if (!elements.powerballResults) {\n      elements.powerballResults = document.createElement('div');\n      elements.powerballResults.id = 'powerball-results';\n      elements.powerballResults.className = 'powerball-panel';\n      // Insert after recommendations if present, else at end of body\n      if (elements.recommendations?.parentNode) {\n        elements.recommendations.parentNode.insertBefore(elements.powerballResults, elements.recommendations.nextSibling);\n      } else {\n        document.body.appendChild(elements.powerballResults);\n      }\n    }\n  }\n  elements.methodSelector.id = 'method-selector';\n  CONFIG.analysisMethods.forEach(method => {\n    const option = document.createElement('option');\n    option.value = method;\n    option.textContent = method.charAt(0).toUpperCase() + method.slice(1);\n    elements.methodSelector.appendChild(option);\n  });\n  elements.methodSelector.value = state.currentMethod;\n  // ...add more UI initialization as needed...\n}\n\nimport state from './state.js';\n\n// Subscribe to pub/sub events for analysis workflow\nstate.subscribe('progress', (msg) => showProgress(msg));\nstate.subscribe('hideProgress', () => hideProgress());\nstate.subscribe('analyzeBtnState', (enabled) => setAnalyzeBtnState(enabled));\nstate.subscribe('error', ({ title, message }) => showError(title, message));\nstate.subscribe('energyResults', (energyData) => displayEnergyResults(energyData, elements.energyResults));\nstate.subscribe('mlResults', (mlPrediction) => displayMLResults(mlPrediction, elements.mlResults, elements));\nstate.subscribe('recommendations', (recommendations) => displayRecommendations(recommendations, elements));\n\nexport function displayMLResults(mlPrediction, container, elements) {\n  if (typeof DEBUG !== 'undefined' && DEBUG) console.log('displayMLResults called', mlPrediction, container);\n  console.log('[Debug] displayMLResults: mlPrediction =', mlPrediction);\n  console.log('[Debug] displayMLResults: container =', container);\n  // Show white balls and powerball separately\n  const whiteBalls = (mlPrediction.whiteBalls || []).map(num => num.toString().padStart(2, '0')).join(' ');\n  const powerball = mlPrediction.powerball ? mlPrediction.powerball.toString().padStart(2, '0') : '';\n  container.innerHTML = `\n    <div class=\"ml-prediction\">\n      <div class=\"confidence\">Confidence: ${(mlPrediction.confidence * 100).toFixed(1)}%</div>\n      <div class=\"ml-numbers\"><strong>White Balls:</strong> ${whiteBalls}</div>\n      <div class=\"ml-numbers\"><strong>Powerball:</strong> <span class=\"powerball-number\">${powerball}</span></div>\n      <div class=\"model-info\">Model: ${mlPrediction.model}</div>\n      ${mlPrediction.warning ? `<div class=\"warning\">${mlPrediction.warning}</div>` : ''}\n    </div>\n  `;\n  // Also show in dedicated powerball section if present\n  elements?.powerballResults && (elements.powerballResults.innerHTML = `\n    <div class=\"powerball-section\">\n      <h3>\uD83D\uDD34 Powerball Prediction</h3>\n      <div class=\"powerball-prediction\">\n        <span class=\"powerball-number\">${powerball}</span>\n      </div>\n      <div class=\"confidence\">Confidence: ${(mlPrediction.confidence * 100).toFixed(1)}%</div>\n      <div class=\"model-info\">Model: ${mlPrediction.model}</div>\n    </div>\n  `);\n}\n\nexport function displayRecommendations(recommendations, elements) {\n  if (typeof DEBUG !== 'undefined' && DEBUG) console.log('displayRecommendations called', recommendations);\n  console.log('[Debug] displayRecommendations: recommendations =', recommendations);\n  console.log('[Debug] displayRecommendations: elements.recommendations =', elements.recommendations);\n  if (!elements.recommendations) return;\n  // Show white ball recommendations\n  elements.recommendations.innerHTML = `\n    <div class=\"recommendation-section\">\n      <h3>\uD83C\uDFAF High Confidence White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.highConfidence.map(num => \n          `<span class=\"number high-confidence\">${num}</span>`\n        ).join(' ')}\n        ${recommendations.highConfidence.length === 0 ? \n          '<span class=\"no-data\">No strong matches found</span>' : ''}\n      </div>\n    </div>\n    <div class=\"recommendation-section\">\n      <h3>\u26A1 Energy-Based White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.energyBased.map(num => \n          `<span class=\"number energy-based\">${num}</span>`\n        ).join(' ')}\n      </div>\n    </div>\n    <div class=\"recommendation-section\">\n      <h3>\uD83E\uDD16 ML-Based White Balls</h3>\n      <div class=\"number-grid\">\n        ${recommendations.mlBased.map(num => \n          `<span class=\"number ml-based\">${num}</span>`\n        ).join(' ')}\n      </div>\n    </div>\n    <div class=\"recommendation-summary\">\n      <p>${recommendations.summary}</p>\n    </div>\n  `;\n  // Show Powerball recommendation in dedicated section if present\n  if (elements.powerballResults && recommendations.powerball) {\n    elements.powerballResults.innerHTML += `\n      <div class=\"powerball-recommendation-section\">\n        <h3>\uD83D\uDD34 Powerball Recommendation</h3>\n        <div class=\"powerball-recommendation\">\n          <span class=\"powerball-number\">${recommendations.powerball}</span>\n        </div>\n      </div>\n    `;\n  }\n}\n\nexport function displayBacktestResults(results, elements) {\n  if (!results.available) {\n    elements.backtestResults.innerHTML = `<p class=\"no-backtest\">${results.message}</p>`;\n    return;\n  }\n\n  const metrics = results.performanceMetrics;\n  elements.backtestResults.innerHTML = `\n    <div class=\"backtest-header\">\n      <h3>\uD83D\uDCCA Backtesting Results (${results.totalTests} tests)</h3>\n      <p>Method: ${results.method.toUpperCase()} | Draws Tested: ${results.totalDrawsTested} | Time: ${results.analysisTime || 'N/A'} seconds</p>\n    </div>\n    \n    <div class=\"metrics-grid\">\n      <div class=\"metric-card\">\n        <h4>Hit Rate</h4>\n        <div class=\"metric-value\">${(metrics.hitRate * 100).toFixed(1)}%</div>\n        <p>Percentage of tests with \u22653 correct numbers</p>\n      </div>\n      \n      <div class=\"metric-card\">\n        <h4>Precision</h4>\n        <div class=\"metric-value\">${(metrics.precision * 100).toFixed(1)}%</div>\n        <p>Accuracy of individual number predictions</p>\n      </div>\n      <div class=\"metric-card\">\n        <h4>ROI</h4>\n        <div class=\"metric-value ${metrics.roi >= 0 ? 'positive' : 'negative'}\">${metrics.roi >= 0 ? '+' : ''}${metrics.roi.toFixed(1)}%</div>\n        <p>Simulated return on investment</p>\n      </div>\n      \n      <div class=\"metric-card\">\n        <h4>Hit Distribution</h4>\n        <div class=\"hit-distribution\">\n          ${Object.entries(metrics.hitDistribution).map(([hitCount, count]) => `\n            <div class=\"hit-item\">\n              <span class=\"hit-count\">${hitCount} numbers:</span>\n              <span class=\"hit-value\">${count} hits</span>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"financial-summary\">\n      <h4>Financial Simulation</h4>\n      <p>Total Spent: $${metrics.totalSpent} | Total Won: $${metrics.totalWon}</p>\n      <p>Net: $${(metrics.totalWon - metrics.totalSpent).toFixed(2)}</p>\n    </div>\n  `;\n}\n\n/**\n * Query and initialize all main UI elements.\n * @returns {object} elements\n */\n\nexport function setAnalyzeBtnState(enabled) {\n  const btn = document.getElementById('analyzeBtn');\n  if (btn) {\n    btn.disabled = !enabled;\n    btn.classList.toggle('ready', enabled);\n  }\n}\n\nexport function showProgress(message) {\n  const indicator = document.getElementById('progress-indicator');\n  if (indicator) {\n    indicator.style.display = 'block';\n    indicator.innerHTML = `\n      <div class=\"progress-content\">\n        <div class=\"spinner\"></div>\n        <p>${message}</p>\n      </div>\n    `;\n  }\n  setAnalyzeBtnState(false);\n  showCancelButton();\n  updateProgress(message);\n}\n\nexport function updateProgress(message, percent) {\n  const progressText = document.getElementById('progress-text');\n  if (progressText) {\n    progressText.textContent = percent !== undefined ? `${message} (${percent}%)` : message;\n  }\n  const indicator = document.getElementById('progress-indicator');\n  if (indicator && message) {\n    const p = indicator.querySelector('p');\n    if (p) p.textContent = percent !== undefined ? `${message} (${percent}%)` : message;\n  }\n}\n\nexport function hideProgress() {\n  const indicator = document.getElementById('progress-indicator');\n  const cancelBtn = document.getElementById('cancel-btn');\n  const progressText = document.getElementById('progress-text');\n  const analyzeBtn = document.getElementById('analyze-btn');\n  if (indicator) indicator.style.display = 'none';\n  if (cancelBtn) cancelBtn.style.display = 'none';\n  if (progressText) progressText.textContent = '';\n  if (analyzeBtn) analyzeBtn.disabled = false;\n}\n\nexport function showCancelButton() {\n  const cancelBtn = document.getElementById('cancel-btn');\n  if (cancelBtn) cancelBtn.style.display = 'inline-block';\n}\n\nexport function hideCancelButton() {\n  const cancelBtn = document.getElementById('cancel-btn');\n  if (cancelBtn) cancelBtn.style.display = 'none';\n}\n\nexport function showError(title, error) {\n  let msg = '';\n  if (error && typeof error.message === 'string') {\n    msg = error.message;\n  } else if (typeof error === 'string') {\n    msg = error;\n  } else if (error) {\n    msg = JSON.stringify(error);\n  } else {\n    msg = 'Unknown error';\n  }\n  console.error(`${title}:`, error);\n  alert(`${title}: ${msg}`);\n}\n", "/**\r\n * Identify the most overdue numbers (not drawn for the longest time).\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69)\r\n * @param {number} topN - Number of overdue numbers to return (default 5)\r\n * @returns {Array} Array of most overdue numbers\r\n */\r\nexport function getOverdueNumbers(draws, maxNumber = 69) {\r\n  // Track the last seen index for each number\r\n  const lastSeen = Array(maxNumber).fill(-1);\r\n  for (let i = draws.length - 1; i >= 0; i--) {\r\n    const draw = draws[i];\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber && lastSeen[n - 1] === -1) {\r\n          lastSeen[n - 1] = i;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // Numbers with -1 have never been drawn (most overdue)\r\n  const numbered = lastSeen.map((idx, n) => ({ number: n + 1, lastSeen: idx }));\r\n  // Sort by lastSeen ascending (-1 first, then oldest)\r\n  return numbered.slice().sort((a, b) => a.lastSeen - b.lastSeen).map(x => x.number);\r\n}\r\n/**\r\n * Identify hot and cold numbers from draws.\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69)\r\n * @param {number} recentCount - Only consider the most recent N draws (optional)\r\n * @param {number} topN - Number of hot/cold numbers to return (default 5)\r\n * @returns {Object} { hot: [numbers], cold: [numbers] }\r\n */\r\nexport function getHotAndColdNumbers(draws, maxNumber = 69, recentCount = null, topN = 5) {\r\n  const useDraws = recentCount ? draws.slice(-recentCount) : draws;\r\n  const freq = Array(maxNumber).fill(0);\r\n  useDraws.forEach((draw, i) => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber) freq[n - 1]++;\r\n      });\r\n    } else {\r\n      // Debug: log if whiteBalls is missing or not an array\r\n      console.warn(`[getHotAndColdNumbers] Draw at index ${i} missing or invalid whiteBalls:`, draw.whiteBalls);\r\n    }\r\n  });\r\n  // Debug: log frequency array and draws\r\n  console.log('[getHotAndColdNumbers] Frequency array:', freq);\r\n  console.log('[getHotAndColdNumbers] Input draws sample:', useDraws.slice(0, 3));\r\n  // Pair each number with its frequency\r\n  const numbered = freq.map((count, idx) => ({ number: idx + 1, count }));\r\n  // Hot: topN with highest frequency (excluding zeros)\r\n  const hot = numbered\r\n    .filter(x => x.count > 0)\r\n    .sort((a, b) => b.count - a.count)\r\n    .slice(0, topN)\r\n    .map(x => x.number);\r\n  // Cold: topN with lowest frequency, always including zeros first\r\n  const cold = numbered\r\n    .sort((a, b) => a.count - b.count || a.number - b.number)\r\n    .slice(0, topN)\r\n    .map(x => x.number);\r\n  console.log('[getHotAndColdNumbers] Hot:', hot, 'Cold:', cold);\r\n  return { hot, cold };\r\n}\r\n// js/analysis.js\r\n// Core machine learning and statistical analysis logic for lottery analysis\r\n\r\n/**\r\n * Calculate frequency of each number in the draws.\r\n * @param {Array} draws - Array of draw objects with whiteBalls and powerball.\r\n * @param {number} maxNumber - Maximum number in the lottery (e.g., 69 for Powerball)\r\n * @returns {Object} Frequency table for whiteBalls and powerball\r\n */\r\nexport function calculateFrequency(draws, maxNumber = 69) {\r\n  const freq = { whiteBalls: Array(maxNumber).fill(0), powerball: {} };\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      draw.whiteBalls.forEach(n => {\r\n        if (n > 0 && n <= maxNumber) freq.whiteBalls[n - 1]++;\r\n      });\r\n    }\r\n    if (draw.powerball) {\r\n      freq.powerball[draw.powerball] = (freq.powerball[draw.powerball] || 0) + 1;\r\n    }\r\n  });\r\n  return freq;\r\n}\r\n\r\n/**\r\n * Find most common number pairs (basic pattern mining)\r\n * @param {Array} draws - Array of draw objects\r\n * @returns {Object} Pair frequency table\r\n */\r\nexport function findCommonPairs(draws) {\r\n  const pairCounts = {};\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n      for (let i = 0; i < sorted.length; i++) {\r\n        for (let j = i + 1; j < sorted.length; j++) {\r\n          const key = `${sorted[i]}-${sorted[j]}`;\r\n          pairCounts[key] = (pairCounts[key] || 0) + 1;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return pairCounts;\r\n}\r\n\r\n\r\n/**\r\n * Analyze gaps between consecutive numbers in each draw.\r\n * @param {Array} draws - Array of draw objects with whiteBalls\r\n * @returns {Object} Gap frequency table\r\n */\r\nexport function gapAnalysis(draws) {\r\n  const gapCounts = {};\r\n  draws.forEach(draw => {\r\n    if (Array.isArray(draw.whiteBalls)) {\r\n      const sorted = [...draw.whiteBalls].sort((a, b) => a - b);\r\n      for (let i = 1; i < sorted.length; i++) {\r\n        const gap = sorted[i] - sorted[i - 1];\r\n        gapCounts[gap] = (gapCounts[gap] || 0) + 1;\r\n      }\r\n    }\r\n  });\r\n  return gapCounts;\r\n}\r\n", "// js/worker-wrapper.js\n// Pub/Sub-based wrapper for ML and Backtest web workers\nimport state from './state.js';\n\nconst workerPaths = {\n  ml: 'dist/ml-worker.bundle.js',\n  backtest: 'dist/backtest-worker.bundle.js',\n};\n\nconst workers = {};\n\nfunction getWorker(type) {\n  if (!workers[type]) {\n    workers[type] = new Worker(workerPaths[type]);\n    workers[type].onmessage = (e) => {\n      const { type: eventType, data } = e.data;\n      // Publish all worker messages as events\n      state.publish(`${type}:${eventType}`, data);\n    };\n    workers[type].onerror = (err) => {\n      state.publish(`${type}:error`, { message: err.message });\n    };\n  }\n  return workers[type];\n}\n\n// Subscribe to events to send messages to workers\nstate.subscribe('ml:predict', (payload) => {\n  getWorker('ml').postMessage({ type: 'predict', data: payload });\n});\n\nstate.subscribe('backtest:run', (payload) => {\n  getWorker('backtest').postMessage({ type: 'run', data: payload });\n});\n\nexport default {\n  getWorker,\n};\n", "// ==================== BACKTEST INTEGRATION ==================== //\n\nexport async function runBacktest(settings = CONFIG.backtestSettings) {\n    if (state.draws.length === 0) {\n        state.publish('error', { title: 'No Data', message: 'Please upload a CSV file with lottery data first.' });\n        return;\n    }\n\n    state.publish('progress', 'Starting backtest...');\n\n    try {\n        const resultPromise = new Promise((resolve, reject) => {\n            let unsubResult, unsubError;\n            const cleanup = () => { unsubResult(); unsubError(); };\n\n            const handler = (data) => {\n                cleanup();\n                resolve(data.results || data);\n            };\n            const errorHandler = (err) => {\n                cleanup();\n                reject(err);\n            };\n\n            unsubResult = state.subscribe('backtest:result', handler);\n            unsubError = state.subscribe('backtest:error', errorHandler);\n        });\n\n        state.publish('backtest:run', { draws: state.draws, settings });\n        const results = await resultPromise;\n        state.publish('backtestResults', results);\n    } catch (error) {\n        state.publish('error', { title: 'Backtest Failed', message: error.message || error });\n    } finally {\n        state.publish('hideProgress');\n    }\n}\n\n// LOTTERY ANALYSIS PRO - CORE APPLICATION\n// Version: 2.4.2 | Last Updated: 2025-08-21 02:45 PM EST\n\nimport {\n    elements,\n    initUIElements,\n} from './ui.js';\nimport state from './state.js';\n\nimport { calculateEnergy, displayEnergyResults } from './utils.js';\nimport {\n    calculateFrequency,\n    findCommonPairs,\n    gapAnalysis,\n    getHotAndColdNumbers,\n    getOverdueNumbers\n} from './analysis.js';\nimport workerWrapper from './worker-wrapper.js';\n\n// ==================== CONFIG & STATE ==================== //\nconst CONFIG = {\n    analysisMethods: ['energy', 'ml', 'hybrid'],\n    backtestSettings: {\n        initialTrainingSize: 100,\n        testWindowSize: 50,\n    },\n    energyWeights: { // Default weights\n        prime: 0.3,\n        digitalRoot: 0.2,\n        mod5: 0.2,\n        gridPosition: 0.3\n    }\n};\n\n// Initialize state properties\nstate.draws = [];\n\n// App state for non-pubsub values\nconst appState = {\n    currentMethod: 'hybrid',\n    activeWorkers: new Map(),\n};\n\n\n// ==================== CORE ANALYSIS ==================== //\n\nexport async function runAnalysis() {\n    if (state.draws.length === 0) {\n        state.publish('error', { title: 'No Data', message: 'Please upload a CSV file with lottery data first.' });\n        return;\n    }\n\n    state.publish('analyzeBtnState', false);\n    state.publish('progress', 'Starting analysis...');\n\n    try {\n        // Core analytics\n        const maxNumber = 69; // TODO: make dynamic if needed\n        const frequency = calculateFrequency(state.draws, maxNumber);\n        const pairs = findCommonPairs(state.draws);\n        const gaps = gapAnalysis(state.draws);\n        const hotCold = getHotAndColdNumbers(state.draws, maxNumber);\n        const overdue = getOverdueNumbers(state.draws, maxNumber);\n\n        state.publish('analytics:frequency', frequency);\n        state.publish('analytics:pairs', pairs);\n        state.publish('analytics:gaps', gaps);\n        state.publish('analytics:hotCold', hotCold);\n        state.publish('analytics:overdue', overdue);\n        \n        state.publish('progress', 'Calculating energy signatures...');\n    const allNumbers = [...new Set(state.draws.flatMap(d => d.whiteBalls))];\n    console.log('allNumbers for energy:', allNumbers);\n    const energyData = calculateEnergy(allNumbers, CONFIG.energyWeights);\n    console.log('Energy Data Sample:', energyData.slice(0, 3));\n        state.publish('energyResults', energyData);\n\n        state.publish('progress', 'Running ML predictions...');\n        const mlResultPromise = new Promise((resolve, reject) => {\n            let unsubResult, unsubError;\n            const cleanup = () => { unsubResult(); unsubError(); };\n\n            const handler = (mlPrediction) => {\n                cleanup();\n                resolve(mlPrediction.prediction || mlPrediction);\n            };\n            const errorHandler = (err) => {\n                cleanup();\n                reject(err);\n            };\n\n            unsubResult = state.subscribe('ml:result', handler);\n            unsubError = state.subscribe('ml:error', errorHandler);\n        });\n\n        state.publish('ml:predict', { draws: state.draws });\n        const mlPrediction = await mlResultPromise;\n        state.publish('mlResults', mlPrediction);\n\n        state.publish('progress', 'Generating recommendations...');\n        const recommendations = generateRecommendations(energyData, mlPrediction);\n        state.publish('recommendations', recommendations);\n\n    } catch (error) {\n        state.publish('error', { title: 'Analysis Failed', message: error.message || error });\n    } finally {\n        state.publish('hideProgress');\n        state.publish('analyzeBtnState', true);\n    }\n}\n\nfunction generateRecommendations(energyData, mlPrediction) {\n    // Deduplicate by number\n    const uniqueByNumber = {};\n    energyData.forEach(item => { uniqueByNumber[item.number] = item; });\n    const deduped = Object.values(uniqueByNumber);\n    const topEnergy = [...deduped].sort((a, b) => b.energy - a.energy).slice(0, 5);\n    const mlNumbers = (mlPrediction.whiteBalls || []).slice(0, 5);\n\n    const energyNumbers = topEnergy.map(item => item.number);\n    const overlap = mlNumbers.filter(num => energyNumbers.includes(num));\n    console.log('[Recommendations] Top energy numbers (deduped):', energyNumbers);\n    console.log('[Recommendations] ML numbers:', mlNumbers);\n    return {\n        highConfidence: overlap,\n        energyBased: energyNumbers,\n        mlBased: mlNumbers,\n        powerball: mlPrediction.powerball,\n        summary: `Based on ${state.draws.length} historical draws`\n    };\n}\n\nfunction getFrequencyFallback(draws) {\n    const whiteFreq = new Array(70).fill(0);\n    draws.forEach(draw => {\n        if (draw.whiteBalls && Array.isArray(draw.whiteBalls)) {\n            draw.whiteBalls.forEach(n => {\n                if (n >= 1 && n <= 69) whiteFreq[n] += 1;\n            });\n        }\n    });\n    const predictedWhiteBalls = whiteFreq\n        .map((count, number) => ({ number, count }))\n        .filter(item => item.number >= 1)\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5)\n        .map(item => item.number);\n\n    return {\n        whiteBalls: predictedWhiteBalls,\n        powerball: Math.floor(Math.random() * 26) + 1,\n        confidence: 0.5,\n        model: 'fallback_frequency'\n    };\n}\n\nfunction initEventListeners() {\n    const controlPanel = document.querySelector('.control-panel');\n    if (controlPanel) {\n        controlPanel.addEventListener('click', (event) => {\n            if (event.target.id === 'analyzeBtn') runAnalysis();\n        });\n    } else {\n        console.error('Control panel not found for event delegation.');\n    }\n    elements.uploadInput.addEventListener('change', handleFileUpload);\n}\n\nexport async function handleFileUpload(event) {\n    const file = event.target.files[0];\n    if (!file) {\n        state.publish('analyzeBtnState', false);\n        return;\n    }\n\n    state.publish('progress', 'Parsing CSV file...');\n    Papa.parse(file, {\n        header: false,\n        dynamicTyping: false,\n        skipEmptyLines: true,\n        complete: (results) => {\n            state.publish('hideProgress');\n            if (results.errors.length) {\n                state.publish('error', { title: 'CSV Parsing Error', message: results.errors[0].message });\n                state.publish('analyzeBtnState', false);\n                return;\n            }\n\n            // Skip the first two header rows\n            const dataRows = results.data.slice(2);\n\n            state.draws = dataRows.map(row => {\n                const whiteBalls = [row[1], row[2], row[3], row[4], row[5]].map(Number);\n                const powerball = Number(row[6]);\n                const date = new Date(row[0]);\n                return { whiteBalls, powerball, date };\n            });\n            console.log(`Parsed ${state.draws.length} draws.`);\n            console.log('First 5 draws:', state.draws.slice(0, 5));\n            state.publish('drawsUpdated', state.draws);\n            state.publish('analyzeBtnState', true);\n        },\n        error: (err) => {\n            state.publish('hideProgress');\n            state.publish('error', { title: 'CSV Parsing Error', message: err });\n            state.publish('analyzeBtnState', false);\n        }\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    initUIElements(CONFIG, state);\n    initEventListeners();\n});"],
  "mappings": "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",
  "names": ["displayEnergyResults", "CONFIG", "state", "elements", "mlPrediction"]
}
